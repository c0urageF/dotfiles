;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "subr.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_arglist" "_fileonly")) nil [1111 2631])
            ("defalias" code nil nil [2660 2681])
            ("noreturn" function (:arguments ("form")) nil [2683 2887])
            ("1value" function (:arguments ("form")) nil [2889 3127])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3129 3589])
            ("lambda" function (:arguments ("cdr")) nil [3591 4749])
            ("setq-local" function (:arguments ("var" "val")) nil [4751 4963])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [4965 5406])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5408 5823])
            ("push" function (:arguments ("newelt" "place")) nil [5825 6419])
            ("pop" function (:arguments ("place")) nil [6421 7232])
            ("when" function (:arguments ("cond" "body")) nil [7234 7522])
            ("unless" function (:arguments ("cond" "body")) nil [7524 7810])
            ("dolist" function (:arguments ("spec" "body")) nil [7812 9091])
            ("dotimes" function (:arguments ("spec" "body")) nil [9093 10558])
            ("declare" function (:arguments ("_specs")) nil [10560 11075])
            ("ignore-errors" function (:arguments ("body")) nil [11077 11384])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11415 11563])
            ("error" function (:arguments ("args")) nil [11620 12006])
            ("user-error" function (:arguments ("format" "args")) nil [12008 12534])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [12536 13448])
            ("frame-configuration-p" function (:arguments ("object")) nil [13562 13817])
            ("caar" function (:arguments ("x")) nil [13842 13913])
            ("cadr" function (:arguments ("x")) nil [13915 13986])
            ("cdar" function (:arguments ("x")) nil [13988 14059])
            ("cddr" function (:arguments ("x")) nil [14061 14132])
            ("last" function (:arguments ("list" "n")) nil [14134 14551])
            ("butlast" function (:arguments ("list" "n")) nil [14553 14781])
            ("nbutlast" function (:arguments ("list" "n")) nil [14783 15060])
            ("delete-dups" function (:arguments ("list")) nil [15062 15415])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [15492 15960])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [15962 17779])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [17781 18530])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [18570 19370])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [19372 19694])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [19696 19964])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [19966 20401])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [20403 20887])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [20889 21382])
            ("remove" function (:arguments ("elt" "seq")) nil [21384 21737])
            ("remq" function (:arguments ("elt" "list")) nil [21739 22070])
            ("kbd" function (:arguments ("keys")) nil [22095 22405])
            ("put" code nil nil [22406 22424])
            ("undefined" function (:user-visible-flag t) nil [22426 22881])
            ("put" code nil nil [22976 23011])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [23013 23577])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [23579 24231])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [24233 26294])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [26296 26976])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [26978 27448])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [27502 28102])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [28104 28570])
            ("keymap-canonicalize" function (:arguments ("map")) nil [28572 30441])
            ("put" code nil nil [30443 30500])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [30502 30877])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [30908 31654])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [31656 32460])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [32462 32658])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [32660 32889])
            ("key-substitution-in-progress" variable nil nil [32945 33038])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [33040 34424])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [34426 36091])
            ("global-map" variable nil nil [36240 36414])
            ("esc-map" variable nil nil [36416 36556])
            ("ctl-x-map" variable nil nil [36558 36693])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [36695 36773])
            ("defalias" code nil nil [36774 36812])
            ("define-key" code nil nil [36813 36855])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [36857 36929])
            ("defalias" code nil nil [36930 36968])
            ("define-key" code nil nil [36969 37011])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [37051 37106])
            ("listify-key-sequence" function (:arguments ("key")) nil [37108 37346])
            ("eventp" function (:arguments ("obj")) nil [37348 37549])
            ("event-modifiers" function (:arguments ("event")) nil [37551 38845])
            ("event-basic-type" function (:arguments ("event")) nil [38847 39615])
            ("mouse-movement-p" function (:arguments ("object")) nil [39617 39750])
            ("mouse-event-p" function (:arguments ("object")) nil [39752 39970])
            ("event-start" function (:arguments ("event")) nil [39972 41132])
            ("event-end" function (:arguments ("event")) nil [41134 41452])
            ("event-click-count" function (:arguments ("event")) nil [41454 41664])
            ("posnp" function (:arguments ("obj")) nil [41721 42303])
            ("posn-window" function (:arguments ("position")) nil [42337 42519])
            ("posn-area" function (:arguments ("position")) nil [42521 42845])
            ("posn-point" function (:arguments ("position")) nil [42847 43313])
            ("posn-set-point" function (:arguments ("position")) nil [43315 43635])
            ("posn-x-y" function (:arguments ("position")) nil [43637 43890])
            ("declare-function" code nil nil [43892 43958])
            ("posn-col-row" function (:arguments ("position")) nil [43960 45778])
            ("posn-actual-col-row" function (:arguments ("position")) nil [45780 46370])
            ("posn-timestamp" function (:arguments ("position")) nil [46372 46560])
            ("posn-string" function (:arguments ("position")) nil [46562 46921])
            ("posn-image" function (:arguments ("position")) nil [46923 47163])
            ("posn-object" function (:arguments ("position")) nil [47165 47534])
            ("posn-object-x-y" function (:arguments ("position")) nil [47536 47823])
            ("posn-object-width-height" function (:arguments ("position")) nil [47825 48085])
            ("define-obsolete-function-alias" code nil nil [48128 48193])
            ("define-obsolete-function-alias" code nil nil [48194 48267])
            ("define-obsolete-function-alias" code nil nil [48268 48332])
            ("define-obsolete-function-alias" code nil nil [48333 48404])
            ("define-obsolete-function-alias" code nil nil [48405 48478])
            ("define-obsolete-function-alias" code nil nil [48479 48551])
            ("make-obsolete" code nil nil [48553 48619])
            ("make-obsolete" code nil nil [48620 48669])
            ("insert-string" function (:arguments ("args")) nil [48671 48989])
            ("makehash" function (:arguments ("test")) nil [48991 49111])
            ("log10" function (:arguments ("x")) nil [49113 49222])
            ("defalias" code nil nil [49270 49304])
            ("make-obsolete" code nil nil [49305 49359])
            ("defalias" code nil nil [49360 49396])
            ("make-obsolete" code nil nil [49397 49453])
            ("make-obsolete" code nil nil [49454 49561])
            ("set-advertised-calling-convention" code nil nil [49562 49663])
            ("set-advertised-calling-convention" code nil nil [49664 49732])
            ("set-advertised-calling-convention" code nil nil [49733 49818])
            ("set-advertised-calling-convention" code nil nil [49819 49888])
            ("set-advertised-calling-convention" code nil nil [49889 49958])
            ("make-obsolete-variable" code nil nil [50363 50438])
            ("make-obsolete-variable" code nil nil [50439 50518])
            ("make-obsolete-variable" code nil nil [50519 50586])
            ("make-obsolete-variable" code nil nil [50587 50652])
            ("make-obsolete-variable" code nil nil [50653 50714])
            ("make-obsolete-variable" code nil nil [50715 50786])
            ("make-obsolete-variable" code nil nil [50787 50852])
            ("make-obsolete-variable" code nil nil [50853 50914])
            ("make-obsolete-variable" code nil nil [50915 50990])
            ("make-obsolete-variable" code nil nil [50991 51068])
            ("make-obsolete-variable" code nil nil [51069 51148])
            ("make-obsolete-variable" code nil nil [51149 51226])
            ("make-obsolete-variable" code nil nil [51227 51306])
            ("make-obsolete-variable" code nil nil [51307 51396])
            ("make-obsolete-variable" code nil nil [51397 51472])
            ("make-obsolete-variable" code nil nil [51473 51554])
            ("make-obsolete-variable" code nil nil [51555 51638])
            ("make-obsolete-variable" code nil nil [51639 51734])
            ("make-obsolete-variable" code nil nil [51735 51822])
            ("make-obsolete-variable" code nil nil [51823 51904])
            ("make-obsolete-variable" code nil nil [51905 51992])
            ("make-obsolete-variable" code nil nil [51993 52084])
            ("make-obsolete-variable" code nil nil [52085 52150])
            ("make-obsolete-variable" code nil nil [52151 52216])
            ("make-obsolete-variable" code nil nil [52217 52320])
            ("make-obsolete-variable" code nil nil [52321 52414])
            ("make-obsolete-variable" code nil nil [52415 52478])
            ("make-obsolete-variable" code nil nil [52479 52619])
            ("make-obsolete-variable" code nil nil [52621 52685])
            ("make-obsolete-variable" code nil nil [52686 52769])
            ("make-obsolete-variable" code nil nil [52770 52842])
            ("make-obsolete-variable" code nil nil [52843 52919])
            ("make-obsolete-variable" code nil nil [52920 52977])
            ("make-obsolete" code nil nil [52978 53034])
            ("make-obsolete" code nil nil [53035 53095])
            ("make-obsolete" code nil nil [53097 53151])
            ("make-obsolete" code nil nil [53152 53208])
            ("define-obsolete-variable-alias" code nil nil [53247 53334])
            ("define-obsolete-variable-alias" code nil nil [53336 53429])
            ("define-obsolete-variable-alias" code nil nil [53430 53523])
            ("make-obsolete-variable" code nil nil [53769 53833])
            ("defvaralias" code nil nil [53835 53892])
            ("defalias" code nil nil [53965 54009])
            ("defalias" code nil nil [54010 54054])
            ("defalias" code nil nil [54055 54088])
            ("defalias" code nil nil [54089 54122])
            ("defalias" code nil nil [54123 54158])
            ("defalias" code nil nil [54159 54185])
            ("defalias" code nil nil [54186 54212])
            ("defalias" code nil nil [54213 54235])
            ("defalias" code nil nil [54261 54300])
            ("defalias" code nil nil [54301 54355])
            ("defalias" code nil nil [54356 54426])
            ("defalias" code nil nil [54427 54499])
            ("defalias" code nil nil [54500 54543])
            ("defalias" code nil nil [54544 54588])
            ("defalias" code nil nil [54589 54622])
            ("defalias" code nil nil [54623 54656])
            ("defalias" code nil nil [54688 54731])
            ("defalias" code nil nil [54732 54781])
            ("defalias" code nil nil [54783 54836])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [54875 57004])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [57006 58674])
            ("letrec" function (:arguments ("binders" "body")) nil [58676 59305])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [59307 62360])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [62362 65709])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [65712 67031])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [67033 68245])
            ("delay-mode-hooks" variable nil nil [68267 68361])
            ("delayed-mode-hooks" variable nil nil [68362 68443])
            ("make-variable-buffer-local" code nil nil [68444 68492])
            ("put" code nil nil [68493 68535])
            ("change-major-mode-after-body-hook" variable nil nil [68537 68651])
            ("after-change-major-mode-hook" variable nil nil [68653 68755])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [68757 69640])
            ("delay-mode-hooks" function (:arguments ("body")) nil [69642 70043])
            ("derived-mode-p" function (:arguments ("modes")) nil [70104 70417])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [70608 70801])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [70803 73488])
            ("autoloadp" function (:arguments ("object")) nil [73510 73612])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [74096 75303])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [75305 76711])
            ("process-lines" function (:arguments ("program" "args")) nil [76736 77341])
            ("process-live-p" function (:arguments ("process")) nil [77343 77656])
            ("make-obsolete" code nil nil [77676 77801])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [77802 78146])
            ("process-kill-buffer-query-function" function nil nil [78148 78567])
            ("add-hook" code nil nil [78569 78644])
            ("process-get" function (:arguments ("process" "propname")) nil [78675 78887])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [78889 79128])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [79168 79218])
            ("read-key-delay" variable (:default-value 0.01) nil [79220 79248])
            ("read-key" function (:arguments ("prompt")) nil [79297 82003])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [82005 82342])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [82344 85116])
            ("read-number" function (:arguments ("prompt" "default")) nil [85118 86188])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [86190 87929])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [87931 90275])
            ("declare-function" code nil nil [90315 90394])
            ("y-or-n-p" function (:arguments ("prompt")) nil [90396 93874])
            ("atomic-change-group" function (:arguments ("body")) nil [93905 95111])
            ("prepare-change-group" function (:arguments ("buffer")) nil [95113 96589])
            ("activate-change-group" function (:arguments ("handle")) nil [96591 96829])
            ("accept-change-group" function (:arguments ("handle")) nil [96831 97122])
            ("cancel-change-group" function (:arguments ("handle")) nil [97124 98295])
            ("define-obsolete-function-alias" code nil nil [98353 98435])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [98437 99937])
            ("copy-overlay" function (:arguments ("o")) nil [99966 100540])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [100542 101550])
            ("suspend-hook" variable nil nil [101572 101656])
            ("suspend-resume-hook" variable nil nil [101658 101756])
            ("temp-buffer-show-hook" variable nil nil [101758 101974])
            ("temp-buffer-setup-hook" variable nil nil [101976 102207])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [102209 102584])
            ("buffer-narrowed-p" function nil nil [102617 102751])
            ("find-tag-default-bounds" function nil nil [102753 103756])
            ("find-tag-default" function nil nil [103758 104024])
            ("find-tag-default-as-regexp" function nil nil [104026 104461])
            ("find-tag-default-as-symbol-regexp" function nil nil [104463 105022])
            ("play-sound" function (:arguments ("sound")) nil [105024 105843])
            ("declare-function" code nil nil [105845 105901])
            ("shell-quote-argument" function (:arguments ("argument")) nil [105903 108048])
            ("string-or-null-p" function (:arguments ("object")) nil [108050 108187])
            ("booleanp" function (:arguments ("object")) nil [108189 108347])
            ("special-form-p" function (:arguments ("object")) nil [108349 108594])
            ("macrop" function (:arguments ("object")) nil [108596 108828])
            ("field-at-pos" function (:arguments ("pos")) nil [108830 109100])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [109102 109465])
            ("defalias" code nil nil [109467 109820])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [109822 110632])
            ("yank-handled-properties" variable nil nil [110739 110771])
            ("yank-excluded-properties" variable nil nil [110772 110805])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [110807 111596])
            ("yank-undo-function" variable nil nil [111598 111625])
            ("insert-for-yank" function (:arguments ("string")) nil [111627 111986])
            ("insert-for-yank-1" function (:arguments ("string")) nil [111988 114338])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [114340 114825])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [114827 115513])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [115515 115827])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [115966 116404])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [116442 117426])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [117428 117920])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [117922 119563])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [119565 120114])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [120169 120557])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [120559 121079])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [121081 121641])
            ("with-selected-window" function (:arguments ("window" "body")) nil [121643 122781])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [122783 123524])
            ("save-window-excursion" function (:arguments ("body")) nil [123526 124345])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [124347 125742])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [125795 128248])
            ("with-temp-file" function (:arguments ("file" "body")) nil [128250 128945])
            ("with-temp-message" function (:arguments ("message" "body")) nil [128947 129874])
            ("with-temp-buffer" function (:arguments ("body")) nil [129876 130435])
            ("with-silent-modifications" function (:arguments ("body")) nil [130437 131635])
            ("with-output-to-string" function (:arguments ("body")) nil [131637 132082])
            ("with-local-quit" function (:arguments ("body")) nil [132084 132839])
            ("while-no-input" function (:arguments ("body")) nil [132841 133341])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [133343 133896])
            ("define-obsolete-function-alias" code nil nil [133898 133993])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [133995 134932])
            ("combine-after-change-calls" function (:arguments ("body")) nil [134934 135629])
            ("with-case-table" function (:arguments ("table" "body")) nil [135631 136152])
            ("save-match-data-internal" variable nil nil [136185 136218])
            ("save-match-data" function (:arguments ("body")) nil [136476 137156])
            ("match-string" function (:arguments ("num" "string")) nil [137158 137803])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [137805 138529])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [138532 139181])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [139184 140369])
            ("looking-at-p" function (:arguments ("regexp")) nil [140371 140549])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [140551 140771])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [140773 142683])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [142705 143058])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [143320 146436])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [146438 146999])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [147001 147637])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [147671 148075])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [148077 150656])
            ("string-prefix-p" function (:arguments ("str1" "str2" "ignore-case")) nil [150659 150958])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [150960 151369])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [151371 152154])
            ("load-history-regexp" function (:arguments ("file")) nil [152194 152830])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [152832 153268])
            ("put" code nil nil [153270 153316])
            ("eval-after-load" function (:arguments ("file" "form")) nil [153317 157198])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [157200 157480])
            ("after-load-functions" variable nil nil [157482 157655])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [157657 159196])
            ("eval-next-after-load" function (:arguments ("file")) nil [159198 159498])
            ("display-delayed-warnings" function nil nil [159502 159769])
            ("collapse-delayed-warnings" function nil nil [159771 160450])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [160580 160920])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [160922 161177])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [161206 161549])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [161551 161775])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [161799 162435])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [162437 162757])
            ("syntax-after" function (:arguments ("pos")) nil [162759 163132])
            ("syntax-class" function (:arguments ("syntax")) nil [163134 163486])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163533 164116])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164131 164680])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164701 165183])
            ("text-clone--maintaining" variable nil nil [165205 165241])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [165243 167309])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [167311 169559])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [169667 171245])
            ("called-interactively-p-functions" variable nil nil [171248 171665])
            ("internal--call-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote call-interactively)))
                nil [171667 171744])
            ("called-interactively-p" function (:arguments ("kind")) nil [171746 175843])
            ("interactive-p" function nil nil [175845 176855])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [176857 177202])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [177204 177512])
            ("define-obsolete-function-alias" code nil nil [177514 177601])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [177603 179906])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [180489 181256])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [181258 183103])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [183105 183604])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [183606 183723])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [183725 185431])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [185433 185588])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [185590 186694])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [186731 186890])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-_+ ]?snapshot$" . -4) ("^[-_+]$" . -4) ("^[-_+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-_+ ]?alpha$" . -3) ("^[-_+ ]?beta$" . -2) ("^[-_+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [186893 188388])
            ("version-to-list" function (:arguments ("ver")) nil [188391 190795])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [190798 191629])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [191632 192431])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [192434 193219])
            ("version-list-not-zero" function (:arguments ("lst")) nil [193221 193531])
            ("version<" function (:arguments ("v1" "v2")) nil [193534 194038])
            ("version<=" function (:arguments ("v1" "v2")) nil [194040 194558])
            ("version=" function (:arguments ("v1" "v2")) nil [194560 195054])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [195068 195130])
            ("when" code nil nil [195292 195417])
            ("unmsys--file-name" function (:arguments ("file")) nil [195550 196037]))          
      :file "subr.el.gz"
      :pointmax 196062
      :fsize 58331
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "faces.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [874 1326])
            ("declare-function" code nil nil [1328 1400])
            ("help-xref-stack-item" variable nil nil [1402 1431])
            ("face-name-history" variable nil nil [1433 1614])
            ("font-selection" customgroup (:user-visible-flag t) nil [1785 1867])
            ("face-font-selection-order" variable (:default-value (quote (:width :height :weight :slant))) nil [1870 2652])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (quote (("Monospace" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))) nil [2826 3508])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (if (featurep (quote w32)) (quote (("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))) (quote (("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))) nil [3554 4618])
            ("face-list" function nil nil [4793 4894])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face" "no-init-from-resources"))
                nil [4896 5820])
            ("set-advertised-calling-convention" code nil nil [6010 6071])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [6073 6335])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [6337 7588])
            ("facep" function (:arguments ("face")) nil [7768 7917])
            ("check-face" function (:arguments ("face")) nil [7920 8074])
            ("face-id" function (:arguments ("face" "_frame")) nil [8255 8597])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [8599 9016])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [9019 9732])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [9735 10079])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) (quote ((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))) nil [10277 12169])
            ("declare-function" code nil nil [12172 12267])
            ("declare-function" code nil nil [12269 12383])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [12385 13094])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [13097 13460])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [13463 14059])
            ("face-name" function (:arguments ("face")) nil [14243 14335])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [14338 14804])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [14806 16620])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [16622 17211])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [17214 17495])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [17497 18553])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [18555 19611])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [19613 20633])
            ("defalias" code nil nil [20636 20684])
            ("face-underline-p" function (:arguments ("face" "frame" "inherit")) nil [20687 21140])
            ("face-inverse-video-p" function (:arguments ("face" "frame" "inherit")) nil [21143 21577])
            ("face-bold-p" function (:arguments ("face" "frame" "inherit")) nil [21580 22099])
            ("face-italic-p" function (:arguments ("face" "frame" "inherit")) nil [22102 22606])
            ("face-documentation" function (:arguments ("face")) nil [22782 23204])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [23207 23395])
            ("defalias" code nil nil [23398 23445])
            ("defalias" code nil nil [23446 23501])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [23682 31016])
            ("make-face-bold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31018 31469])
            ("make-face-unbold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31472 31872])
            ("make-face-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31875 32332])
            ("make-face-unitalic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [32335 32740])
            ("make-face-bold-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [32743 33240])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [33243 33669])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [33875 34344])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [34347 34816])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [34819 35424])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [35427 36196])
            ("define-obsolete-function-alias" code nil nil [36198 36311])
            ("set-face-inverse-video" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [36314 36887])
            ("define-obsolete-function-alias" code nil nil [36889 37010])
            ("set-face-bold" function (:arguments ("face" "bold-p" "frame")) nil [37012 37428])
            ("define-obsolete-function-alias" code nil nil [37430 37501])
            ("set-face-italic" function (:arguments ("face" "italic-p" "frame")) nil [37504 37940])
            ("define-obsolete-function-alias" code nil nil [37942 38017])
            ("defalias" code nil nil [38020 38076])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [38079 38879])
            ("crm-separator" variable nil nil [39065 39087])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [39103 41604])
            ("x-bitmap-file-path" variable nil nil [41663 41690])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [41692 44381])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value (quote ((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance"))))
                nil [44384 45154])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [45157 45304])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [45307 46234])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [46237 46854])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [47015 49356])
            ("declare-function" code nil nil [49358 49404])
            ("declare-function" code nil nil [49405 49496])
            ("read-face-font" function (:arguments ("face" "frame")) nil [49498 49840])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [49843 50271])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [50273 51218])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [51220 52009])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [52180 52343])
            ("help-xref-stack" variable nil nil [52472 52496])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [52497 55532])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [55535 59245])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [59523 60113])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [60116 61918])
            ("face-spec-choose" function (:arguments ("spec" "frame" "no-match-retval")) nil [61921 63342])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [63345 64483])
            ("face-spec-set" function (:arguments ("face" "spec" "spec-type")) nil [64485 66439])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [66441 68106])
            ("face-spec-set-2" function (:arguments ("face" "frame" "spec")) nil [68108 68435])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [68437 69511])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [69513 69708])
            ("face-default-spec" function (:arguments ("face")) nil [69710 69898])
            ("face-user-default-spec" function (:arguments ("face")) nil [69900 70183])
            ("defined-colors" function (:arguments ("frame")) nil [70441 70899])
            ("defalias" code nil nil [70900 70944])
            ("declare-function" code nil nil [70946 71016])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [71018 71685])
            ("defalias" code nil nil [71686 71732])
            ("declare-function" code nil nil [71734 71801])
            ("color-values" function (:arguments ("color" "frame")) nil [71803 72722])
            ("defalias" code nil nil [72724 72764])
            ("declare-function" code nil nil [72766 72833])
            ("display-color-p" function (:arguments ("display")) nil [72835 73237])
            ("defalias" code nil nil [73238 73284])
            ("declare-function" code nil nil [73286 73356])
            ("display-grayscale-p" function (:arguments ("display")) nil [73358 73791])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [73793 76497])
            ("face-at-point" function (:arguments ("thing" "multiple")) nil [76499 77740])
            ("foreground-color-at-point" function nil nil [77742 78471])
            ("background-color-at-point" function nil nil [78497 79226])
            ("declare-function" code nil nil [79421 79466])
            ("declare-function" code nil nil [79467 79560])
            ("declare-function" code nil nil [79561 79655])
            ("declare-function" code nil nil [79656 79710])
            ("x-display-name" variable nil nil [79711 79734])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [79736 80631])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [80634 81640])
            ("declare-function" code nil nil [81642 81692])
            ("declare-function" code nil nil [81693 81759])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [81761 82962])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [82964 84433])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [84435 85111])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [85114 85873])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [85875 86440])
            ("tty-setup-hook" variable nil nil [86442 86674])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type" "run-hook")) nil [86676 88023])
            ("tty-set-up-initial-frame-faces" function nil nil [88129 88286])
            ("basic-faces" customgroup (:user-visible-flag t) nil [88457 88532])
            ("default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [88534 88666])
            ("bold" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [88668 88747])
            ("italic" variable
               (:default-value (quote ((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic)))
                :type "face")
                nil [88749 89114])
            ("bold-italic" variable
               (:default-value (quote ((t :weight bold :slant italic)))
                :type "face")
                nil [89116 89223])
            ("underline" variable
               (:default-value (quote ((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t)))
                :type "face")
                nil [89225 89415])
            ("fixed-pitch" variable
               (:default-value (quote ((t :family "Monospace")))
                :type "face")
                nil [89417 89521])
            ("variable-pitch" variable
               (:default-value (quote ((t :family "Sans Serif")))
                :type "face")
                nil [89523 89634])
            ("shadow" variable
               (:default-value (quote ((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow")))
                :type "face")
                nil [89636 90074])
            ("link" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline)))
                :type "face")
                nil [90076 90543])
            ("link-visited" variable
               (:default-value (quote ((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [90545 90795])
            ("highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [90797 91339])
            ("region" variable
               (:default-value (quote ((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :distant-foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :distant-foreground "ns_selection_fg_color" :background "ns_selection_bg_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [91501 92427])
            ("secondary-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [92429 92977])
            ("trailing-whitespace" variable
               (:default-value (quote ((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t)))
                :type "face")
                nil [92979 93256])
            ("escape-glyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [93258 93688])
            ("nobreak-space" variable
               (:default-value (quote ((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [93690 93950])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [93952 94069])
            ("mode-line" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [94071 94367])
            ("mode-line-inactive" variable
               (:default-value (quote ((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30")))
                :type "face")
                nil [94369 94907])
            ("define-obsolete-face-alias" code nil nil [94908 94982])
            ("mode-line-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight)))
                :type "face")
                nil [94984 95258])
            ("define-obsolete-face-alias" code nil nil [95259 95335])
            ("mode-line-emphasis" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [95337 95580])
            ("mode-line-buffer-id" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [95582 95765])
            ("define-obsolete-face-alias" code nil nil [95766 95842])
            ("header-line" variable
               (:default-value (quote ((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t)))
                :type "face")
                nil [95844 97180])
            ("vertical-border" variable
               (:default-value (quote ((((type tty)) :inherit mode-line-inactive)))
                :type "face")
                nil [97182 97347])
            ("window-divider" variable
               (:default-value (quote ((t :foreground "gray60")))
                :type "face")
                nil [97349 97809])
            ("window-divider-first-pixel" variable
               (:default-value (quote ((t :foreground "gray80")))
                :type "face")
                nil [97811 98220])
            ("window-divider-last-pixel" variable
               (:default-value (quote ((t :foreground "gray40")))
                :type "face")
                nil [98222 98627])
            ("minibuffer-prompt" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue")))
                :type "face")
                nil [98629 99124])
            ("setq" code nil nil [99126 99237])
            ("fringe" variable
               (:default-value (quote ((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray")))
                :type "face")
                nil [99239 99551])
            ("scroll-bar" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [99553 99691])
            ("border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [99693 99822])
            ("cursor" variable
               (:default-value (quote ((((background light)) :background "black") (((background dark)) :background "white")))
                :type "face")
                nil [99824 100274])
            ("put" code nil nil [100276 100308])
            ("mouse" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [100310 100436])
            ("tool-bar" variable
               (:default-value (quote ((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey")))
                :type "face")
                nil [100438 100728])
            ("menu" variable
               (:default-value (quote ((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t)))
                :type "face")
                nil [100730 100974])
            ("help-argument-name" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [100976 101098])
            ("glyphless-char" variable
               (:default-value (quote ((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6)))
                :type "face")
                nil [101100 101374])
            ("error" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t)))
                :type "face")
                nil [101376 101906])
            ("warning" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow")))
                :type "face")
                nil [101908 102142])
            ("success" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green")))
                :type "face")
                nil [102144 102563])
            ("tty-menu-enabled-face" variable
               (:default-value (quote ((t :foreground "yellow" :background "blue" :weight bold)))
                :type "face")
                nil [102589 102761])
            ("tty-menu-disabled-face" variable
               (:default-value (quote ((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (t :foreground "white" :background "blue")))
                :type "face")
                nil [102763 103009])
            ("tty-menu-selected-face" variable
               (:default-value (quote ((t :background "red")))
                :type "face")
                nil [103011 103158])
            ("paren-showing-faces" customgroup (:user-visible-flag t) nil [103160 103295])
            ("show-paren-match" variable
               (:default-value (quote ((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark)) :background "grey50") (t :background "gray")))
                :type "face")
                nil [103297 103682])
            ("show-paren-mismatch" variable
               (:default-value (quote ((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t))))
                :type "face")
                nil [103684 103875])
            ("x-font-regexp" variable nil nil [104251 104277])
            ("x-font-regexp-head" variable nil nil [104278 104309])
            ("x-font-regexp-weight" variable nil nil [104310 104343])
            ("x-font-regexp-slant" variable nil nil [104344 104376])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [104378 104418])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [104419 104458])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [104459 104499])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [104500 104541])
            ("let" code nil nil [104624 105842])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [105845 106959])
            ("font-list-limit" variable (:default-value 100) nil [106961 107076])
            ("make-obsolete-variable" code nil nil [107077 107129])
            ("faces" package nil nil [107131 107147]))          
      :file "faces.el.gz"
      :pointmax 107172
      :fsize 26972
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "env.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("read-envvar-name-history" variable nil nil [1441 1478])
            ("read-envvar-name" function (:arguments ("prompt" "mustmatch")) nil [1480 2282])
            ("setenv-history" variable nil nil [2330 2357])
            ("env--substitute-vars-regexp" variable
               (:constant-flag t
                :default-value "\\$\\(?:\\(?1:[[:alnum:]_]+\\)\\|{\\(?1:[^{}]+\\)}\\|\\$\\)")
                nil [2359 2461])
            ("substitute-env-vars" function (:arguments ("string" "when-undefined")) nil [2463 4017])
            ("substitute-env-in-file-name" function (:arguments ("filename")) nil [4019 4401])
            ("setenv-internal" function (:arguments ("env" "variable" "value" "keep-empty")) nil [4403 5395])
            ("setenv" function
               (:user-visible-flag t
                :arguments ("variable" "value" "substitute-env-vars"))
                nil [5465 7868])
            ("getenv" function
               (:user-visible-flag t
                :arguments ("variable" "frame"))
                nil [7870 8920])
            ("env" package nil nil [8922 8936]))          
      :file "env.el.gz"
      :pointmax 8959
      :fsize 3296
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "files.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock-keywords" variable nil nil [1117 1144])
            ("backup" customgroup (:user-visible-flag t) nil [1146 1217])
            ("find-file" customgroup (:user-visible-flag t) nil [1219 1278])
            ("delete-auto-save-files" variable (:default-value t) nil [1281 1531])
            ("directory-abbrev-alist" variable nil nil [1533 2498])
            ("make-backup-files" variable (:default-value t) nil [2500 3423])
            ("backup-inhibited" variable nil nil [3524 3716])
            ("put" code nil nil [3717 3759])
            ("backup-by-copying" variable nil nil [3761 3939])
            ("backup-by-copying-when-linked" variable nil nil [3941 4234])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4236 4724])
            ("put" code nil nil [4725 4782])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4784 5407])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5409 5628])
            ("buffer-offer-save" variable nil nil [5630 5849])
            ("make-variable-buffer-local" code nil nil [5850 5897])
            ("put" code nil nil [5898 5941])
            ("find-file-existing-other-name" variable (:default-value t) nil [5943 6236])
            ("find-file-visit-truename" variable nil nil [6238 6610])
            ("put" code nil nil [6611 6673])
            ("revert-without-query" variable nil nil [6675 7040])
            ("buffer-file-number" variable nil nil [7042 7311])
            ("make-variable-buffer-local" code nil nil [7312 7360])
            ("put" code nil nil [7361 7405])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7407 7552])
            ("buffer-file-read-only" variable nil nil [7554 7644])
            ("make-variable-buffer-local" code nil nil [7645 7696])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7698 8142])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8210 8279])
            ("declare-function" code nil nil [8281 8331])
            ("declare-function" code nil nil [8332 8381])
            ("declare-function" code nil nil [8382 8468])
            ("declare-function" code nil nil [8469 8536])
            ("declare-function" code nil nil [8537 8609])
            ("declare-function" code nil nil [8610 8666])
            ("declare-function" code nil nil [8667 8726])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8728 9401])
            ("file-precious-flag" variable nil nil [9403 10243])
            ("break-hardlink-on-save" variable nil nil [10245 11000])
            ("version-control" variable nil nil [11002 11372])
            ("put" code nil nil [11373 11469])
            ("dired-kept-versions" variable (:default-value 2) nil [11471 11611])
            ("delete-old-versions" variable nil nil [11613 11879])
            ("kept-old-versions" variable (:default-value 2) nil [11881 12020])
            ("put" code nil nil [12021 12076])
            ("kept-new-versions" variable (:default-value 2) nil [12078 12255])
            ("put" code nil nil [12256 12311])
            ("require-final-newline" variable nil nil [12313 13084])
            ("mode-require-final-newline" variable (:default-value t) nil [13086 14221])
            ("auto-save-default" variable (:default-value t) nil [14223 14365])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14367 15795])
            ("save-abbrevs" variable (:default-value t) nil [15797 16008])
            ("find-file-run-dired" variable (:default-value t) nil [16010 16207])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16209 16537])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16598 16926])
            ("define-obsolete-variable-alias" code nil nil [17034 17135])
            ("find-file-not-found-functions" variable nil nil [17136 17437])
            ("define-obsolete-variable-alias" code nil nil [17535 17607])
            ("find-file-hook" variable nil nil [17608 17885])
            ("define-obsolete-variable-alias" code nil nil [17887 17966])
            ("write-file-functions" variable nil nil [17967 18748])
            ("put" code nil nil [18749 18795])
            ("local-write-file-hooks" variable nil nil [18797 18832])
            ("make-variable-buffer-local" code nil nil [18833 18885])
            ("put" code nil nil [18886 18934])
            ("make-obsolete-variable" code nil nil [18935 19012])
            ("define-obsolete-variable-alias" code nil nil [19014 19105])
            ("write-contents-functions" variable nil nil [19106 19862])
            ("make-variable-buffer-local" code nil nil [19863 19917])
            ("enable-local-variables" variable (:default-value t) nil [19919 21171])
            ("enable-dir-local-variables" variable (:default-value t) nil [21173 21394])
            ("local-enable-local-variables" variable (:default-value t) nil [22757 23142])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [23144 23535])
            ("or" code nil nil [23600 23663])
            ("or" code nil nil [23664 23731])
            ("or" code nil nil [23732 23799])
            ("view-read-only" variable nil nil [23801 24151])
            ("file-name-history" variable nil nil [24153 24336])
            ("put" code nil nil [24339 24393])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [24394 25000])
            ("declare-function" code nil nil [25002 25074])
            ("declare-function" code nil nil [25075 25147])
            ("convert-standard-filename" function (:arguments ("filename")) nil [25149 26402])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [26404 27525])
            ("pwd" function (:user-visible-flag t) nil [27529 27648])
            ("cd-path" variable nil nil [27650 27780])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27782 28401])
            ("cd-absolute" function (:arguments ("dir")) nil [28403 29308])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [29310 31200])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [31202 31529])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [31531 32910])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [32912 35874])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [35876 36284])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [36286 36890])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [38443 40632])
            ("user-emacs-directory-warning" variable (:default-value t) nil [40634 40836])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [40838 42652])
            ("executable-find" function (:arguments ("command")) nil [42655 42963])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [42965 43562])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [43564 45318])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [45617 46336])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [46338 47563])
            ("file-local-copy" function (:arguments ("file")) nil [47565 47954])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [47956 52847])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [52849 54252])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [54384 55501])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [55503 57094])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [57096 59333])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [59336 59949])
            ("confirm-nonexistent-file-or-buffer" function nil nil [59951 60392])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [60394 61220])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [61222 61336])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [61338 62583])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [62585 63515])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63517 64441])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [64443 64878])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [64880 65307])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65309 65690])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65692 66143])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [66145 66591])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [66593 67542])
            ("kill-buffer-hook" variable nil nil [67603 67843])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67845 70814])
            ("create-file-buffer" function (:arguments ("filename")) nil [70939 71619])
            ("generate-new-buffer" function (:arguments ("name")) nil [71621 71826])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [71828 71980])
            ("make-obsolete-variable" code nil nil [71981 72058])
            ("abbreviated-home-dir" variable nil nil [72060 72167])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [72169 74520])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [74522 76449])
            ("find-file-wildcards" variable (:default-value t) nil [76452 76699])
            ("find-file-suppress-same-file-warnings" variable nil nil [76701 77027])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [77029 77308])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [77310 77797])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [77799 84785])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [84787 87281])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [87284 88236])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [88238 88935])
            ("insert-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [88937 89358])
            ("put" code nil nil [89359 89437])
            ("find-file-literally" variable nil nil [89439 89646])
            ("put" code nil nil [89647 89692])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [89694 90788])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [90791 94131])
            ("report-errors" function (:arguments ("format" "body")) nil [94133 94613])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [94615 96224])
            ("auto-mode-case-fold" variable (:default-value t) nil [96226 96664])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ck]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[]>:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gnokiirc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [96666 108054])
            ("put" code nil nil [108055 108101])
            ("conf-mode-maybe" function nil nil [108103 108353])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [108355 109729])
            ("define-obsolete-variable-alias" code nil nil [109731 109844])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [110043 110903])
            ("define-obsolete-variable-alias" code nil nil [110905 111015])
            ("inhibit-local-variables-suffixes" variable nil nil [111017 111293])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [111365 111471])
            ("inhibit-local-variables-p" function nil nil [111473 112283])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [112285 112803])
            ("magic-mode-alist" variable nil nil [112805 113339])
            ("put" code nil nil [113340 113387])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [113389 114930])
            ("put" code nil nil [114931 114987])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [114989 115131])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [115133 121561])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [121814 122221])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [122223 122489])
            ("set-auto-mode-1" function nil nil [122491 123996])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [124034 124240])
            ("put" code nil nil [124241 124295])
            ("hack-local-variables-hook" variable nil nil [124297 124530])
            ("safe-local-variable-values" variable nil nil [124532 124792])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [124794 125456])
            ("mapc" code nil nil [125484 126101])
            ("dolist" code nil nil [126743 127431])
            ("put" code nil nil [127433 127547])
            ("put" code nil nil [127549 127595])
            ("file-local-variables-alist" variable nil nil [127597 127952])
            ("make-variable-buffer-local" code nil nil [127953 128009])
            ("put" code nil nil [128010 128062])
            ("dir-local-variables-alist" variable nil nil [128064 128446])
            ("make-variable-buffer-local" code nil nil [128447 128502])
            ("before-hack-local-variables-hook" variable nil nil [128504 128922])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [128924 131794])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [131796 131883])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [131885 134339])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [134341 136827])
            ("hack-local-variables--warned-lexical" variable nil nil [136888 136937])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [136939 142855])
            ("hack-local-variables-apply" function nil nil [142857 143658])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [143660 144348])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [144350 145253])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [145255 145359])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [145361 145549])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [145551 147371])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [147373 147750])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [147752 148665])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [148731 148846])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [148848 149424])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [149426 149559])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [149561 150206])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [150208 152219])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [152221 152985])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [152987 154450])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [154452 154634])
            ("dir-locals-find-file" function (:arguments ("file")) nil [154636 157700])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [157702 158545])
            ("enable-remote-dir-locals" variable nil nil [158547 158713])
            ("hack-dir-local-variables--warned-coding" variable nil nil [158715 158767])
            ("hack-dir-local-variables" function nil nil [158769 160427])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [160429 160735])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [160739 161176])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [161178 166155])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [166157 168182])
            ("file-extended-attributes" function (:arguments ("filename")) nil [168185 168499])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [168501 168930])
            ("backup-buffer" function nil nil [168933 172958])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [172960 174230])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [174232 174525])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [174527 175226])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [175228 177095])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [177097 177792])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [177794 178611])
            ("file-name-base" function (:arguments ("filename")) nil [178613 178857])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [178859 179607])
            ("backup-directory-alist" variable nil nil [179609 180646])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [180648 181940])
            ("make-backup-file-name" function (:arguments ("file")) nil [181942 182255])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [182257 183007])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [183009 185116])
            ("backup-file-name-p" function (:arguments ("file")) nil [185118 185379])
            ("backup-extract-version-start" variable nil nil [185381 185418])
            ("backup-extract-version" function (:arguments ("fn")) nil [185593 186045])
            ("find-backup-file-name" function (:arguments ("fn")) nil [186047 188186])
            ("file-nlinks" function (:arguments ("filename")) nil [188188 188305])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [190281 193182])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193185 195587])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [195589 196160])
            ("auto-save-hook" variable nil nil [196162 196234])
            ("before-save-hook" variable nil nil [196236 196406])
            ("after-save-hook" variable nil nil [196408 196599])
            ("save-buffer-coding-system" variable nil nil [196601 196973])
            ("make-variable-buffer-local" code nil nil [196975 197030])
            ("put" code nil nil [197031 197082])
            ("basic-save-buffer" function (:user-visible-flag t) nil [197084 201251])
            ("basic-save-buffer-1" function nil nil [201533 201836])
            ("basic-save-buffer-2" function nil nil [201925 206549])
            ("declare-function" code nil nil [206551 206637])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [206639 207805])
            ("put" code nil nil [207806 207867])
            ("buffer-save-without-query" variable nil nil [207869 207985])
            ("make-variable-buffer-local" code nil nil [207986 208041])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [208043 211501])
            ("clear-visited-file-modtime" function nil nil [211504 211695])
            ("not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [211697 212148])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [212150 212436])
            ("insert-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [212438 212834])
            ("put" code nil nil [212835 212893])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [212895 213506])
            ("file-newest-backup" function (:arguments ("filename")) nil [213508 214431])
            ("rename-uniquely" function (:user-visible-flag t) nil [214433 215449])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [215451 217023])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [217025 217171])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [217173 219634])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [219636 220196])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [220198 221136])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [221138 224325])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [224373 224935])
            ("put" code nil nil [224939 224987])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [224988 225440])
            ("put" code nil nil [225442 225511])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [225512 225984])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [225986 226498])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [226500 227415])
            ("before-revert-hook" variable nil nil [227417 227620])
            ("after-revert-hook" variable nil nil [227622 227977])
            ("revert-buffer-in-progress-p" variable nil nil [227979 228093])
            ("revert-buffer-internal-hook" variable nil nil [228095 228131])
            ("revert-buffer-preserve-modes" variable nil nil [228321 228358])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [228360 230572])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [230574 233929])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [233931 236131])
            ("recover-this-file" function (:user-visible-flag t) nil [236133 236284])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [236286 238369])
            ("recover-session" function (:user-visible-flag t) nil [238371 239964])
            ("recover-session-finish" function (:user-visible-flag t) nil [239966 242369])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [242371 242622])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [242624 243227])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [243229 243757])
            ("rename-auto-save-file" function nil nil [243761 244325])
            ("make-auto-save-file-name" function nil nil [244327 248556])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [248558 248786])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [248789 250972])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [250975 251136])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [251138 251304])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [251306 253027])
            ("files" package nil nil [253101 253137])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [253139 254485])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [254487 256319])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [256322 256449])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [256451 256988])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [256990 257177])
            ("get-free-disk-space" function (:arguments ("dir")) nil [257179 258930])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [259002 261391])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [261393 261438])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [262512 272643])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [272645 273211])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [273213 273697])
            ("kill-emacs-query-functions" variable nil nil [273699 274005])
            ("confirm-kill-emacs" variable nil nil [274007 274447])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274449 276096])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [276098 276586])
            ("setq" code nil nil [276696 276817])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [277018 279651])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [279694 280161])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [280163 281012])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [281014 282168])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [282170 283237])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [283239 284304])
            ("define-obsolete-variable-alias" code nil nil [284306 284388])
            ("trash-directory" variable nil nil [284412 284815])
            ("trash--hexify-table" variable nil nil [284817 284845])
            ("declare-function" code nil nil [284847 284913])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [284915 290335])
            ("define-key" code nil nil [290339 290379])
            ("define-key" code nil nil [290380 290430])
            ("define-key" code nil nil [290431 290481])
            ("define-key" code nil nil [290482 290524])
            ("define-key" code nil nil [290525 290570])
            ("define-key" code nil nil [290571 290612])
            ("define-key" code nil nil [290613 290652])
            ("define-key" code nil nil [290653 290691])
            ("define-key" code nil nil [290692 290737])
            ("define-key" code nil nil [290738 290795])
            ("define-key" code nil nil [290796 290841])
            ("define-key" code nil nil [290843 290895])
            ("define-key" code nil nil [290896 290958])
            ("define-key" code nil nil [290959 291014])
            ("define-key" code nil nil [291015 291074])
            ("define-key" code nil nil [291075 291122])
            ("define-key" code nil nil [291124 291182])
            ("define-key" code nil nil [291183 291234])
            ("define-key" code nil nil [291235 291289])
            ("define-key" code nil nil [291290 291351])
            ("define-key" code nil nil [291352 291411]))          
      :file "files.el.gz"
      :pointmax 291436
      :fsize 84308
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "frame.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [948 965])
            ("frame-creation-function-alist" variable (:default-value (list (cons nil (if (fboundp (quote tty-create-frame-with-faces)) (quote tty-create-frame-with-faces) (lambda (_parameters) (error "Can't create multiple frames without a window system")))))) nil [968 1450])
            ("window-system-default-frame-alist" variable nil nil [1452 1895])
            ("display-format-alist" variable nil nil [1897 2149])
            ("initial-frame-alist" variable nil nil [2341 3571])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [3573 4275])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4277 4746])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [4748 5044])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5046 5306])
            ("frame-initial-frame" variable nil nil [6084 6116])
            ("frame-initial-frame-alist" variable nil nil [6195 6229])
            ("frame-initial-geometry-arguments" variable nil nil [6231 6276])
            ("frame-initialize" function nil nil [6465 8178])
            ("frame-notice-user-settings" variable (:default-value t) nil [8180 8289])
            ("declare-function" code nil nil [8291 8350])
            ("defalias" code nil nil [8352 8402])
            ("frame-notice-user-settings" function nil nil [8599 19900])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [19902 20103])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20170 21345])
            ("get-other-frame" function nil nil [21347 21605])
            ("next-multiframe-window" function (:user-visible-flag t) nil [21607 21865])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [21867 22131])
            ("window-system-for-display" function (:arguments ("display")) nil [22133 22608])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [22610 22879])
            ("declare-function" code nil nil [22881 22938])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [22940 24292])
            ("make-frame-command" function (:user-visible-flag t) nil [24294 24557])
            ("before-make-frame-hook" variable nil nil [24559 24642])
            ("after-make-frame-functions" variable nil nil [24644 24791])
            ("after-setting-font-hook" variable nil nil [24793 24889])
            ("define-obsolete-function-alias" code nil nil [24919 24981])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [24983 25101])
            ("x-display-name" variable nil nil [25103 25126])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25128 28771])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [28773 29072])
            ("minibuffer-frame-list" function nil nil [29074 29267])
            ("get-device-terminal" function (:arguments ("device")) nil [29319 30072])
            ("frames-on-display-list" function (:arguments ("device")) nil [30074 30516])
            ("framep-on-display" function (:arguments ("terminal")) nil [30518 30957])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [30959 31820])
            ("declare-function" code nil nil [31822 31872])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [31874 32984])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32986 33965])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [33967 34197])
            ("suspend-frame" function (:user-visible-flag t) nil [34199 34676])
            ("make-frame-names-alist" function nil nil [34678 35084])
            ("frame-name-history" variable nil nil [35086 35117])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [35118 35809])
            ("frame-background-mode" variable nil nil [35836 36509])
            ("declare-function" code nil nil [36511 36605])
            ("declare-function" code nil nil [36650 36720])
            ("inhibit-frame-set-background-mode" variable nil nil [36722 36768])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [36770 39668])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [39670 40186])
            ("current-frame-configuration" function nil nil [40217 40813])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [40815 42820])
            ("frame-height" function (:arguments ("frame")) nil [42915 43581])
            ("frame-width" function (:arguments ("frame")) nil [43583 43788])
            ("declare-function" code nil nil [43790 43895])
            ("define-obsolete-function-alias" code nil nil [43897 43970])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [43972 47288])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [47290 47541])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47543 48288])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [48290 49035])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49037 49523])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49525 49991])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49993 50375])
            ("define-minor-mode" code nil nil [50377 51257])
            ("define-minor-mode" code nil nil [51259 52100])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [52102 52478])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [52480 53007])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [53009 53699])
            ("declare-function" code nil nil [53737 53780])
            ("display-mouse-p" function (:arguments ("display")) nil [53782 54573])
            ("display-popup-menus-p" function (:arguments ("display")) nil [54575 54861])
            ("display-graphic-p" function (:arguments ("display")) nil [54863 55320])
            ("display-images-p" function (:arguments ("display")) nil [55322 55600])
            ("defalias" code nil nil [55602 55654])
            ("defalias" code nil nil [55655 55706])
            ("display-selections-p" function (:arguments ("display")) nil [55708 56339])
            ("declare-function" code nil nil [56341 56407])
            ("display-screens" function (:arguments ("display")) nil [56409 56798])
            ("declare-function" code nil nil [56800 56871])
            ("display-pixel-height" function (:arguments ("display")) nil [56873 57606])
            ("declare-function" code nil nil [57608 57678])
            ("display-pixel-width" function (:arguments ("display")) nil [57680 58408])
            ("display-mm-dimensions-alist" variable nil nil [58410 59028])
            ("declare-function" code nil nil [59030 59098])
            ("display-mm-height" function (:arguments ("display")) nil [59100 59979])
            ("declare-function" code nil nil [59981 60048])
            ("display-mm-width" function (:arguments ("display")) nil [60050 60925])
            ("declare-function" code nil nil [60927 60999])
            ("display-backing-store" function (:arguments ("display")) nil [61104 61622])
            ("declare-function" code nil nil [61624 61693])
            ("display-save-under" function (:arguments ("display")) nil [61695 62092])
            ("declare-function" code nil nil [62094 62159])
            ("display-planes" function (:arguments ("display")) nil [62161 62602])
            ("declare-function" code nil nil [62604 62674])
            ("display-color-cells" function (:arguments ("display")) nil [62676 63121])
            ("declare-function" code nil nil [63123 63194])
            ("display-visual-class" function (:arguments ("display")) nil [63196 63786])
            ("declare-function" code nil nil [63788 63874])
            ("declare-function" code nil nil [63875 63964])
            ("declare-function" code nil nil [63965 64053])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [64055 66580])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [66612 68482])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [68484 69743])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [69747 70799])
            ("define-obsolete-variable-alias" code nil nil [70844 70930])
            ("cursor" customgroup (:user-visible-flag t) nil [70954 71039])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [71041 71169])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [71171 71289])
            ("blink-cursor-blinks" variable (:default-value 10) nil [71291 71501])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [71503 71616])
            ("blink-cursor-idle-timer" variable nil nil [71618 71793])
            ("blink-cursor-timer" variable nil nil [71795 71957])
            ("blink-cursor-start" function nil nil [71959 72658])
            ("blink-cursor-timer-function" function nil nil [72660 73316])
            ("blink-cursor-end" function nil nil [73319 73714])
            ("blink-cursor-suspend" function nil nil [73716 74071])
            ("blink-cursor-check" function nil nil [74073 74558])
            ("define-obsolete-variable-alias" code nil nil [74560 74632])
            ("define-minor-mode" code nil nil [74634 75901])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [75939 76893])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [76895 77859])
            ("define-key" code nil nil [77882 77930])
            ("define-key" code nil nil [77931 77980])
            ("define-key" code nil nil [77981 78023])
            ("define-key" code nil nil [78024 78065])
            ("define-key" code nil nil [78066 78120])
            ("define-key" code nil nil [78121 78181])
            ("define-key" code nil nil [78182 78242])
            ("define-obsolete-variable-alias" code nil nil [78292 78374])
            ("make-variable-buffer-local" code nil nil [78376 78430])
            ("make-obsolete-variable" code nil nil [78457 78551])
            ("frame" package nil nil [78553 78569]))          
      :file "frame.el.gz"
      :pointmax 78594
      :fsize 20427
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 965 . 966) (symbol 930 . 947) (open-paren 929 . 930)))
    (semanticdb-table "case-table.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("describe-buffer-case-table" function (:user-visible-flag t) nil [1238 2284])
            ("case-table-get-table" function (:arguments ("case-table" "table")) nil [2286 2982])
            ("get-upcase-table" function (:arguments ("case-table")) nil [2984 3104])
            ("make-obsolete" code nil nil [3105 3167])
            ("copy-case-table" function (:arguments ("case-table")) nil [3169 3584])
            ("set-case-syntax-delims" function (:arguments ("l" "r" "table")) nil [3586 4420])
            ("set-case-syntax-pair" function (:arguments ("uc" "lc" "table")) nil [4422 5200])
            ("set-upcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5202 5803])
            ("set-downcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5805 6410])
            ("set-case-syntax" function (:arguments ("c" "syntax" "table")) nil [6412 7060])
            ("case-table" package nil nil [7062 7083]))          
      :file "case-table.el.gz"
      :pointmax 7113
      :fsize 2027
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "indent.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("indent" customgroup (:user-visible-flag t) nil [1004 1069])
            ("standard-indent" variable (:default-value 4) nil [1071 1205])
            ("indent-line-function" variable (:default-value (quote indent-relative)) nil [1207 1593])
            ("tab-always-indent" variable (:default-value t) nil [1595 2350])
            ("indent-according-to-mode" function (:user-visible-flag t) nil [2353 3439])
            ("indent-for-tab-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3441 5866])
            ("insert-tab" function (:arguments ("arg")) nil [5868 6160])
            ("indent-rigidly--current-indentation" function (:arguments ("beg" "end")) nil [6162 6647])
            ("indent-rigidly-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [left] (quote indent-rigidly-left)) (define-key map [right] (quote indent-rigidly-right)) (define-key map [S-left] (quote indent-rigidly-left-to-tab-stop)) (define-key map [S-right] (quote indent-rigidly-right-to-tab-stop)) map)) nil [6649 7072])
            ("indent-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg" "interactive"))
                nil [7074 8937])
            ("indent-rigidly--pop-undo" function nil nil [8939 9226])
            ("indent-rigidly-left" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [9228 9476])
            ("indent-rigidly-right" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [9478 9728])
            ("indent-rigidly-left-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [9730 10128])
            ("indent-rigidly-right-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10130 10526])
            ("indent-line-to" function (:arguments ("column")) nil [10528 11160])
            ("current-left-margin" function nil nil [11162 11566])
            ("move-to-left-margin" function
               (:user-visible-flag t
                :arguments ("n" "force"))
                nil [11568 12483])
            ("indent-to-left-margin" function nil nil [12583 12894])
            ("delete-to-left-margin" function (:arguments ("from" "to")) nil [12896 13460])
            ("set-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [13462 14337])
            ("set-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [14339 14898])
            ("alter-text-property" function (:arguments ("from" "to" "prop" "func" "object")) nil [14900 15568])
            ("increase-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [15570 16404])
            ("decrease-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [16406 16887])
            ("increase-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [16889 17542])
            ("decrease-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [17544 18075])
            ("beginning-of-line-text" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18077 19091])
            ("indent-region-function" variable nil nil [19093 19275])
            ("indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "column"))
                nil [19277 21679])
            ("indent-relative-maybe" function (:user-visible-flag t) nil [21681 21944])
            ("indent-relative" function
               (:user-visible-flag t
                :arguments ("unindented-ok"))
                nil [21946 23309])
            ("tab-stop-list" variable nil nil [23311 23871])
            ("edit-tab-stops-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote edit-tab-stops-note-changes)) (define-key map "" (quote edit-tab-stops-note-changes)) map)) nil [23873 24104])
            ("edit-tab-stops-buffer" variable nil nil [24106 24255])
            ("edit-tab-stops" function (:user-visible-flag t) nil [24257 25280])
            ("edit-tab-stops-note-changes" function (:user-visible-flag t) nil [25282 25682])
            ("indent-next-tab-stop" function (:arguments ("column" "prev")) nil [25684 26683])
            ("indent-accumulate-tab-stops" function (:arguments ("limit")) nil [26685 26925])
            ("tab-to-tab-stop" function (:user-visible-flag t) nil [26927 27356])
            ("move-to-tab-stop" function (:user-visible-flag t) nil [27358 28218])
            ("define-key" code nil nil [28220 28272])
            ("define-key" code nil nil [28273 28316])
            ("define-key" code nil nil [28317 28360])
            ("define-key" code nil nil [28361 28402]))          
      :file "indent.el.gz"
      :pointmax 28428
      :fsize 7906
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "fringe.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("fringe" customgroup (:user-visible-flag t) nil [1332 1408])
            ("when" code nil nil [1476 2767])
            ("fringe-bitmap-p" function (:arguments ("symbol")) nil [2770 2879])
            ("fringe-mode" variable nil nil [2914 2934])
            ("fringe-mode-explicit" variable nil nil [2936 3089])
            ("set-fringe-mode-1" function (:arguments ("_ignore" "value")) nil [3091 3316])
            ("set-fringe-mode" function (:arguments ("value")) nil [3318 3782])
            ("fringe--check-style" function (:arguments ("style")) nil [3784 4038])
            ("fringe-mode-initialize" function (:arguments ("symbol" "value")) nil [4145 4823])
            ("fringe-styles" variable
               (:constant-flag t
                :default-value (quote (("default") ("no-fringes" . 0) ("right-only" 0) ("left-only" nil . 0) ("half-width" 4 . 4) ("minimal" 1 . 1))))
                nil [4825 5462])
            ("fringe-mode" variable nil nil [5464 7117])
            ("setq" code nil nil [7214 7243])
            ("fringe-query-style" function (:arguments ("all-frames")) nil [7245 8064])
            ("fringe-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [8066 9228])
            ("set-fringe-style" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [9230 10461])
            ("fringe-columns" function (:arguments ("side" "real")) nil [10463 10887])
            ("fringe" package nil nil [10889 10906]))          
      :file "fringe.el.gz"
      :pointmax 10932
      :fsize 3557
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "simple.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1051 1068])
            ("declare-function" code nil nil [1071 1133])
            ("declare-function" code nil nil [1134 1174])
            ("compilation-current-error" variable nil nil [1196 1230])
            ("compilation-context-lines" variable nil nil [1231 1265])
            ("idle-update-delay" variable (:default-value 0.5) nil [1267 1564])
            ("killing" customgroup (:user-visible-flag t) nil [1566 1640])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1642 1744])
            ("next-error" customgroup (:user-visible-flag t) nil [1781 1882])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1884 2015])
            ("next-error-highlight" variable (:default-value 0.5) nil [2017 2772])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2774 3467])
            ("next-error-recenter" variable nil nil [3469 3831])
            ("next-error-hook" variable nil nil [3833 3974])
            ("next-error-highlight-timer" variable nil nil [3976 4015])
            ("next-error-overlay-arrow-position" variable nil nil [4017 4063])
            ("put" code nil nil [4064 4142])
            ("add-to-list" code nil nil [4143 4220])
            ("next-error-last-buffer" variable nil nil [4222 4449])
            ("next-error-function" variable nil nil [4451 4909])
            ("make-variable-buffer-local" code nil nil [4910 4959])
            ("next-error-move-function" variable nil nil [4961 5274])
            ("make-variable-buffer-local" code nil nil [5275 5329])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5331 6374])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6376 8658])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8660 10429])
            ("next-error-internal" function nil nil [10431 10852])
            ("defalias" code nil nil [10854 10893])
            ("defalias" code nil nil [10894 10928])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10930 11247])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11249 11517])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11519 11971])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11973 12351])
            ("next-error-follow-last-line" variable nil nil [12422 12462])
            ("define-minor-mode" code nil nil [12464 13172])
            ("next-error-follow-mode-post-command-hook" function nil nil [13288 13621])
            ("fundamental-mode" function (:user-visible-flag t) nil [13630 13839])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13917 14401])
            ("put" code nil nil [14403 14443])
            ("define-derived-mode" code nil nil [14444 14589])
            ("self-insert-uses-region-functions" variable nil nil [14622 14995])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [14997 15130])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [15132 18256])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [18258 18606])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18608 19320])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19322 20123])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20125 20838])
            ("defalias" code nil nil [20840 20882])
            ("delete-blank-lines" function (:user-visible-flag t) nil [20901 22328])
            ("delete-trailing-lines" variable (:default-value t) nil [22330 22616])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22618 24424])
            ("newline-and-indent" function (:user-visible-flag t) nil [24426 24859])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [24861 26087])
            ("read-quoted-char-radix" variable (:default-value 8) nil [26089 26310])
            ("read-quoted-char" function (:arguments ("prompt")) nil [26312 28852])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28854 30883])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30885 31078])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31080 31279])
            ("back-to-indentation" function (:user-visible-flag t) nil [31281 31571])
            ("fixup-whitespace" function (:user-visible-flag t) nil [31573 31912])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [31914 32352])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [32354 32603])
            ("cycle-spacing--context" variable nil nil [32605 32842])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "single-shot"))
                nil [32844 34999])
            ("beginning-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35002 35903])
            ("put" code nil nil [35904 35994])
            ("end-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35996 37221])
            ("put" code nil nil [37222 37301])
            ("delete-active-region" variable (:default-value t) nil [37303 37840])
            ("region-extract-function" variable (:default-value (lambda (delete) (when (region-beginning) (if (eq delete (quote delete-only)) (delete-region (region-beginning) (region-end)) (filter-buffer-substring (region-beginning) (region-end) delete))))) nil [37842 38385])
            ("delete-backward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [38387 39806])
            ("put" code nil nil [39807 39865])
            ("delete-forward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [39867 40792])
            ("put" code nil nil [40793 40850])
            ("mark-whole-buffer" function (:user-visible-flag t) nil [40852 41256])
            ("goto-line" function
               (:user-visible-flag t
                :arguments ("line" "buffer"))
                nil [41300 43533])
            ("put" code nil nil [43534 43582])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [43584 44266])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [44268 45052])
            ("count-words--buffer-message" function nil nil [45054 45207])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [45209 45534])
            ("define-obsolete-function-alias" code nil nil [45536 45615])
            ("what-line" function (:user-visible-flag t) nil [45617 45968])
            ("count-lines" function (:arguments ("start" "end")) nil [45970 46807])
            ("line-number-at-pos" function (:arguments ("pos")) nil [46809 47269])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [47271 51608])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [51673 51988])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [51990 52513])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [52515 52972])
            ("minibuffer-completing-symbol" variable nil nil [52974 53077])
            ("make-obsolete-variable" code nil nil [53078 53148])
            ("minibuffer-default" variable nil nil [53150 53343])
            ("eval-expression-print-level" variable (:default-value 4) nil [53345 53575])
            ("eval-expression-print-length" variable (:default-value 12) nil [53577 53810])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [53812 54021])
            ("eval-expression-print-format" function (:arguments ("value")) nil [54023 54667])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [54669 54783])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [54785 55263])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value"))
                nil [55393 57667])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [57669 58596])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58598 60645])
            ("repeat-complex-command--called-interactively-skip" function (:arguments ("i" "_frame1" "frame2")) nil [60647 60864])
            ("extended-command-history" variable nil nil [60866 60903])
            ("read-extended-command" function nil nil [60905 62429])
            ("suggest-key-bindings" variable (:default-value t) nil [62431 62797])
            ("execute-extended-command" function
               (:user-visible-flag t
                :arguments ("prefixarg" "command-name"))
                nil [62799 65269])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [65271 67656])
            ("minibuffer-history" variable nil nil [67659 67912])
            ("minibuffer-history-sexp-flag" variable nil nil [67913 68228])
            ("setq" code nil nil [68229 68283])
            ("setq" code nil nil [68284 68322])
            ("minibuffer-history-search-history" variable nil nil [68348 68394])
            ("minibuffer-text-before-history" variable nil nil [68396 68596])
            ("add-hook" code nil nil [68598 68662])
            ("minibuffer-history-initialize" function nil nil [68664 68748])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [68750 68912])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [68914 69304])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [69306 72150])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [72152 73206])
            ("minibuffer-temporary-goal-position" variable nil nil [73208 73255])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [73257 73897])
            ("minibuffer-default-add-done" variable nil nil [73899 74222])
            ("make-variable-buffer-local" code nil nil [74224 74281])
            ("minibuffer-default-add-completions" function nil nil [74283 74737])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [74739 76931])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [76933 77184])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [77186 77444])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [77446 78102])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [78104 78389])
            ("minibuffer-prompt-width" function nil nil [78448 78737])
            ("add-hook" code nil nil [78770 78837])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [78839 78890])
            ("make-variable-buffer-local" code nil nil [78891 78963])
            ("minibuffer-history-isearch-setup" function nil nil [78965 79605])
            ("minibuffer-history-isearch-end" function nil nil [79607 79837])
            ("minibuffer-history-isearch-search" function nil nil [79839 81744])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [81746 83143])
            ("minibuffer-history-isearch-wrap" function nil nil [83145 83762])
            ("minibuffer-history-isearch-push-state" function nil nil [83764 84095])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [84097 84309])
            ("define-obsolete-function-alias" code nil nil [84387 84449])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [84451 84694])
            ("undo-in-region" variable nil nil [84696 84800])
            ("undo-no-redo" variable nil nil [84802 84877])
            ("pending-undo-list" variable nil nil [84879 85030])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85032 89653])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [89655 89936])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [89938 90200])
            ("undo-in-progress" variable nil nil [90202 90333])
            ("undo-more" function (:arguments ("n")) nil [90335 91030])
            ("primitive-undo" function (:arguments ("n" "list")) nil [91032 97432])
            ("undo-copy-list" function (:arguments ("list")) nil [97457 97555])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [97557 97666])
            ("undo-start" function (:arguments ("beg" "end")) nil [97668 98256])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [98258 101835])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [101837 102876])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [102878 103386])
            ("undo-delta" function (:arguments ("undo-elt")) nil [103557 103890])
            ("undo-ask-before-discard" variable nil nil [103892 104658])
            ("undo-extra-outer-limit" variable nil nil [104660 104936])
            ("make-variable-buffer-local" code nil nil [104937 104989])
            ("setq" code nil nil [105274 105333])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [105334 107023])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "암호" "パスワード" "ପ୍ରବେଶ ସଙ୍କେତ" "ពាក្យសម្ងាត់" "adgangskode" "contraseña" "contrasenya" "geslo" "hasło" "heslo" "iphasiwedi" "jelszó" "lösenord" "lozinka" "mật khẩu" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slaptažodis" "wachtwoord" "كلمة السر" "ססמה" "лозинка" "пароль" "गुप्तशब्द" "शब्दकूट" "પાસવર્ડ" "సంకేతపదము" "ਪਾਸਵਰਡ" "ಗುಪ್ತಪದ" "கடவுச்சொல்" "അടയാളവാക്ക്" "গুপ্তশব্দ" "পাসওয়ার্ড" "රහස්පදය" "密码" "密碼"))) nil [107026 108415])
            ("shell-command-history" variable nil nil [108417 108607])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [108609 108723])
            ("shell-command-default-error-buffer" variable nil nil [108725 109040])
            ("declare-function" code nil nil [109042 109108])
            ("declare-function" code nil nil [109109 109195])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [109197 109901])
            ("declare-function" code nil nil [109903 109954])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [109956 110201])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [110203 110832])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [110834 112087])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [112089 113394])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [113396 121358])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "not-this-window" "frame")) nil [121360 123783])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [123879 124090])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer"))
                nil [124092 131348])
            ("shell-command-to-string" function (:arguments ("command")) nil [131350 131610])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [131612 133062])
            ("process-file-side-effects" variable (:default-value t) nil [133064 133490])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [133492 134377])
            ("tabulated-list-format" variable nil nil [134399 134429])
            ("tabulated-list-entries" variable nil nil [134430 134461])
            ("tabulated-list-sort-key" variable nil nil [134462 134494])
            ("declare-function" code nil nil [134495 134561])
            ("declare-function" code nil nil [134562 134661])
            ("process-menu-query-only" variable nil nil [134663 134699])
            ("define-derived-mode" code nil nil [134701 135197])
            ("list-processes--refresh" function nil nil [135199 136827])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [136829 136926])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [136928 137891])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [137894 139510])
            ("universal-argument--mode" function nil nil [139512 139592])
            ("universal-argument" function (:user-visible-flag t) nil [139594 140303])
            ("universal-argument-more" function (:arguments ("arg")) nil [140305 140743])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [140745 141085])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [141087 141821])
            ("filter-buffer-substring-functions" variable nil nil [141825 141942])
            ("make-obsolete-variable" code nil nil [141943 142067])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [142069 142475])
            ("buffer-substring-filters" variable nil nil [142477 142958])
            ("make-obsolete-variable" code nil nil [142959 143074])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [143076 143932])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [143934 144763])
            ("interprogram-cut-function" variable nil nil [144807 145344])
            ("interprogram-paste-function" variable nil nil [145346 146767])
            ("kill-ring" variable nil nil [146808 147263])
            ("kill-ring-max" variable (:default-value 60) nil [147265 147400])
            ("kill-ring-yank-pointer" variable nil nil [147402 147503])
            ("save-interprogram-paste-before-kill" variable nil nil [147505 148007])
            ("kill-do-not-save-duplicates" variable nil nil [148009 148238])
            ("kill-new" function (:arguments ("string" "replace")) nil [148240 150266])
            ("kill-append" function (:arguments ("string" "before-p")) nil [150268 150682])
            ("yank-pop-change-selection" variable nil nil [150684 151032])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [151034 152692])
            ("kill-read-only-ok" variable nil nil [152743 152879])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [152881 155604])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [155798 156698])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [156700 157756])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [157758 159334])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [159336 160156])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [160172 160997])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [161070 161533])
            ("yank-window-start" variable nil nil [161535 161565])
            ("yank-undo-function" variable nil nil [161566 161897])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [161899 163629])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163631 165078])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165080 165270])
            ("kill-forward-chars" function (:arguments ("arg")) nil [165335 165480])
            ("kill-backward-chars" function (:arguments ("arg")) nil [165529 165675])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [165677 166152])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [166154 167506])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [167508 168125])
            ("kill-whole-line" variable nil nil [168162 168307])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [168309 170525])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170527 172156])
            ("forward-visible-line" function (:arguments ("arg")) nil [172158 174648])
            ("end-of-visible-line" function nil nil [174650 175416])
            ("insert-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [175419 176044])
            ("put" code nil nil [176045 176108])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [176110 177010])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [177012 177554])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [177556 178125])
            ("define-error" code nil nil [178128 178197])
            ("activate-mark-hook" variable nil nil [178199 178388])
            ("deactivate-mark-hook" variable nil nil [178390 178468])
            ("mark" function (:arguments ("force")) nil [178470 179094])
            ("declare-function" code nil nil [179128 179227])
            ("declare-function" code nil nil [179228 179328])
            ("deactivate-mark" function (:arguments ("force")) nil [179330 181248])
            ("activate-mark" function (:arguments ("no-tmm")) nil [181250 181635])
            ("set-mark" function (:arguments ("pos")) nil [181637 182861])
            ("use-empty-active-region" variable nil nil [182863 183359])
            ("use-region-p" function nil nil [183361 183967])
            ("region-active-p" function nil nil [183969 184630])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [184633 184739])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [184741 185612])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [185614 186294])
            ("redisplay--update-region-highlights" function (:arguments ("windows")) nil [186296 187031])
            ("add-function" code nil nil [187033 187130])
            ("defvar-local" code nil nil [187133 187232])
            ("put" code nil nil [187233 187268])
            ("mark-ring-max" variable (:default-value 16) nil [187270 187415])
            ("global-mark-ring" variable nil nil [187417 187501])
            ("global-mark-ring-max" variable (:default-value 16) nil [187503 187664])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [187666 187974])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [187976 188387])
            ("set-mark-command-repeat-pop" variable nil nil [188389 188848])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [188850 191192])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [191194 192748])
            ("pop-mark" function nil nil [192750 193169])
            ("define-obsolete-function-alias" code nil nil [193171 193260])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193261 194145])
            ("shift-select-mode" variable (:default-value t) nil [194147 194719])
            ("handle-shift-selection" function nil nil [194721 195890])
            ("define-minor-mode" code nil nil [195892 197235])
            ("widen-automatically" variable (:default-value t) nil [197237 197571])
            ("non-essential" variable nil nil [197573 197971])
            ("pop-global-mark" function (:user-visible-flag t) nil [197973 198788])
            ("next-line-add-newlines" variable nil nil [198791 198965])
            ("next-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [198967 201223])
            ("put" code nil nil [201224 201272])
            ("previous-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [201274 203008])
            ("put" code nil nil [203009 203105])
            ("track-eol" variable nil nil [203107 203445])
            ("goal-column" variable nil nil [203447 203714])
            ("make-variable-buffer-local" code nil nil [203715 203756])
            ("temporary-goal-column" variable nil nil [203758 204275])
            ("line-move-ignore-invisible" variable (:default-value t) nil [204277 204935])
            ("line-move-visual" variable (:default-value t) nil [204937 205513])
            ("declare-function" code nil nil [205550 205610])
            ("default-font-height" function nil nil [205612 206129])
            ("default-line-height" function nil nil [206131 206593])
            ("window-screen-lines" function nil nil [206595 207165])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [207212 210985])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [211309 213286])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [213434 216024])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [216178 220851])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [220853 223991])
            ("line-move-to-column" function (:arguments ("col")) nil [223993 225372])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [225374 226729])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [226731 228263])
            ("put" code nil nil [228393 228427])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [228429 229430])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [229498 230062])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [230064 230655])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [230657 232072])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [232074 232443])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [232445 232824])
            ("visual-line" customgroup (:user-visible-flag t) nil [232826 232927])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [232929 233417])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [233419 234606])
            ("visual-line--saved-state" variable nil nil [234608 234645])
            ("define-minor-mode" code nil nil [234647 236288])
            ("turn-on-visual-line-mode" function nil nil [236290 236348])
            ("define-globalized-minor-mode" code nil nil [236350 236448])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236452 236886])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236888 237332])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [237334 238805])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [238807 239414])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [239565 240763])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [240765 241769])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [241772 242024])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [242026 242778])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242780 242992])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242994 243185])
            ("current-word" function (:arguments ("strict" "really-word")) nil [243187 244667])
            ("fill-prefix" variable nil nil [244670 244836])
            ("make-variable-buffer-local" code nil nil [244837 244878])
            ("put" code nil nil [244879 244936])
            ("auto-fill-inhibit-regexp" variable nil nil [244938 245104])
            ("do-auto-fill" function nil nil [245106 248406])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [248408 248734])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [248736 249843])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [249845 250001])
            ("put" code nil nil [250003 250065])
            ("put" code nil nil [250239 250291])
            ("define-minor-mode" code nil nil [250293 251038])
            ("auto-fill-function" function nil nil [251105 251212])
            ("turn-on-auto-fill" function nil nil [251214 251307])
            ("turn-off-auto-fill" function nil nil [251309 251405])
            ("custom-add-option" code nil nil [251407 251461])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [251463 252301])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [252304 253094])
            ("defvaralias" code nil nil [253096 253154])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [253156 253936])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [253938 254482])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [254484 254601])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [254602 254729])
            ("define-minor-mode" code nil nil [254731 255464])
            ("define-minor-mode" code nil nil [255466 256394])
            ("define-minor-mode" code nil nil [256396 256872])
            ("define-minor-mode" code nil nil [256874 257178])
            ("define-minor-mode" code nil nil [257180 257488])
            ("define-minor-mode" code nil nil [257490 258486])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [258489 258620])
            ("blink-matching-paren" variable (:default-value t) nil [258622 258956])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [258958 259357])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [259359 259684])
            ("blink-matching-delay" variable (:default-value 1) nil [259686 259822])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [259824 260092])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [260094 261079])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [261081 261447])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [261449 261659])
            ("blink-matching-open" function (:user-visible-flag t) nil [261661 266088])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [266090 266279])
            ("blink-paren-post-self-insert-function" function nil nil [266281 266808])
            ("put" code nil nil [266810 266868])
            ("add-hook" code nil nil [266870 267249])
            ("keyboard-quit" function (:user-visible-flag t) nil [267427 268075])
            ("buffer-quit-function" variable nil nil [268077 268327])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [268329 269155])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [269157 269552])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [269556 270073])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [270075 271619])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [271621 271946])
            ("rfc822-goto-eoh" function nil nil [271948 272352])
            ("mail-encode-mml" variable nil nil [272394 272533])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [272535 275221])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [275223 275614])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [275616 276004])
            ("set-variable-value-history" variable nil nil [276008 276193])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [276195 279034])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [279089 279626])
            ("put" code nil nil [279694 279742])
            ("completion-reference-buffer" variable nil nil [279744 279973])
            ("completion-no-auto-exit" variable nil nil [279975 280156])
            ("completion-base-position" variable nil nil [280158 280528])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [280530 280829])
            ("completion-base-size" variable nil nil [280831 281286])
            ("make-obsolete-variable" code nil nil [281287 281366])
            ("delete-completion-window" function (:user-visible-flag t) nil [281368 281742])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [281744 281875])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [281877 283127])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [283129 285088])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [285172 286010])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [286012 286204])
            ("choose-completion-string-functions" variable nil nil [286206 286845])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [286847 290257])
            ("define-derived-mode" code nil nil [290259 290631])
            ("completion-list-mode-finish" function nil nil [290633 290829])
            ("add-hook" code nil nil [290831 290893])
            ("completion-show-help" variable (:default-value t) nil [290957 291108])
            ("completion-setup-function" function nil nil [291239 293254])
            ("add-hook" code nil nil [293256 293316])
            ("define-key" code nil nil [293318 293393])
            ("define-key" code nil nil [293394 293469])
            ("switch-to-completions" function (:user-visible-flag t) nil [293471 294012])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [294174 294417])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [294418 294671])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [294672 294925])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [294926 295179])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [295180 295437])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [295438 295686])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [295688 296752])
            ("define-key" code nil nil [296754 296825])
            ("define-key" code nil nil [296826 296897])
            ("define-key" code nil nil [296898 296968])
            ("define-key" code nil nil [296969 297038])
            ("define-key" code nil nil [297039 297110])
            ("define-key" code nil nil [297111 297184])
            ("mapc" code nil nil [297474 298069])
            ("clone-buffer-hook" variable nil nil [298121 298222])
            ("clone-indirect-buffer-hook" variable nil nil [298224 298343])
            ("clone-process" function (:arguments ("process" "newname")) nil [298345 299854])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [299957 302920])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [302923 304515])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [304518 305001])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [305049 306589])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [306591 307666])
            ("define-minor-mode" code nil nil [307668 311163])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [311166 311289])
            ("define-minor-mode" code nil nil [311291 312444])
            ("define-minor-mode" code nil nil [312446 313216])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [313219 313402])
            ("define-derived-mode" code nil nil [313404 313520])
            ("messages-buffer" function nil nil [313522 313809])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [314768 316196])
            ("bad-package-check" function (:arguments ("package")) nil [316198 316703])
            ("dolist" code nil nil [316705 316827])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [317480 320014])
            ("iswitchb-mode" variable nil nil [320093 320382])
            ("custom-autoload" code nil nil [320384 320431])
            ("iswitchb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320433 320805])
            ("make-obsolete" code nil nil [320807 320905])
            ("simple" package nil nil [320909 320926]))          
      :file "simple.el.gz"
      :pointmax 320952
      :fsize 87791
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1068 . 1069) (symbol 1033 . 1050) (open-paren 1032 . 1033)))
    (semanticdb-table "window.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [962 1995])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [1997 2294])
            ("save-selected-window" function (:arguments ("body")) nil [2296 3334])
            ("temp-buffer-window-setup-hook" variable nil nil [3336 3537])
            ("temp-buffer-window-show-hook" variable nil nil [3539 3760])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3762 4376])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4378 5622])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5624 8089])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8091 8856])
            ("window-right" function (:arguments ("window")) nil [9163 9375])
            ("window-left" function (:arguments ("window")) nil [9377 9587])
            ("window-child" function (:arguments ("window")) nil [9589 9744])
            ("window-child-count" function (:arguments ("window")) nil [9746 10042])
            ("window-last-child" function (:arguments ("window")) nil [10044 10311])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [10313 10807])
            ("window-normalize-frame" function (:arguments ("frame")) nil [10809 11062])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [11064 11619])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [11658 12430])
            ("ignore-window-parameters" variable nil nil [12432 12776])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [12826 12950])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [12952 13148])
            ("window-min-height" variable (:default-value 4) nil [13150 13830])
            ("window-min-pixel-height" function (:arguments ("window")) nil [13832 14019])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [14069 14192])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [14194 14389])
            ("window-min-width" variable (:default-value 10) nil [14391 15090])
            ("window-min-pixel-width" function (:arguments ("window")) nil [15092 15277])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [15279 15596])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [15598 16230])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [16232 16658])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [16660 17767])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [17769 18481])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [18483 19706])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [19708 20359])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [20361 21319])
            ("window-atom-root" function (:arguments ("window")) nil [21341 21761])
            ("window-make-atom" function (:arguments ("window")) nil [21763 22151])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [22153 24598])
            ("window--atom-check-1" function (:arguments ("window")) nil [24600 25488])
            ("window--atom-check" function (:arguments ("frame")) nil [25490 25878])
            ("window-sides" variable (:default-value (quote (left top right bottom))) nil [25897 25961])
            ("window-sides-vertical" variable nil nil [25963 26169])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [26171 27592])
            ("window--major-non-side-window" function (:arguments ("frame")) nil [27594 28650])
            ("window--major-side-window" function (:arguments ("side")) nil [28652 30322])
            ("display-buffer-in-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [30324 32376])
            ("delete-side-window" function (:arguments ("window")) nil [32378 32596])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [32598 37601])
            ("window--side-check" function (:arguments ("frame")) nil [37603 40107])
            ("window--check" function (:arguments ("frame")) nil [40109 40288])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [40324 42168])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [42170 43775])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [43795 44743])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [44745 45549])
            ("window-size-fixed" variable nil nil [45551 45988])
            ("make-variable-buffer-local" code nil nil [45989 46036])
            ("window--size-ignore-p" function (:arguments ("window" "ignore")) nil [46038 46214])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [46216 46921])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [46923 47839])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [47841 50693])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [50695 52454])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [52456 52961])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal")) nil [52963 54103])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal")) nil [54105 54595])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [54597 55991])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [55993 58118])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [58120 59463])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [59465 61294])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [61342 63494])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [63496 64154])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [64156 65578])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [65580 66136])
            ("defalias" code nil nil [66183 66229])
            ("defalias" code nil nil [66230 66273])
            ("window-full-height-p" function (:arguments ("window")) nil [66362 66800])
            ("window-full-width-p" function (:arguments ("window")) nil [66802 67234])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [67236 67767])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [67769 68689])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [68691 70573])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [70575 71152])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [71154 71672])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [71674 72064])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [72355 77850])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [77852 79473])
            ("defalias" code nil nil [79475 79525])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [79527 81178])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [81180 82450])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [82452 83745])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [83747 85278])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [85280 85430])
            ("count-windows" function (:arguments ("minibuf")) nil [85432 85725])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [85750 86700])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [86702 88326])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [88328 90243])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [90245 90681])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [90683 91205])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [91334 92558])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [92560 92966])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [92968 96645])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [96647 97194])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [97196 97373])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [97375 100893])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [100895 107843])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [107845 112023])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [112025 114271])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [114273 115106])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [115108 117029])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [117031 122497])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [122499 123786])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [123788 125131])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [125133 125729])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [125731 126341])
            ("frame-root-window-p" function (:arguments ("window")) nil [126344 126483])
            ("window--subtree" function (:arguments ("window" "next")) nil [126485 127208])
            ("window-tree" function (:arguments ("frame")) nil [127210 128105])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [128108 130739])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [130875 132148])
            ("window-deletable-p" function (:arguments ("window")) nil [132173 133562])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [133564 133867])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [133869 137265])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [137267 139718])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [139720 140346])
            ("record-window-buffer" function (:arguments ("window")) nil [142082 143501])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [143503 144002])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [144004 144931])
            ("switch-to-visible-buffer" variable (:default-value t) nil [144933 145481])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [145483 150792])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [150794 154151])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [154153 155149])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [155151 155878])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [155880 156398])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [156400 157240])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [157242 158375])
            ("unbury-buffer" function (:user-visible-flag t) nil [158377 158502])
            ("next-buffer" function (:user-visible-flag t) nil [158504 158806])
            ("previous-buffer" function (:user-visible-flag t) nil [158808 159118])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [159120 160874])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [160876 161908])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [161910 166445])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [166447 167047])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [167049 168013])
            ("window-split-min-size" function (:arguments ("horizontal" "pixelwise")) nil [168039 168455])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [168457 180056])
            ("split-window-keep-point" variable (:default-value t) nil [180133 180507])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [180509 182764])
            ("defalias" code nil nil [182766 182821])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [182823 184032])
            ("defalias" code nil nil [184034 184091])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [184594 187362])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [187364 187790])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [187792 189049])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [189051 189481])
            ("window-area-factor" variable (:default-value 1) nil [189528 189697])
            ("make-variable-buffer-local" code nil nil [189698 189746])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [189748 190402])
            ("balance-windows-area" function (:user-visible-flag t) nil [190404 194760])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [194830 197625])
            ("window-state-get" function (:arguments ("window" "writable")) nil [197627 199716])
            ("window-state-put-list" variable nil nil [199718 199796])
            ("window-state-put-stale-windows" variable nil nil [199798 199885])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [199887 202589])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [202591 206347])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [206349 210426])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [210429 212584])
            ("display-buffer-function" variable nil nil [212586 213142])
            ("make-obsolete-variable" code nil nil [213144 213225])
            ("pop-up-frame-alist" variable nil nil [213406 214022])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [214024 214353])
            ("special-display-buffer-names" variable nil nil [214355 216945])
            ("make-obsolete-variable" code nil nil [216946 217029])
            ("put" code nil nil [217030 217089])
            ("special-display-regexps" variable nil nil [217091 219733])
            ("make-obsolete-variable" code nil nil [219734 219812])
            ("put" code nil nil [219813 219867])
            ("special-display-p" function (:arguments ("buffer-name")) nil [219869 220764])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [220766 221381])
            ("make-obsolete-variable" code nil nil [221382 221464])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [221466 223486])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [223488 224286])
            ("make-obsolete-variable" code nil nil [224287 224366])
            ("same-window-buffer-names" variable nil nil [224368 224940])
            ("same-window-regexps" variable nil nil [224942 225530])
            ("same-window-p" function (:arguments ("buffer-name")) nil [225532 226503])
            ("pop-up-frames" variable nil nil [226505 226917])
            ("display-buffer-reuse-frames" variable nil nil [226919 227148])
            ("make-obsolete-variable" code nil nil [227150 227278])
            ("pop-up-windows" variable (:default-value t) nil [227280 227404])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [227406 228789])
            ("split-height-threshold" variable (:default-value 80) nil [228791 229317])
            ("split-width-threshold" variable (:default-value 160) nil [229319 229707])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [229709 231986])
            ("split-window-sensibly" function (:arguments ("window")) nil [231988 234373])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [234375 235485])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [235487 236429])
            ("even-window-heights" variable (:default-value t) nil [236431 236747])
            ("window--even-window-heights" function (:arguments ("window")) nil [236749 237613])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [237615 240290])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [240292 240716])
            ("display-buffer-mark-dedicated" variable nil nil [241055 241264])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (function :tag "Other function"))))
                nil [241266 241742])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [241744 242119])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [242121 242456])
            ("put" code nil nil [242457 242520])
            ("display-buffer-alist" variable nil nil [242522 243533])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [243535 243959])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [243961 244545])
            ("put" code nil nil [244546 244607])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [244609 245032])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [245034 245206])
            ("put" code nil nil [245207 245272])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [245274 245504])
            ("put" code nil nil [245505 245570])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [245572 251325])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [251327 251660])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [251702 252187])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [252189 252530])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [252532 254178])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [254180 254931])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [254933 255953])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [255955 257269])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [257271 257857])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [257859 258708])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [258710 259801])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [259803 262090])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [262092 263835])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [263837 264292])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "action" "norecord"))
                nil [264328 265860])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [265862 266496])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [266498 267642])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [267644 268200])
            ("switch-to-buffer-preserve-window-point" variable nil nil [268202 269091])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [269093 271844])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [271846 272878])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [272880 273892])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [273895 274868])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [274870 275085])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [275087 275306])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [275308 276709])
            ("window-buffer-height" function (:arguments ("window")) nil [276711 277189])
            ("fit-window-to-buffer-horizontally" variable nil nil [277254 277648])
            ("fit-frame-to-buffer" variable nil nil [277762 278211])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [278213 279427])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [279429 280718])
            ("declare-function" code nil nil [280720 280791])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [280793 280997])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [280999 289619])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width"))
                nil [289621 295683])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [295685 296066])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [296068 297176])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [297179 298001])
            ("recenter-last-op" variable nil nil [298005 298157])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [298159 299019])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [299021 300168])
            ("define-key" code nil nil [300170 300222])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300224 301358])
            ("define-key" code nil nil [301360 301423])
            ("scroll-error-top-bottom" variable nil nil [301593 302037])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [302039 303102])
            ("put" code nil nil [303104 303146])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [303148 304215])
            ("put" code nil nil [304217 304261])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [304331 304614])
            ("put" code nil nil [304616 304655])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [304657 304942])
            ("put" code nil nil [304944 304985])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [304989 305384])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [305386 306070])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [306072 306575])
            ("mouse-autoselect-window-timer" variable nil nil [306578 306668])
            ("mouse-autoselect-window-position" variable nil nil [306670 306781])
            ("mouse-autoselect-window-window" variable nil nil [306783 306884])
            ("mouse-autoselect-window-state" variable nil nil [306886 307183])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [307185 307906])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [307908 308736])
            ("mouse-autoselect-window-select" function nil nil [308738 311939])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [311941 313445])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [313447 314125])
            ("define-key" code nil nil [314215 314256])
            ("define-key" code nil nil [314257 314305])
            ("define-key" code nil nil [314306 314352])
            ("define-key" code nil nil [314353 314399])
            ("define-key" code nil nil [314400 314440])
            ("define-key" code nil nil [314441 314483])
            ("define-key" code nil nil [314484 314539])
            ("define-key" code nil nil [314540 314594])
            ("define-key" code nil nil [314595 314658])
            ("define-key" code nil nil [314659 314702])
            ("define-key" code nil nil [314703 314755]))          
      :file "window.el.gz"
      :pointmax 314781
      :fsize 69800
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "scroll-bar.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("mouse" include nil nil [1043 1059])
            ("cl-lib" include nil nil [1079 1096])
            ("scroll-bar-event-ratio" function (:arguments ("event")) nil [1118 1434])
            ("scroll-bar-scale" function (:arguments ("num-denom" "whole")) nil [1436 2117])
            ("scroll-bar-columns" function (:arguments ("side")) nil [2119 2794])
            ("scroll-bar-mode" variable nil nil [2862 2886])
            ("previous-scroll-bar-mode" variable nil nil [2887 2924])
            ("scroll-bar-mode-explicit" variable nil nil [2926 3091])
            ("set-scroll-bar-mode" function (:arguments ("value")) nil [3093 3505])
            ("scroll-bar-mode" variable (:default-value default-frame-scroll-bars) nil [3507 4197])
            ("setq" code nil nil [4298 4331])
            ("get-scroll-bar-mode" function nil nil [4333 4425])
            ("define-minor-mode" code nil nil [4427 4980])
            ("toggle-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4982 5642])
            ("toggle-horizontal-scroll-bar" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [5644 5958])
            ("scroll-bar-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6066 6596])
            ("scroll-bar-drag-position" function (:arguments ("portion-whole")) nil [6598 6853])
            ("scroll-bar-maybe-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [6855 7865])
            ("scroll-bar-drag-1" function (:arguments ("event")) nil [7922 8386])
            ("scroll-bar-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8388 9379])
            ("scroll-bar-scroll-down" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [9381 10109])
            ("scroll-bar-scroll-up" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [10111 10831])
            ("scroll-bar-toolkit-scroll" function (:arguments ("event")) nil [10860 12064])
            ("cond" code nil nil [12137 12744])
            ("scroll-bar" package nil nil [12748 12769]))          
      :file "scroll-bar.el.gz"
      :pointmax 12799
      :fsize 3768
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1096 . 1097) (symbol 1061 . 1078) (open-paren 1060 . 1061)))
    (semanticdb-table "newcomment.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [2941 2987])
            ("defalias" code nil nil [3003 3053])
            ("defalias" code nil nil [3069 3107])
            ("defalias" code nil nil [3123 3183])
            ("comment" customgroup (:user-visible-flag t) nil [3185 3300])
            ("comment-use-syntax" variable (:default-value (quote undecided)) nil [3387 3715])
            ("comment-fill-column" variable nil nil [3717 3884])
            ("comment-column" variable (:default-value 32) nil [3901 4298])
            ("make-variable-buffer-local" code nil nil [4299 4343])
            ("put" code nil nil [4359 4411])
            ("comment-start" variable nil nil [4428 4528])
            ("put" code nil nil [4544 4603])
            ("comment-start-skip" variable nil nil [4620 4889])
            ("put" code nil nil [4905 4960])
            ("comment-end-skip" variable nil nil [4977 5081])
            ("put" code nil nil [5097 5150])
            ("comment-end" variable (:default-value (purecopy "")) nil [5167 5313])
            ("put" code nil nil [5329 5377])
            ("comment-indent-function" variable (:default-value (quote comment-indent-default)) nil [5394 5750])
            ("comment-insert-comment-function" variable nil nil [5767 6017])
            ("comment-region-function" variable (:default-value (quote comment-region-default)) nil [6019 6370])
            ("uncomment-region-function" variable (:default-value (quote uncomment-region-default)) nil [6372 6731])
            ("block-comment-start" variable nil nil [6749 6781])
            ("block-comment-end" variable nil nil [6782 6812])
            ("comment-quote-nested" variable (:default-value t) nil [6814 6951])
            ("comment-continue" variable nil nil [6953 7428])
            ("comment-add" variable nil nil [7430 7788])
            ("comment-styles" variable
               (:constant-flag t
                :default-value (quote ((plain nil nil nil nil "Start in column 0 (do not indent), as in Emacs-20") (indent-or-triple nil nil nil multi-char "Start in column 0, but only for single-char starters") (indent nil nil nil t "Full comment per line, ends not aligned") (aligned nil t nil t "Full comment per line, ends aligned") (box nil t t t "Full comment per line, ends aligned, + top and bottom") (extra-line t nil t t "One comment for all lines, end on a line by itself") (multi-line t nil nil t "One comment for all lines, end on last commented line") (box-multi t t t t "One comment for all lines, + top and bottom"))))
                nil [7805 10008])
            ("comment-style" variable (:default-value (quote indent)) nil [10025 10451])
            ("comment-padding" variable (:default-value (purecopy " ")) nil [10468 10892])
            ("comment-inline-offset" variable (:default-value 1) nil [10894 11337])
            ("comment-multi-line" variable nil nil [11354 11771])
            ("comment-empty-lines" variable nil nil [11773 12157])
            ("comment-string-strip" function (:arguments ("str" "beforep" "afterp")) nil [12183 12436])
            ("comment-string-reverse" function (:arguments ("s")) nil [12438 12611])
            ("comment-normalize-vars" function (:arguments ("noerror")) nil [12628 15859])
            ("comment-quote-re" function (:arguments ("str" "unp")) nil [15861 16004])
            ("comment-quote-nested" function (:arguments ("cs" "ce" "unp")) nil [16006 17100])
            ("comment-use-global-state" variable (:default-value t) nil [17129 17583])
            ("make-obsolete-variable" code nil nil [17585 17662])
            ("comment-search-forward" function (:arguments ("limit" "noerror")) nil [17664 19252])
            ("comment-search-backward" function (:arguments ("limit" "noerror")) nil [19254 20466])
            ("comment-beginning" function nil nil [20468 22354])
            ("comment-forward" function (:arguments ("n")) nil [22356 22859])
            ("comment-enter-backward" function nil nil [22861 24425])
            ("comment-indent-default" function nil nil [24467 24814])
            ("comment-choose-indent" function (:arguments ("indent")) nil [24816 27400])
            ("comment-indent" function
               (:user-visible-flag t
                :arguments ("continue"))
                nil [27417 30383])
            ("comment-set-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30400 31231])
            ("comment-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31248 31815])
            ("comment-padright" function (:arguments ("str" "n")) nil [31817 33562])
            ("comment-padleft" function (:arguments ("str" "n")) nil [33589 35276])
            ("uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [35293 35905])
            ("uncomment-region-default" function (:arguments ("beg" "end" "arg")) nil [35907 39805])
            ("comment-make-extra-lines" function (:arguments ("cs" "ce" "ccs" "cce" "min-indent" "max-indent" "block")) nil [39807 41323])
            ("comment-with-narrowing" function (:arguments ("beg" "end" "body")) nil [41325 42381])
            ("comment-add" function (:arguments ("arg")) nil [42383 42782])
            ("comment-region-internal" function (:arguments ("beg" "end" "cs" "ce" "ccs" "cce" "block" "lines" "indent")) nil [42784 46175])
            ("comment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [46192 47192])
            ("comment-region-default" function (:arguments ("beg" "end" "arg")) nil [47194 49693])
            ("comment-box" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [49710 50172])
            ("comment-only-p" function (:arguments ("beg" "end")) nil [50174 50368])
            ("comment-or-uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [50385 50777])
            ("comment-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50794 52419])
            ("comment-auto-fill-only-comments" variable nil nil [52436 52636])
            ("comment-valid-prefix-p" function (:arguments ("prefix" "compos")) nil [52638 54730])
            ("comment-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [54748 58634])
            ("newcomment" package nil nil [58636 58657]))          
      :file "newcomment.el.gz"
      :pointmax 58687
      :fsize 16623
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "disp-table.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("put" code nil nil [1005 1051])
            ("make-display-table" function nil nil [1068 1175])
            ("or" code nil nil [1177 1259])
            ("put" code nil nil [1329 1368])
            ("put" code nil nil [1369 1402])
            ("put" code nil nil [1403 1438])
            ("put" code nil nil [1439 1475])
            ("put" code nil nil [1476 1522])
            ("put" code nil nil [1523 1567])
            ("display-table-slot" function (:arguments ("display-table" "slot")) nil [1584 2077])
            ("set-display-table-slot" function (:arguments ("display-table" "slot" "value")) nil [2094 2608])
            ("describe-display-table" function (:arguments ("dt")) nil [2625 3544])
            ("display-table-print-array" function (:arguments ("desc")) nil [3546 3945])
            ("describe-current-display-table" function (:user-visible-flag t) nil [3962 4284])
            ("standard-display-8bit" function (:arguments ("l" "h")) nil [4301 5131])
            ("standard-display-default" function (:arguments ("l" "h")) nil [5148 5461])
            ("standard-display-ascii" function (:arguments ("c" "s")) nil [5656 5875])
            ("standard-display-g1" function (:arguments ("c" "sc")) nil [5892 6385])
            ("standard-display-graphic" function (:arguments ("c" "gc")) nil [6402 6882])
            ("standard-display-underline" function (:arguments ("c" "uc")) nil [6899 7251])
            ("create-glyph" function (:arguments ("string")) nil [7268 7697])
            ("make-glyph-code" function (:arguments ("char" "face")) nil [7714 8129])
            ("glyph-char" function (:arguments ("glyph")) nil [8146 8285])
            ("glyph-face" function (:arguments ("glyph")) nil [8302 8610])
            ("standard-display-european" function (:arguments ("arg")) nil [8627 10766])
            ("disp-table" package nil nil [10768 10789]))          
      :file "disp-table.el.gz"
      :pointmax 10819
      :fsize 3550
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "register.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1199 1216])
            ("cl-defstruct" code nil nil [1230 1562])
            ("cl-defun" code nil nil [1564 2185])
            ("register-alist" variable nil nil [2187 2900])
            ("register" customgroup (:user-visible-flag t) nil [2902 2988])
            ("register-separator" variable nil nil [2990 3386])
            ("register-preview-delay" variable (:default-value 1) nil [3388 3714])
            ("get-register" function (:arguments ("register")) nil [3716 3856])
            ("set-register" function (:arguments ("register" "value")) nil [3858 4190])
            ("register-describe-oneline" function (:arguments ("c")) nil [4192 4511])
            ("register-preview-default" function (:arguments ("r")) nil [4513 4713])
            ("register-preview-function" variable (:default-value (function register-preview-default)) nil [4715 4919])
            ("register-preview" function (:arguments ("buffer" "show-empty")) nil [4921 5529])
            ("register-read-with-preview" function (:arguments ("prompt")) nil [5531 6791])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [6793 7480])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [7482 8126])
            ("set-advertised-calling-convention" code nil nil [8188 8283])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [8285 8917])
            ("set-advertised-calling-convention" code nil nil [8979 9073])
            ("make-obsolete" code nil nil [9075 9153])
            ("defalias" code nil nil [9155 9202])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [9203 11103])
            ("register-swap-out" function nil nil [11105 11458])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [11460 12161])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [12163 13016])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [13018 13497])
            ("list-registers" function (:user-visible-flag t) nil [13499 13876])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [13878 16079])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [16081 17265])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag" "region"))
                nil [17267 18238])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [18240 19241])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [19243 20248])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [20250 21186])
            ("register" package nil nil [21188 21207]))          
      :file "register.el.gz"
      :pointmax 21234
      :fsize 5864
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1216 . 1217) (symbol 1181 . 1198) (open-paren 1180 . 1181)))
    (semanticdb-table "isearch.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2501 2518])
            ("isearch" customgroup (:user-visible-flag t) nil [2565 2778])
            ("search-exit-option" variable (:default-value t) nil [2781 2922])
            ("search-slow-window-lines" variable (:default-value 1) nil [2924 3250])
            ("search-slow-speed" variable (:default-value 1200) nil [3252 3498])
            ("search-upper-case" variable (:default-value (quote not-yanks)) nil [3500 3981])
            ("search-nonincremental-instead" variable (:default-value t) nil [3983 4275])
            ("search-whitespace-regexp" variable (:default-value (purecopy "\\s-+")) nil [4277 5259])
            ("search-invisible" variable (:default-value (quote open)) nil [5261 6118])
            ("isearch-hide-immediately" variable (:default-value t) nil [6120 6482])
            ("isearch-resume-in-command-history" variable nil nil [6484 6724])
            ("isearch-mode-hook" variable nil nil [6726 6821])
            ("isearch-update-post-hook" variable nil nil [6823 6931])
            ("isearch-mode-end-hook" variable nil nil [6933 7135])
            ("isearch-mode-end-hook-quit" variable nil nil [7137 7256])
            ("isearch-message-function" variable nil nil [7258 7386])
            ("isearch-wrap-function" variable nil nil [7388 7608])
            ("isearch-push-state-function" variable nil nil [7610 7752])
            ("isearch-filter-predicate" variable (:default-value (function isearch-filter-visible)) nil [7754 8291])
            ("search-ring" variable nil nil [8310 8371])
            ("regexp-search-ring" variable nil nil [8372 8459])
            ("search-ring-max" variable (:default-value 16) nil [8461 8600])
            ("regexp-search-ring-max" variable (:default-value 16) nil [8601 8754])
            ("search-ring-yank-pointer" variable nil nil [8756 8866])
            ("regexp-search-ring-yank-pointer" variable nil nil [8867 8991])
            ("search-ring-update" variable nil nil [8993 9192])
            ("search-highlight" variable (:default-value t) nil [9232 9364])
            ("isearch" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "magenta3" :foreground "lightskyblue1")) (((class color) (min-colors 88) (background dark)) (:background "palevioletred2" :foreground "brown4")) (((class color) (min-colors 16)) (:background "magenta4" :foreground "cyan1")) (((class color) (min-colors 8)) (:background "magenta4" :foreground "cyan1")) (t (:inverse-video t))))
                :type "face")
                nil [9366 10020])
            ("isearch-face" variable (:default-value (quote isearch)) nil [10021 10051])
            ("isearch-fail" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "RosyBrown1")) (((class color) (min-colors 88) (background dark)) (:background "red4")) (((class color) (min-colors 16)) (:background "red")) (((class color) (min-colors 8)) (:background "red")) (((class color grayscale)) :foreground "grey") (t (:inverse-video t))))
                :type "face")
                nil [10053 10559])
            ("isearch-lazy-highlight" variable (:default-value t) nil [10561 10881])
            ("lazy-highlight" customgroup (:user-visible-flag t) nil [10918 11082])
            ("define-obsolete-variable-alias" code nil nil [11084 11243])
            ("lazy-highlight-cleanup" variable (:default-value t) nil [11245 11485])
            ("define-obsolete-variable-alias" code nil nil [11487 11658])
            ("lazy-highlight-initial-delay" variable (:default-value 0.25) nil [11660 11816])
            ("define-obsolete-variable-alias" code nil nil [11818 11979])
            ("lazy-highlight-interval" variable nil nil [11981 12128])
            ("define-obsolete-variable-alias" code nil nil [12130 12301])
            ("lazy-highlight-max-at-a-time" variable (:default-value 20) nil [12303 12659])
            ("lazy-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "paleturquoise")) (((class color) (min-colors 88) (background dark)) (:background "paleturquoise4")) (((class color) (min-colors 16)) (:background "turquoise3")) (((class color) (min-colors 8)) (:background "turquoise3")) (t (:underline t))))
                :type "face")
                nil [12661 13149])
            ("define-obsolete-face-alias" code nil nil [13150 13230])
            ("define-obsolete-variable-alias" code nil nil [13231 13384])
            ("lazy-highlight-face" variable (:default-value (quote lazy-highlight)) nil [13385 13429])
            ("isearch-help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) (quote isearch-help-for-help)) (define-key map [help] (quote isearch-help-for-help)) (define-key map [f1] (quote isearch-help-for-help)) (define-key map "?" (quote isearch-help-for-help)) (define-key map "b" (quote isearch-describe-bindings)) (define-key map "k" (quote isearch-describe-key)) (define-key map "m" (quote isearch-describe-mode)) (define-key map "q" (quote help-quit)) map)) nil [13461 14000])
            ("help-macro" include nil nil [14021 14042])
            ("make-help-screen" code nil nil [14045 14646])
            ("isearch--display-help-action" variable (:default-value (quote (nil (inhibit-same-window . t)))) nil [14648 14718])
            ("isearch-help-for-help" function (:user-visible-flag t) nil [14720 14929])
            ("isearch-describe-bindings" function (:user-visible-flag t) nil [14931 15369])
            ("isearch-describe-key" function (:user-visible-flag t) nil [15371 15616])
            ("isearch-describe-mode" function (:user-visible-flag t) nil [15618 15843])
            ("defalias" code nil nil [15845 15897])
            ("isearch-mode-map" variable (:default-value (let ((i 0) (map (make-keymap))) (or (char-table-p (nth 1 map)) (error "The initialization of isearch-mode-map must be updated")) (set-char-table-range (nth 1 map) (cons 256 (max-char)) (quote isearch-printing-char)) (setq i 32) (while (< i 256) (define-key map (vector i) (quote isearch-printing-char)) (setq i (1+ i))) (let ((meta-map (make-sparse-keymap))) (define-key map (char-to-string meta-prefix-char) meta-map)) (define-key map "" (quote isearch-repeat-forward)) (define-key map "" (quote isearch-repeat-backward)) (define-key map "\223" (quote isearch-repeat-forward)) (define-key map "\222" (quote isearch-repeat-backward)) (define-key map "" (quote isearch-delete-char)) (define-key map [backspace] (quote isearch-delete-char)) (define-key map "" (quote isearch-abort)) (or (= 27 meta-prefix-char) (error "Inconsistency in isearch.el")) (define-key map "" (quote isearch-cancel)) (define-key map "" (quote isearch-quote-char)) (define-key map "" (quote isearch-exit)) (define-key map [return] (quote isearch-exit)) (define-key map "
" (quote isearch-printing-char)) (define-key map "	" (quote isearch-printing-char)) (define-key map [33554464] (quote isearch-printing-char)) (define-key map "" (quote isearch-yank-word-or-char)) (define-key map "\227" (quote isearch-del-char)) (define-key map "\231" (quote isearch-yank-char)) (define-key map "" (quote isearch-yank-kill)) (define-key map "\363" (quote isearch-yank-line)) (define-key map (char-to-string help-char) isearch-help-map) (define-key map [help] isearch-help-map) (define-key map [f1] isearch-help-map) (define-key map "\356" (quote isearch-ring-advance)) (define-key map "\360" (quote isearch-ring-retreat)) (define-key map "\371" (quote isearch-yank-pop)) (define-key map "\211" (quote isearch-complete)) (define-key map [switch-frame] nil) (define-key map [delete-frame] nil) (define-key map [iconify-frame] nil) (define-key map [make-frame-visible] nil) (define-key map [mouse-movement] nil) (define-key map [language-change] nil) (define-key map "" (quote isearch-toggle-input-method)) (define-key map "" (quote isearch-toggle-specified-input-method)) (define-key map [mouse-2] (function isearch-mouse-2)) (define-key map [down-mouse-2] nil) (define-key map "\343" (quote isearch-toggle-case-fold)) (define-key map "\362" (quote isearch-toggle-regexp)) (define-key map "\345" (quote isearch-edit-string)) (put (quote isearch-toggle-case-fold) :advertised-binding "\363c") (put (quote isearch-toggle-regexp) :advertised-binding "\363r") (put (quote isearch-edit-string) :advertised-binding "\363e") (define-key map "\363e" (quote isearch-edit-string)) (define-key map "\363c" (quote isearch-toggle-case-fold)) (define-key map "\363i" (quote isearch-toggle-invisible)) (define-key map "\363r" (quote isearch-toggle-regexp)) (define-key map "\363w" (quote isearch-toggle-word)) (define-key map "\363_" (quote isearch-toggle-symbol)) (define-key map "\363 " (quote isearch-toggle-lax-whitespace)) (define-key map [134217765] (quote isearch-query-replace)) (define-key map [201326629] (quote isearch-query-replace-regexp)) (define-key map "\363o" (quote isearch-occur)) (define-key map "\363hr" (quote isearch-highlight-regexp)) (define-key map "8" (quote isearch-char-by-name)) map)) nil [15933 20597])
            ("minibuffer-local-isearch-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (quote exit-minibuffer)) (define-key map "\211" (quote isearch-complete-edit)) (define-key map "" (quote isearch-forward-exit-minibuffer)) (define-key map "" (quote isearch-reverse-exit-minibuffer)) (define-key map "" (quote isearch-yank-char-in-minibuffer)) (define-key map [right] (quote isearch-yank-char-in-minibuffer)) map)) nil [20599 21134])
            ("isearch-forward" variable nil nil [21298 21326])
            ("isearch-regexp" variable nil nil [21365 21392])
            ("isearch-word" variable nil nil [21419 21833])
            ("isearch-lax-whitespace" variable (:default-value t) nil [21835 22272])
            ("isearch-regexp-lax-whitespace" variable nil nil [22274 22718])
            ("isearch-cmds" variable nil nil [22720 22966])
            ("isearch-string" variable nil nil [22968 22994])
            ("isearch-message" variable nil nil [23025 23052])
            ("isearch-message-prefix-add" variable nil nil [23104 23143])
            ("isearch-message-suffix-add" variable nil nil [23185 23224])
            ("isearch-success" variable (:default-value t) nil [23267 23293])
            ("isearch-error" variable nil nil [23331 23357])
            ("isearch-other-end" variable nil nil [23393 23423])
            ("isearch-wrapped" variable nil nil [23470 23498])
            ("isearch-barrier" variable nil nil [23544 23629])
            ("isearch-just-started" variable nil nil [23630 23663])
            ("isearch-start-hscroll" variable nil nil [23664 23696])
            ("isearch-case-fold-search" variable nil nil [23887 23924])
            ("isearch-invisible" variable (:default-value search-invisible) nil [24060 24103])
            ("isearch-last-case-fold-search" variable nil nil [24105 24147])
            ("isearch-original-minibuffer-message-timeout" variable nil nil [24203 24259])
            ("isearch-adjusted" variable nil nil [24261 24290])
            ("isearch-slow-terminal-mode" variable nil nil [24291 24330])
            ("isearch-small-window" variable nil nil [24362 24395])
            ("isearch-opoint" variable nil nil [24396 24421])
            ("isearch-window-configuration" variable nil nil [24489 24530])
            ("isearch-yank-flag" variable nil nil [24595 24625])
            ("isearch-op-fun" variable nil nil [24819 24846])
            ("isearch-recursive-edit" variable nil nil [24909 24944])
            ("isearch-nonincremental" variable nil nil [25002 25037])
            ("isearch-new-forward" variable nil nil [25098 25130])
            ("isearch-opened-overlays" variable nil nil [25189 25225])
            ("isearch-hidden" variable nil nil [25277 25304])
            ("isearch-input-method-function" variable nil nil [25369 25411])
            ("isearch-input-method-local-p" variable nil nil [25501 25542])
            ("isearch--saved-overriding-local-map" variable nil nil [25544 25592])
            ("or" code nil nil [25723 25834])
            ("isearch-mode" variable nil nil [25836 25861])
            ("make-variable-buffer-local" code nil nil [25901 25943])
            ("define-key" code nil nil [25945 25992])
            ("define-key" code nil nil [25993 26044])
            ("define-key" code nil nil [26045 26093])
            ("define-key" code nil nil [26094 26146])
            ("define-key" code nil nil [26147 26196])
            ("define-key" code nil nil [26197 26248])
            ("define-key" code nil nil [26249 26309])
            ("isearch-forward" function
               (:user-visible-flag t
                :arguments ("regexp-p" "no-recursive-edit"))
                nil [26345 30576])
            ("isearch-forward-regexp" function
               (:user-visible-flag t
                :arguments ("not-regexp" "no-recursive-edit"))
                nil [30578 31251])
            ("isearch-forward-word" function
               (:user-visible-flag t
                :arguments ("not-word" "no-recursive-edit"))
                nil [31253 31722])
            ("isearch-forward-symbol" function
               (:user-visible-flag t
                :arguments ("_not-symbol" "no-recursive-edit"))
                nil [31724 32173])
            ("isearch-backward" function
               (:user-visible-flag t
                :arguments ("regexp-p" "no-recursive-edit"))
                nil [32175 32488])
            ("isearch-backward-regexp" function
               (:user-visible-flag t
                :arguments ("not-regexp" "no-recursive-edit"))
                nil [32490 32908])
            ("isearch-forward-symbol-at-point" function (:user-visible-flag t) nil [32910 33616])
            ("isearch-mode" function (:arguments ("forward" "regexp" "op-fun" "recursive-edit" "word")) nil [33954 37894])
            ("isearch-update" function nil nil [37943 40247])
            ("isearch-done" function (:arguments ("nopush" "edit")) nil [40249 43348])
            ("isearch-update-ring" function (:arguments ("string" "regexp")) nil [43350 43637])
            ("cl-defstruct" code nil nil [44028 45098])
            ("isearch--set-state" function (:arguments ("cmd")) nil [45100 45748])
            ("isearch-pop-state" function nil nil [45750 45861])
            ("isearch-push-state" function nil nil [45863 45935])
            ("isearch-exit" function (:user-visible-flag t) nil [45999 46431])
            ("isearch-fail-pos" function (:arguments ("msg")) nil [46433 47205])
            ("with-isearch-suspended" function (:arguments ("body")) nil [47207 52638])
            ("minibuffer-history-symbol" variable nil nil [52640 52674])
            ("isearch-edit-string" function (:user-visible-flag t) nil [52711 54124])
            ("isearch-nonincremental-exit-minibuffer" function nil nil [54126 54245])
            ("make-obsolete" code nil nil [54396 54475])
            ("isearch-forward-exit-minibuffer" function (:user-visible-flag t) nil [54477 54666])
            ("isearch-reverse-exit-minibuffer" function (:user-visible-flag t) nil [54668 54860])
            ("isearch-cancel" function (:user-visible-flag t) nil [54862 55378])
            ("isearch-abort" function (:user-visible-flag t) nil [55427 56178])
            ("isearch-repeat" function (:arguments ("direction")) nil [56180 57972])
            ("isearch-repeat-forward" function (:user-visible-flag t) nil [57974 58091])
            ("isearch-repeat-backward" function (:user-visible-flag t) nil [58093 58213])
            ("isearch-toggle-regexp" function (:user-visible-flag t) nil [58215 58499])
            ("isearch-toggle-word" function (:user-visible-flag t) nil [58501 58777])
            ("isearch-toggle-symbol" function (:user-visible-flag t) nil [58779 59081])
            ("isearch-toggle-lax-whitespace" function (:user-visible-flag t) nil [59083 59896])
            ("isearch-toggle-case-fold" function (:user-visible-flag t) nil [59898 60408])
            ("isearch-toggle-invisible" function (:user-visible-flag t) nil [60410 61022])
            ("word-search-regexp" function (:arguments ("string" "lax")) nil [61042 61942])
            ("word-search-backward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [61944 62768])
            ("word-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [62770 63575])
            ("word-search-backward-lax" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [63577 64520])
            ("word-search-forward-lax" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [64522 65445])
            ("isearch-symbol-regexp" function (:arguments ("string" "lax")) nil [65465 66743])
            ("put" code nil nil [66745 66807])
            ("search-forward-lax-whitespace" function (:arguments ("string" "bound" "noerror" "count")) nil [66840 67112])
            ("search-backward-lax-whitespace" function (:arguments ("string" "bound" "noerror" "count")) nil [67114 67389])
            ("re-search-forward-lax-whitespace" function (:arguments ("regexp" "bound" "noerror" "count")) nil [67391 67651])
            ("re-search-backward-lax-whitespace" function (:arguments ("regexp" "bound" "noerror" "count")) nil [67653 67916])
            ("isearch-query-replace" function
               (:user-visible-flag t
                :arguments ("arg" "regexp-flag"))
                nil [67920 70646])
            ("isearch-query-replace-regexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70648 70908])
            ("isearch-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [70910 72819])
            ("declare-function" code nil nil [72821 72875])
            ("isearch-highlight-regexp" function (:user-visible-flag t) nil [72877 74353])
            ("isearch-delete-char" function (:user-visible-flag t) nil [74357 74763])
            ("isearch-del-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [74765 75797])
            ("isearch-yank-string" function (:arguments ("string")) nil [75799 76281])
            ("isearch-yank-kill" function (:user-visible-flag t) nil [76283 76419])
            ("isearch-yank-pop" function (:user-visible-flag t) nil [76421 76965])
            ("isearch-yank-x-selection" function (:user-visible-flag t) nil [76967 77289])
            ("isearch-mouse-2" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [77292 77869])
            ("isearch-yank-internal" function (:arguments ("jumpform")) nil [77871 78425])
            ("isearch-yank-char-in-minibuffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [78427 78776])
            ("isearch-yank-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [78778 79021])
            ("declare-function" code nil nil [79023 79083])
            ("isearch-yank-word-or-char" function (:user-visible-flag t) nil [79084 79611])
            ("isearch-yank-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79613 79846])
            ("isearch-yank-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79848 80142])
            ("isearch-char-by-name" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [80144 80850])
            ("isearch-search-and-update" function nil nil [80852 82809])
            ("isearch-backslash" function (:arguments ("str")) nil [83133 83285])
            ("isearch-fallback" function (:arguments ("want-backslash" "allow-invalid" "to-barrier")) nil [83287 85954])
            ("if" code nil nil [87353 87449])
            ("if" code nil nil [87450 87550])
            ("put" code nil nil [87666 87699])
            ("put" code nil nil [87700 87744])
            ("put" code nil nil [87745 87787])
            ("put" code nil nil [87831 87868])
            ("put" code nil nil [87869 87913])
            ("put" code nil nil [87914 87963])
            ("put" code nil nil [87964 88021])
            ("put" code nil nil [88022 88073])
            ("put" code nil nil [88118 88163])
            ("put" code nil nil [88164 88204])
            ("put" code nil nil [88205 88248])
            ("put" code nil nil [88249 88292])
            ("put" code nil nil [88293 88332])
            ("put" code nil nil [88364 88412])
            ("put" code nil nil [88413 88463])
            ("put" code nil nil [88496 88539])
            ("put" code nil nil [88540 88582])
            ("put" code nil nil [88583 88622])
            ("isearch-allow-scroll" variable nil nil [88624 88930])
            ("isearch-allow-prefix" variable (:default-value t) nil [88932 89231])
            ("isearch-string-out-of-window" function (:arguments ("isearch-point")) nil [89233 90430])
            ("isearch-back-into-window" function (:arguments ("above" "isearch-point")) nil [90432 91269])
            ("isearch-pre-scroll-point" variable nil nil [91271 91308])
            ("isearch-pre-command-hook" function nil nil [91310 93365])
            ("isearch-post-command-hook" function nil nil [93367 93705])
            ("isearch-quote-char" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [93707 94916])
            ("isearch-printing-char" function
               (:user-visible-flag t
                :arguments ("char" "count"))
                nil [94918 95403])
            ("isearch-process-search-char" function (:arguments ("char" "count")) nil [95405 96163])
            ("isearch-process-search-string" function (:arguments ("string" "message")) nil [96165 96354])
            ("isearch-ring-adjust1" function (:arguments ("advance")) nil [96374 97011])
            ("isearch-ring-adjust" function (:arguments ("advance")) nil [97013 97468])
            ("isearch-ring-advance" function (:user-visible-flag t) nil [97470 97679])
            ("isearch-ring-retreat" function (:user-visible-flag t) nil [97681 97811])
            ("isearch-complete1" function nil nil [97813 98718])
            ("isearch-complete" function (:user-visible-flag t) nil [98720 99171])
            ("isearch-complete-edit" function (:user-visible-flag t) nil [99173 99399])
            ("isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [99422 100144])
            ("isearch-message-prefix" function (:arguments ("ellipsis" "nonincremental")) nil [100146 102063])
            ("isearch-message-suffix" function (:arguments ("c-q-hack")) nil [102065 102256])
            ("isearch-search-fun-function" variable (:default-value (quote isearch-search-fun-default)) nil [102274 102714])
            ("isearch-search-fun" function nil nil [102716 102933])
            ("isearch-search-fun-default" function nil nil [102935 104201])
            ("isearch-search-string" function (:arguments ("string" "bound" "noerror")) nil [104203 105934])
            ("isearch-search" function nil nil [105936 108182])
            ("isearch-open-overlay-temporary" function (:arguments ("ov")) nil [108249 109215])
            ("isearch-open-necessary-overlays" function (:arguments ("ov")) nil [109484 110311])
            ("isearch-clean-overlays" function nil nil [110444 110617])
            ("isearch-intersects-p" function (:arguments ("start0" "end0" "start1" "end1")) nil [110620 110928])
            ("isearch-close-unnecessary-overlays" function (:arguments ("begin" "end")) nil [111049 111827])
            ("isearch-range-invisible" function (:arguments ("beg" "end")) nil [111830 113845])
            ("isearch-filter-visible" function (:arguments ("beg" "end")) nil [113847 114215])
            ("isearch-no-upper-case-p" function (:arguments ("string" "regexp-flag")) nil [114241 115446])
            ("isearch-text-char-description" function (:arguments ("c")) nil [115509 115711])
            ("isearch-unread" function (:arguments ("char-or-events")) nil [115820 115990])
            ("isearch-overlay" variable nil nil [116011 116039])
            ("isearch-highlight" function (:arguments ("beg" "end")) nil [116041 116464])
            ("isearch-dehighlight" function nil nil [116466 116558])
            ("isearch-lazy-highlight-overlays" variable nil nil [117768 117812])
            ("isearch-lazy-highlight-wrapped" variable nil nil [117813 117856])
            ("isearch-lazy-highlight-start-limit" variable nil nil [117857 117904])
            ("isearch-lazy-highlight-end-limit" variable nil nil [117905 117950])
            ("isearch-lazy-highlight-start" variable nil nil [117951 117992])
            ("isearch-lazy-highlight-end" variable nil nil [117993 118032])
            ("isearch-lazy-highlight-timer" variable nil nil [118033 118074])
            ("isearch-lazy-highlight-last-string" variable nil nil [118075 118122])
            ("isearch-lazy-highlight-window" variable nil nil [118123 118165])
            ("isearch-lazy-highlight-window-start" variable nil nil [118166 118214])
            ("isearch-lazy-highlight-window-end" variable nil nil [118215 118261])
            ("isearch-lazy-highlight-case-fold-search" variable nil nil [118262 118314])
            ("isearch-lazy-highlight-regexp" variable nil nil [118315 118357])
            ("isearch-lazy-highlight-lax-whitespace" variable nil nil [118358 118408])
            ("isearch-lazy-highlight-regexp-lax-whitespace" variable nil nil [118409 118466])
            ("isearch-lazy-highlight-word" variable nil nil [118467 118507])
            ("isearch-lazy-highlight-forward" variable nil nil [118508 118551])
            ("isearch-lazy-highlight-error" variable nil nil [118552 118593])
            ("lazy-highlight-cleanup" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [118595 119295])
            ("define-obsolete-function-alias" code nil nil [119297 119456])
            ("isearch-lazy-highlight-new-loop" function (:arguments ("beg" "end")) nil [119458 122770])
            ("isearch-lazy-highlight-search" function nil nil [122772 124319])
            ("isearch-lazy-highlight-update" function nil nil [124321 126879])
            ("isearch-resume" function (:arguments ("string" "regexp" "word" "forward" "message" "case-fold")) nil [126881 127476]))          
      :file "isearch.el.gz"
      :pointmax 127503
      :fsize 32545
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 14042 . 14043) (symbol 14003 . 14020) (open-paren 14002 . 14003) (close-paren 2518 . 2519) (symbol 2483 . 2500) (open-paren 2482 . 2483)))
    (semanticdb-table "comint.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [4857 4872])
            ("ansi-color" include nil nil [4873 4894])
            ("regexp-opt" include nil nil [4895 4916])
            ("comint" customgroup (:user-visible-flag t) nil [6628 6720])
            ("comint-completion" customgroup (:user-visible-flag t) nil [6722 6808])
            ("comint-prompt-regexp" variable (:default-value "^") nil [6945 7467])
            ("comint-prompt-read-only" variable nil nil [7469 8475])
            ("comint-delimiter-argument-list" variable nil nil [8477 8907])
            ("comint-input-autoexpand" variable nil nil [8909 9462])
            ("comint-highlight-input" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [9464 9576])
            ("comint-highlight-prompt" variable
               (:default-value (quote ((t :inherit minibuffer-prompt)))
                :type "face")
                nil [9578 9702])
            ("comint-input-ignoredups" variable nil nil [9704 9922])
            ("comint-input-ring-file-name" variable nil nil [9924 10298])
            ("comint-scroll-to-bottom-on-input" variable nil nil [10300 10734])
            ("comint-move-point-for-output" variable nil nil [10736 11461])
            ("defvaralias" code nil nil [11463 11541])
            ("comint-scroll-show-maximum-output" variable (:default-value t) nil [11543 12206])
            ("comint-buffer-maximum-size" variable (:default-value 1024) nil [12208 12493])
            ("comint-input-ring-size" variable (:default-value 500) nil [12495 12638])
            ("comint-input-ring-separator" variable (:default-value "
") nil [12640 12733])
            ("comint-input-history-ignore" variable (:default-value "^#") nil [12735 12855])
            ("comint-process-echoes" variable nil nil [12857 13113])
            ("comint-password-prompt-regexp" variable (:default-value (concat "\\(^ *\\|" (regexp-opt (quote ("Enter" "enter" "Enter same" "enter same" "Enter the" "enter the" "Old" "old" "New" "new" "'s" "login" "Kerberos" "CVS" "UNIX" " SMB" "LDAP" "[sudo]" "Repeat" "Bad")) t) " +\\)" "\\(?:" (regexp-opt password-word-equivalents) "\\|Response\\)" "\\(?:\\(?:, try\\)? *again\\| (empty for no passphrase)\\| (again)\\)?\\(?: for [^:：៖]+\\)?[:：៖]\\s *\\'")) nil [13705 14334])
            ("comint-get-old-input" variable (:default-value (function comint-get-old-input-default)) nil [14375 14859])
            ("comint-dynamic-complete-functions" variable (:default-value (quote (comint-c-a-p-replace-by-expanded-history comint-filename-completion))) nil [14861 15148])
            ("comint-input-filter" variable (:default-value (function (lambda (str) (not (string-match "\\`\\s *\\'" str))))) nil [15150 15451])
            ("comint-input-filter-functions" variable (:default-value (quote nil)) nil [15453 15626])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [15643 16311])
            ("comint-input-sender-no-newline" variable nil nil [16313 16434])
            ("comint-input-sender" variable (:default-value (function comint-simple-send)) nil [16436 16881])
            ("comint-eol-on-send" variable (:default-value t) nil [16883 17040])
            ("define-obsolete-variable-alias" code nil nil [17042 17153])
            ("comint-use-prompt-regexp" variable nil nil [17329 17713])
            ("comint-mode-hook" variable nil nil [17715 17866])
            ("comint-exec-hook" variable (:default-value (quote nil)) nil [17868 18266])
            ("comint-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote comint-previous-input)) (define-key map "n" (quote comint-next-input)) (define-key map [C-up] (quote comint-previous-input)) (define-key map [C-down] (quote comint-next-input)) (define-key map "r" (quote comint-history-isearch-backward-regexp)) (define-key map [3 134217842] (quote comint-previous-matching-input-from-input)) (define-key map [3 134217843] (quote comint-next-matching-input-from-input)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-send-input)) (define-key map "" (quote comint-delchar-or-maybe-eof)) (define-key map [delete] (quote delete-forward-char)) (define-key map [kp-delete] (quote delete-forward-char)) (define-key map " " (quote comint-accumulate)) (define-key map "" (quote comint-get-next-from-history)) (define-key map "" (quote comint-bol-or-process-mark)) (define-key map "" (quote comint-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote comint-interrupt-subjob)) (define-key map "" (quote comint-stop-subjob)) (define-key map "" (quote comint-quit-subjob)) (define-key map "" (quote comint-copy-old-input)) (define-key map "" (quote comint-delete-output)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-show-maximum-output)) (define-key map "" (quote comint-dynamic-list-input-ring)) (define-key map "" (quote comint-next-prompt)) (define-key map "" (quote comint-previous-prompt)) (define-key map "" (quote comint-send-eof)) (define-key map "" (quote comint-write-output)) (define-key map "." (quote comint-insert-previous-argument)) (define-key map [mouse-2] (quote comint-insert-input)) (define-key map [menu-bar completion] (cons "Complete" (make-sparse-keymap "Complete"))) (define-key map [menu-bar completion complete-expand] (quote ("Expand File Name" . comint-replace-by-expanded-filename))) (define-key map [menu-bar completion complete-listing] (quote ("File Completion Listing" . comint-dynamic-list-filename-completions))) (define-key map [menu-bar completion complete-file] (quote ("Complete File Name" . comint-dynamic-complete-filename))) (define-key map [menu-bar completion complete] (quote ("Complete at Point" . completion-at-point))) (define-key map [menu-bar inout] (cons "In/Out" (make-sparse-keymap "In/Out"))) (define-key map [menu-bar inout delete-output] (quote ("Delete Current Output Group" . comint-delete-output))) (define-key map [menu-bar inout append-output-to-file] (quote ("Append Current Output Group to File" . comint-append-output-to-file))) (define-key map [menu-bar inout write-output] (quote ("Write Current Output Group to File" . comint-write-output))) (define-key map [menu-bar inout next-prompt] (quote ("Forward Output Group" . comint-next-prompt))) (define-key map [menu-bar inout previous-prompt] (quote ("Backward Output Group" . comint-previous-prompt))) (define-key map [menu-bar inout show-maximum-output] (quote ("Show Maximum Output" . comint-show-maximum-output))) (define-key map [menu-bar inout show-output] (quote ("Show Current Output Group" . comint-show-output))) (define-key map [menu-bar inout kill-input] (quote ("Kill Current Input" . comint-kill-input))) (define-key map [menu-bar inout copy-input] (quote ("Copy Old Input" . comint-copy-old-input))) (define-key map [menu-bar inout history-isearch-backward-regexp] (quote ("Isearch Input Regexp Backward..." . comint-history-isearch-backward-regexp))) (define-key map [menu-bar inout history-isearch-backward] (quote ("Isearch Input String Backward..." . comint-history-isearch-backward))) (define-key map [menu-bar inout forward-matching-history] (quote ("Forward Matching Input..." . comint-forward-matching-input))) (define-key map [menu-bar inout backward-matching-history] (quote ("Backward Matching Input..." . comint-backward-matching-input))) (define-key map [menu-bar inout next-matching-history] (quote ("Next Matching Input..." . comint-next-matching-input))) (define-key map [menu-bar inout previous-matching-history] (quote ("Previous Matching Input..." . comint-previous-matching-input))) (define-key map [menu-bar inout next-matching-history-from-input] (quote ("Next Matching Current Input" . comint-next-matching-input-from-input))) (define-key map [menu-bar inout previous-matching-history-from-input] (quote ("Previous Matching Current Input" . comint-previous-matching-input-from-input))) (define-key map [menu-bar inout next-history] (quote ("Next Input" . comint-next-input))) (define-key map [menu-bar inout previous-history] (quote ("Previous Input" . comint-previous-input))) (define-key map [menu-bar inout list-history] (quote ("List Input History" . comint-dynamic-list-input-ring))) (define-key map [menu-bar inout expand-history] (quote ("Expand History Before Point" . comint-replace-by-expanded-history))) (let ((signals-map (make-sparse-keymap "Signals"))) (define-key map [menu-bar signals] (cons "Signals" signals-map)) (define-key signals-map [eof] (quote ("EOF" . comint-send-eof))) (define-key signals-map [kill] (quote ("KILL" . comint-kill-subjob))) (define-key signals-map [quit] (quote ("QUIT" . comint-quit-subjob))) (define-key signals-map [cont] (quote ("CONT" . comint-continue-subjob))) (define-key signals-map [stop] (quote ("STOP" . comint-stop-subjob))) (define-key signals-map [break] (quote ("BREAK" . comint-interrupt-subjob)))) (setq menu-bar-final-items (append (quote (completion inout signals)) menu-bar-final-items)) map)) nil [18268 24325])
            ("comint-ptyp" variable (:default-value t) nil [24361 24512])
            ("comint-input-ring" variable nil nil [24514 24544])
            ("comint-last-input-start" variable nil nil [24545 24581])
            ("comint-last-input-end" variable nil nil [24582 24616])
            ("comint-last-output-start" variable nil nil [24617 24654])
            ("comint-input-ring-index" variable nil nil [24655 24734])
            ("comint-matching-input-from-input-string" variable nil nil [24735 24836])
            ("comint-save-input-ring-index" variable nil nil [24837 24987])
            ("comint-accum-marker" variable nil nil [24989 25141])
            ("comint-stored-incomplete-input" variable nil nil [25143 25224])
            ("put" code nil nil [25226 25305])
            ("put" code nil nil [25306 25349])
            ("put" code nil nil [25350 25399])
            ("put" code nil nil [25400 25454])
            ("put" code nil nil [25455 25504])
            ("put" code nil nil [25505 25560])
            ("put" code nil nil [25561 25617])
            ("put" code nil nil [25618 25677])
            ("put" code nil nil [25678 25736])
            ("put" code nil nil [25737 25791])
            ("put" code nil nil [25792 25851])
            ("put" code nil nil [25852 25889])
            ("put" code nil nil [25891 25930])
            ("define-derived-mode" code nil nil [25932 30682])
            ("comint-check-proc" function (:arguments ("buffer")) nil [30684 31003])
            ("make-comint-in-buffer" function (:arguments ("name" "buffer" "program" "startfile" "switches")) nil [31020 32345])
            ("make-comint" function (:arguments ("name" "program" "startfile" "switches")) nil [32362 33144])
            ("comint-run" function
               (:user-visible-flag t
                :arguments ("program"))
                nil [33161 33672])
            ("put" code nil nil [33673 33721])
            ("comint-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [33723 35587])
            ("comint-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [35690 37721])
            ("comint-insert-input" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [37723 39527])
            ("comint-read-input-ring" function (:arguments ("silent")) nil [40659 43360])
            ("comint-write-input-ring" function nil nil [43362 44598])
            ("comint-dynamic-list-input-ring-window-conf" variable nil nil [44601 44652])
            ("comint-dynamic-list-input-ring-select" function (:user-visible-flag t) nil [44654 45439])
            ("comint-dynamic-list-input-ring" function (:user-visible-flag t) nil [45441 46777])
            ("comint-regexp-arg" function (:arguments ("prompt")) nil [46780 47341])
            ("comint-search-arg" function (:arguments ("arg")) nil [47343 47765])
            ("comint-restore-input" function (:user-visible-flag t) nil [47767 48078])
            ("comint-search-start" function (:arguments ("arg")) nil [48080 48561])
            ("comint-previous-input-string" function (:arguments ("arg")) nil [48595 48892])
            ("comint-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [48894 49381])
            ("comint-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49383 49511])
            ("comint-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [49513 49810])
            ("comint-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [49812 51012])
            ("comint-delete-input" function nil nil [51014 51299])
            ("comint-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [51301 52263])
            ("comint-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [52265 52658])
            ("comint-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [52660 53523])
            ("comint-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [53525 53893])
            ("comint-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent" "start"))
                nil [53896 54912])
            ("comint-c-a-p-replace-by-expanded-history" function (:arguments ("silent" "start")) nil [54914 55931])
            ("comint-replace-by-expanded-history-before-point" function (:arguments ("silent" "start" "dry-run")) nil [55934 60166])
            ("comint-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60169 60436])
            ("comint-history-isearch" variable nil nil [60475 61177])
            ("comint-history-isearch-backward" function (:user-visible-flag t) nil [61179 61368])
            ("comint-history-isearch-backward-regexp" function (:user-visible-flag t) nil [61370 61585])
            ("defvar-local" code nil nil [61587 61644])
            ("comint-history-isearch-setup" function nil nil [61646 62448])
            ("comint-history-isearch-end" function nil nil [62450 62944])
            ("comint-goto-input" function (:arguments ("pos")) nil [62946 63531])
            ("comint-history-isearch-search" function nil nil [63533 65886])
            ("comint-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [65888 67640])
            ("comint-history-isearch-wrap" function nil nil [67642 68231])
            ("comint-history-isearch-push-state" function nil nil [68233 68547])
            ("comint-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [68549 68749])
            ("comint-within-quotes" function (:arguments ("beg" "end")) nil [68753 69080])
            ("comint-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [69082 69347])
            ("comint-args" function (:arguments ("string" "begin" "end")) nil [69349 70124])
            ("comint-delim-arg" function (:arguments ("arg")) nil [70126 71142])
            ("comint-arguments" function (:arguments ("string" "nth" "mth")) nil [71144 73605])
            ("comint-add-to-input-history" function (:arguments ("cmd")) nil [73640 74310])
            ("comint-send-input" function
               (:user-visible-flag t
                :arguments ("no-newline" "artificial"))
                nil [74312 82442])
            ("comint-preoutput-filter-functions" variable nil nil [82444 83092])
            ("comint-inhibit-carriage-motion" variable nil nil [83094 83254])
            ("comint-last-prompt" variable nil nil [83256 83452])
            ("comint-snapshot-last-prompt" function nil nil [83454 83986])
            ("comint-carriage-motion" function (:arguments ("start" "end")) nil [83988 86238])
            ("comint-output-filter" function (:arguments ("process" "string")) nil [86381 90297])
            ("comint-preinput-scroll-to-bottom" function nil nil [90299 91400])
            ("follow-mode" variable nil nil [91402 91422])
            ("declare-function" code nil nil [91423 91500])
            ("comint-postoutput-scroll-to-bottom" function (:arguments ("_string")) nil [91502 92452])
            ("comint-adjust-window-point" function (:arguments ("window" "process")) nil [92455 93126])
            ("comint-adjust-point" function (:arguments ("selected")) nil [93162 93798])
            ("comint-truncate-buffer" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [93800 94239])
            ("comint-strip-ctrl-m" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [94241 94770])
            ("defalias" code nil nil [94771 94822])
            ("comint-show-maximum-output" function (:user-visible-flag t) nil [94824 94996])
            ("comint-get-old-input-default" function nil nil [94998 95780])
            ("comint-copy-old-input" function (:user-visible-flag t) nil [95782 96176])
            ("comint-skip-prompt" function nil nil [96178 96462])
            ("comint-after-pmark-p" function nil nil [96464 96665])
            ("comint-simple-send" function (:arguments ("proc" "string")) nil [96667 97242])
            ("comint-line-beginning-position" function nil nil [97244 98331])
            ("comint-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98333 98862])
            ("comint-read-noecho" function (:arguments ("prompt" "_ignore")) nil [98886 98962])
            ("send-invisible" function
               (:user-visible-flag t
                :arguments ("prompt"))
                nil [99154 99999])
            ("comint-watch-for-password-prompt" function (:arguments ("string")) nil [100001 100583])
            ("comint-send-string" function (:arguments ("process" "string")) nil [100622 100981])
            ("comint-send-region" function (:arguments ("process" "start" "end")) nil [100983 101348])
            ("comint-delete-output" function (:user-visible-flag t) nil [101377 102021])
            ("comint-write-output" function
               (:user-visible-flag t
                :arguments ("filename" "append" "mustbenew"))
                nil [102023 103124])
            ("comint-append-output-to-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [103261 103503])
            ("comint-show-output" function (:user-visible-flag t) nil [103505 104019])
            ("comint-interrupt-subjob" function (:user-visible-flag t) nil [104022 104283])
            ("comint-kill-subjob" function (:user-visible-flag t) nil [104285 104507])
            ("comint-quit-subjob" function (:user-visible-flag t) nil [104509 104731])
            ("comint-stop-subjob" function (:user-visible-flag t) nil [104733 105210])
            ("comint-continue-subjob" function (:user-visible-flag t) nil [105212 105412])
            ("comint-skip-input" function nil nil [105414 105907])
            ("comint-kill-input" function (:user-visible-flag t) nil [105909 106164])
            ("comint-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [106166 106544])
            ("comint-send-eof" function (:user-visible-flag t) nil [106546 106684])
            ("comint-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [106687 107769])
            ("comint-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [107772 108245])
            ("comint-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [108248 109423])
            ("comint-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [109426 109746])
            ("defvar-local" code nil nil [109813 109878])
            ("defvar-local" code nil nil [109879 109940])
            ("comint-insert-previous-argument" function
               (:user-visible-flag t
                :arguments ("index"))
                nil [110026 112065])
            ("comint-update-fence" function nil nil [112130 113547])
            ("comint-kill-whole-line" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [113549 114221])
            ("comint-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [114223 115803])
            ("comint-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [117287 119002])
            ("comint-check-source" function (:arguments ("fname")) nil [119005 119624])
            ("comint-extract-string" function nil nil [119626 119936])
            ("comint-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [119938 121436])
            ("comint-proc-query" function (:arguments ("proc" "str")) nil [122559 123595])
            ("comint-completion-autolist" variable nil nil [124589 124792])
            ("comint-completion-addsuffix" variable (:default-value t) nil [124794 125337])
            ("comint-completion-recexact" variable nil nil [125339 125616])
            ("comint-completion-fignore" variable nil nil [125618 125912])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [125929 126149])
            ("comint-file-name-chars" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt cygwin))) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-")) nil [126151 126508])
            ("comint-file-name-quote-list" variable nil nil [126510 126657])
            ("comint-directory" function (:arguments ("directory")) nil [126660 126894])
            ("comint-word" function (:arguments ("word-chars")) nil [126897 127940])
            ("comint-substitute-in-file-name" function (:arguments ("filename")) nil [127942 128564])
            ("comint--match-partial-filename" function nil nil [128566 128730])
            ("comint--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [128732 130025])
            ("comint--unquote-argument" function (:arguments ("str")) nil [130027 130112])
            ("define-obsolete-function-alias" code nil nil [130113 130214])
            ("comint-match-partial-filename" function nil nil [130216 130501])
            ("comint-quote-filename" function (:arguments ("filename")) nil [130503 130971])
            ("comint-unquote-filename" function (:arguments ("filename")) nil [130973 131245])
            ("comint--requote-argument" function (:arguments ("upos" "qstr")) nil [131247 131429])
            ("comint-completion-at-point" function nil nil [131431 131540])
            ("define-obsolete-function-alias" code nil nil [131542 131631])
            ("comint-dynamic-complete-filename" function (:user-visible-flag t) nil [131633 132564])
            ("comint-filename-completion" function nil nil [132566 132741])
            ("comint-completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [132743 133452])
            ("comint-unquote-function" variable (:default-value (function comint--unquote-argument)) nil [133454 133631])
            ("comint-requote-function" variable (:default-value (function comint--requote-argument)) nil [133632 133809])
            ("comint--complete-file-name-data" function nil nil [133811 135109])
            ("comint-dynamic-complete-as-filename" function nil nil [135111 135446])
            ("comint-replace-by-expanded-filename" function (:user-visible-flag t) nil [135448 136051])
            ("comint-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [136054 138322])
            ("comint-dynamic-list-filename-completions" function (:user-visible-flag t) nil [138324 138821])
            ("comint-displayed-dynamic-completions" variable nil nil [139033 139082])
            ("comint-dynamic-list-completions-config" variable nil nil [139084 139135])
            ("comint-dynamic-list-completions" function (:arguments ("completions" "common-substring")) nil [139137 142162])
            ("comint-get-next-from-history" function (:user-visible-flag t) nil [142165 142614])
            ("comint-accumulate" function (:user-visible-flag t) nil [142616 143132])
            ("comint-goto-process-mark" function (:user-visible-flag t) nil [143134 143564])
            ("comint-bol-or-process-mark" function (:user-visible-flag t) nil [143566 144321])
            ("comint-set-process-mark" function (:user-visible-flag t) nil [144323 144595])
            ("comint-redirect-verbose" variable nil nil [146843 147044])
            ("comint-redirect-filter-functions" variable nil nil [147105 147748])
            ("comint-redirect-output-buffer" variable nil nil [147773 147869])
            ("comint-redirect-finished-regexp" variable nil nil [147871 148132])
            ("comint-redirect-insert-matching-regexp" variable nil nil [148134 148451])
            ("comint-redirect-echo-input" variable nil nil [148453 148568])
            ("comint-redirect-completed" variable nil nil [148570 148672])
            ("comint-redirect-original-mode-line-process" variable nil nil [148674 148776])
            ("comint-redirect-perform-sanity-check" variable (:default-value t) nil [148778 149279])
            ("comint-redirect-subvert-readonly" variable nil nil [149281 149587])
            ("comint-redirect-previous-input-string" variable nil nil [149589 149788])
            ("comint-redirect-setup" function (:arguments ("output-buffer" "comint-buffer" "finished-regexp" "echo-input")) nil [149926 151093])
            ("comint-redirect-cleanup" function (:user-visible-flag t) nil [151095 151616])
            ("defalias" code nil nil [151717 151788])
            ("comint-redirect-filter" function (:arguments ("orig-filter" "process" "input-string")) nil [151790 152459])
            ("comint-redirect-preoutput-filter" function (:arguments ("input-string")) nil [152462 155021])
            ("comint-redirect-send-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "echo" "no-display"))
                nil [155038 155583])
            ("comint-redirect-send-command-to-process" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "process" "echo" "no-display"))
                nil [155600 157097])
            ("comint-redirect-results-list" function (:arguments ("command" "regexp" "regexp-group")) nil [157114 157461])
            ("comint-redirect-results-list-from-process" function (:arguments ("process" "command" "regexp" "regexp-group")) nil [157478 158576])
            ("comint" package nil nil [162105 162122]))          
      :file "comint.el.gz"
      :pointmax 162148
      :fsize 43836
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "server.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [3513 3530])
            ("server" customgroup (:user-visible-flag t) nil [3533 3612])
            ("server-use-tcp" variable nil nil [3614 4022])
            ("server-host" variable nil nil [4024 4557])
            ("put" code nil nil [4573 4615])
            ("server-port" variable nil nil [4617 4974])
            ("put" code nil nil [4990 5032])
            ("server-auth-dir" variable (:default-value (locate-user-emacs-file "server/")) nil [5034 5499])
            ("put" code nil nil [5515 5561])
            ("server-auth-key" variable nil nil [5563 6659])
            ("server-raise-frame" variable (:default-value t) nil [6661 6801])
            ("server-visit-hook" variable nil nil [6803 6923])
            ("server-switch-hook" variable nil nil [6925 7052])
            ("server-done-hook" variable nil nil [7054 7179])
            ("server-process" variable nil nil [7181 7240])
            ("server-clients" variable nil nil [7242 7332])
            ("server-buffer-clients" variable nil nil [7334 7435])
            ("make-variable-buffer-local" code nil nil [7436 7487])
            ("put" code nil nil [7541 7588])
            ("server-window" variable nil nil [7590 8360])
            ("server-temp-file-regexp" variable (:default-value "^/tmp/Re\\|/draft$") nil [8362 8588])
            ("server-kill-new-buffers" variable (:default-value t) nil [8590 9040])
            ("or" code nil nil [9042 9156])
            ("server-existing-buffer" variable nil nil [9158 9374])
            ("make-variable-buffer-local" code nil nil [9375 9427])
            ("server-name" variable (:default-value "server") nil [9429 9680])
            ("server-socket-dir" variable (:default-value (and (featurep (quote make-network-process) (quote (:family local))) (format "%s/emacs%d" (or (getenv "TMPDIR") "/tmp") (user-uid)))) nil [9784 10042])
            ("server-clients-with" function (:arguments ("property" "value")) nil [10044 10283])
            ("server-add-client" function (:arguments ("proc")) nil [10285 10456])
            ("server-with-environment" function (:arguments ("env" "vars" "body")) nil [10458 11146])
            ("server-delete-client" function (:arguments ("proc" "noframe")) nil [11148 13122])
            ("server-log-time-function" variable (:default-value (quote current-time-string)) nil [13124 13235])
            ("server-buffer" variable
               (:constant-flag t
                :default-value " *server*")
                nil [13237 13533])
            ("server-log" variable nil nil [13535 13634])
            ("server-log" function (:arguments ("string" "client")) nil [13636 14154])
            ("server-sentinel" function (:arguments ("proc" "msg")) nil [14156 15058])
            ("server--on-display-p" function (:arguments ("frame" "display")) nil [15060 15531])
            ("server-select-display" function (:arguments ("display")) nil [15533 16825])
            ("server-unselect-display" function (:arguments ("frame")) nil [16827 17736])
            ("server-handle-delete-frame" function (:arguments ("frame")) nil [17738 18354])
            ("server-handle-suspend-tty" function (:arguments ("terminal")) nil [18399 18850])
            ("server-unquote-arg" function (:arguments ("arg")) nil [18852 19108])
            ("server-quote-arg" function (:arguments ("arg")) nil [19110 19497])
            ("server-send-string" function (:arguments ("proc" "string")) nil [19499 19675])
            ("server-ensure-safe-dir" function (:arguments ("dir")) nil [19677 21086])
            ("server-generate-key" function (:user-visible-flag t) nil [21088 21540])
            ("server-get-auth-key" function nil nil [21542 21965])
            ("server-start" function
               (:user-visible-flag t
                :arguments ("leave-dead" "inhibit-prompt"))
                nil [21982 26363])
            ("server-force-stop" function nil nil [26365 26522])
            ("server-force-delete" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [26539 27240])
            ("server-running-p" function (:arguments ("name")) nil [27242 28143])
            ("define-minor-mode" code nil nil [28160 28728])
            ("server-eval-and-print" function (:arguments ("expr" "proc")) nil [28731 29628])
            ("server-msg-size" variable
               (:constant-flag t
                :default-value 1024)
                nil [29630 29709])
            ("server-reply-print" function (:arguments ("qtext" "proc")) nil [29711 30527])
            ("server-create-tty-frame" function (:arguments ("tty" "type" "proc")) nil [30529 32234])
            ("server-create-window-system-frame" function (:arguments ("display" "nowait" "proc" "parent-id" "parameters")) nil [32236 34295])
            ("server-goto-toplevel" function (:arguments ("proc")) nil [34297 35162])
            ("server-execute-continuation" function (:arguments ("proc")) nil [35583 35785])
            ("cl-defun" code nil nil [35787 48324])
            ("server-execute" function (:arguments ("proc" "files" "nowait" "commands" "dontkill" "frame" "tty-name")) nil [48326 50735])
            ("server-return-error" function (:arguments ("proc" "err")) nil [50737 51136])
            ("server-goto-line-column" function (:arguments ("line-col")) nil [51138 51479])
            ("server-visit-files" function (:arguments ("files" "proc" "nowait")) nil [51481 53887])
            ("server-kill-buffer-running" variable nil nil [53889 54003])
            ("server-buffer-done" function (:arguments ("buffer" "for-killing")) nil [54005 56458])
            ("server-temp-file-p" function (:arguments ("buffer")) nil [56460 56874])
            ("server-done" function nil nil [56876 57693])
            ("server-kill-buffer-query-function" function nil nil [57895 58328])
            ("server-kill-emacs-query-function" function nil nil [58330 58703])
            ("server-kill-buffer" function nil nil [58705 59115])
            ("server-edit" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [59118 60191])
            ("server-switch-buffer" function (:arguments ("next-buffer" "killed-one" "filepos")) nil [60193 63184])
            ("server-save-buffers-kill-terminal" function (:arguments ("arg")) nil [63201 64288])
            ("define-key" code nil nil [64290 64329])
            ("server-unload-function" function nil nil [64331 64656])
            ("server-eval-at" function (:arguments ("server" "form")) nil [64658 66778])
            ("server" package nil nil [66782 66799]))          
      :file "server.el.gz"
      :pointmax 66825
      :fsize 20588
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 3530 . 3531) (symbol 3495 . 3512) (open-paren 3494 . 3495)))
    (semanticdb-table "bindings.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [928 1263])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1266 1471])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1473 1732])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1734 1924])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1926 2371])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2373 2981])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2983 3333])
            ("mode-line-eol-desc-cache" variable nil nil [3335 3372])
            ("mode-line-eol-desc" function nil nil [3374 4253])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4281 4821])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4823 5108])
            ("put" code nil nil [5109 5161])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5163 5615])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5617 6539])
            ("put" code nil nil [6555 6605])
            ("make-variable-buffer-local" code nil nil [6606 6655])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6657 6868])
            ("put" code nil nil [6884 6931])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6933 7208])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7210 7470])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7472 7990])
            ("put" code nil nil [8006 8055])
            ("make-variable-buffer-local" code nil nil [8056 8104])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (if (stringp default-directory) (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory) "Current directory is nil")))))))) nil [8106 8616])
            ("put" code nil nil [8632 8679])
            ("make-variable-buffer-local" code nil nil [8680 8726])
            ("mode-line-frame-control" function nil nil [8796 9033])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9143 9272])
            ("put" code nil nil [9288 9349])
            ("mode-line-process" variable nil nil [9351 9510])
            ("put" code nil nil [9526 9574])
            ("make-variable-buffer-local" code nil nil [9575 9622])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9624 10375])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10377 10486])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10488 10879])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [10881 11271])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11273 12283])
            ("put" code nil nil [12284 12330])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12332 13041])
            ("mode-line-position" variable (:default-value (\` ((-3 (\, (propertize "%p" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu"))) (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))))))))) nil [13043 14479])
            ("put" code nil nil [14480 14529])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [14531 15264])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [15266 15750])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [15752 16065])
            ("put" code nil nil [16081 16143])
            ("make-variable-buffer-local" code nil nil [16144 16205])
            ("mode-line-misc-info" variable (:default-value (quote ((which-func-mode ("" which-func-format " ")) (global-mode-string ("" global-mode-string " "))))) nil [16207 16489])
            ("put" code nil nil [16490 16540])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [16542 16675])
            ("put" code nil nil [16676 16727])
            ("let" code nil nil [16792 17357])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17361 17540])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17542 17739])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [17741 17908])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17910 18107])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [18109 18318])
            ("bound-and-true-p" function (:arguments ("var")) nil [18320 18450])
            ("bindings--define-key" code nil nil [18569 18790])
            ("bindings--define-key" code nil nil [18791 19039])
            ("bindings--define-key" code nil nil [19040 19305])
            ("bindings--define-key" code nil nil [19306 19535])
            ("bindings--define-key" code nil nil [19536 19775])
            ("bindings--define-key" code nil nil [19776 19950])
            ("bindings--define-key" code nil nil [19951 20156])
            ("bindings--define-key" code nil nil [20157 20451])
            ("bindings--define-key" code nil nil [20452 20692])
            ("bindings--define-key" code nil nil [20693 20893])
            ("bindings--define-key" code nil nil [20894 21084])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [21086 21325])
            ("minor-mode-alist" variable nil nil [21327 21624])
            ("put" code nil nil [21640 21687])
            ("setq" code nil nil [21758 21965])
            ("setq" code nil nil [22250 23512])
            ("setq" code nil nil [23548 23690])
            ("setq" code nil nil [23804 24193])
            ("make-variable-buffer-local" code nil nil [24195 24241])
            ("mapc" code nil nil [24497 24863])
            ("base64" package nil nil [24921 24938])
            ("md5" package nil nil [24939 24953])
            ("sha1" package nil nil [24954 24969])
            ("overlay" package nil nil [24970 25018])
            ("text-properties" package nil nil [25019 25089])
            ("define-key" code nil nil [25091 25133])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25135 25514])
            ("garbage-collect" code nil nil [25632 25649])
            ("setq" code nil nil [25653 25690])
            ("make-variable-buffer-local" code nil nil [25692 25753])
            ("global-set-key" code nil nil [25771 25823])
            ("global-set-key" code nil nil [25824 25878])
            ("global-set-key" code nil nil [26074 26126])
            ("global-set-key" code nil nil [26127 26173])
            ("global-set-key" code nil nil [26174 26225])
            ("put" code nil nil [26311 26346])
            ("visual-order-cursor-movement" variable nil nil [26399 27103])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27105 27861])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27863 28618])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [28620 29234])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [29236 29849])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [29851 29926])
            ("define-key" code nil nil [29927 29964])
            ("define-key" code nil nil [29966 30011])
            ("define-key" code nil nil [30012 30046])
            ("define-key" code nil nil [30060 30114])
            ("define-key" code nil nil [30115 30160])
            ("substitute-key-definition" code nil nil [30269 30337])
            ("define-key" code nil nil [30339 30378])
            ("define-key" code nil nil [30379 30420])
            ("define-key" code nil nil [30421 30460])
            ("define-key" code nil nil [30461 30506])
            ("define-key" code nil nil [30507 30551])
            ("define-key" code nil nil [30552 30602])
            ("define-key" code nil nil [30603 30648])
            ("define-key" code nil nil [30649 30698])
            ("define-key" code nil nil [30699 30739])
            ("define-key" code nil nil [30740 30777])
            ("define-key" code nil nil [30778 30822])
            ("define-key" code nil nil [30823 30871])
            ("define-key" code nil nil [30872 30913])
            ("define-key" code nil nil [30987 31031])
            ("define-key" code nil nil [31098 31151])
            ("define-key" code nil nil [31185 31238])
            ("define-key" code nil nil [31239 31271])
            ("put" code nil nil [31272 31314])
            ("define-key" code nil nil [31385 31422])
            ("define-key" code nil nil [31423 31459])
            ("define-key" code nil nil [31638 31677])
            ("define-key" code nil nil [31678 31727])
            ("define-key" code nil nil [31728 31773])
            ("define-key" code nil nil [31775 31818])
            ("define-key" code nil nil [31819 31864])
            ("define-key" code nil nil [31865 31915])
            ("define-key" code nil nil [31916 31962])
            ("define-key" code nil nil [31963 32011])
            ("define-key" code nil nil [32012 32063])
            ("let" code nil nil [32065 32952])
            ("define-key" code nil nil [32954 33004])
            ("let" code nil nil [33005 33119])
            ("define-key" code nil nil [33120 33163])
            ("let" code nil nil [33190 33318])
            ("define-key" code nil nil [33319 33369])
            ("let" code nil nil [33401 33526])
            ("define-key" code nil nil [33527 33580])
            ("define-key" code nil nil [33636 33688])
            ("define-key" code nil nil [33971 34014])
            ("define-key" code nil nil [34016 34057])
            ("define-key" code nil nil [34058 34101])
            ("define-key" code nil nil [34102 34142])
            ("define-key" code nil nil [34143 34188])
            ("define-key" code nil nil [34189 34225])
            ("define-key" code nil nil [34226 34260])
            ("define-key" code nil nil [34311 34359])
            ("define-key" code nil nil [34417 34466])
            ("put" code nil nil [34467 34518])
            ("define-key" code nil nil [34520 34574])
            ("define-key" code nil nil [34575 34621])
            ("define-key" code nil nil [34622 34669])
            ("define-key" code nil nil [34670 34717])
            ("define-key" code nil nil [34719 34760])
            ("define-key" code nil nil [34761 34806])
            ("define-key" code nil nil [34807 34853])
            ("define-key" code nil nil [34854 34908])
            ("define-key" code nil nil [34909 34957])
            ("define-key" code nil nil [34959 34997])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [34999 35073])
            ("define-key" code nil nil [35074 35107])
            ("define-key" code nil nil [35109 35148])
            ("define-key" code nil nil [35149 35188])
            ("define-key" code nil nil [35189 35228])
            ("define-key" code nil nil [35229 35269])
            ("define-key" code nil nil [35270 35310])
            ("define-key" code nil nil [35311 35355])
            ("define-key" code nil nil [35356 35400])
            ("define-key" code nil nil [35401 35445])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [35447 35527])
            ("define-key" code nil nil [35528 35563])
            ("define-key" code nil nil [35565 35600])
            ("define-key" code nil nil [35601 35647])
            ("define-key" code nil nil [35648 35694])
            ("define-key" code nil nil [35695 35756])
            ("define-key" code nil nil [35757 35812])
            ("define-key" code nil nil [35813 35861])
            ("define-key" code nil nil [35862 35913])
            ("define-key" code nil nil [35914 35978])
            ("define-key" code nil nil [36088 36144])
            ("define-key" code nil nil [36145 36191])
            ("define-key" code nil nil [36388 36445])
            ("define-key" code nil nil [36446 36501])
            ("define-key" code nil nil [36502 36556])
            ("define-key" code nil nil [36557 36624])
            ("define-key" code nil nil [36625 36690])
            ("define-key" code nil nil [36691 36733])
            ("define-key" code nil nil [36734 36778])
            ("define-key" code nil nil [36779 36823])
            ("define-key" code nil nil [36824 36866])
            ("define-key" code nil nil [36867 36920])
            ("define-key" code nil nil [36921 36971])
            ("define-key" code nil nil [36972 37023])
            ("define-key" code nil nil [37024 37076])
            ("define-key" code nil nil [37077 37124])
            ("put" code nil nil [37125 37155])
            ("define-key" code nil nil [37156 37202])
            ("define-key" code nil nil [37203 37257])
            ("define-key" code nil nil [37258 37310])
            ("define-key" code nil nil [37311 37370])
            ("define-key" code nil nil [37371 37429])
            ("define-key" code nil nil [37430 37488])
            ("define-key" code nil nil [37489 37537])
            ("define-key" code nil nil [37538 37585])
            ("define-key" code nil nil [37586 37646])
            ("define-key" code nil nil [37647 37705])
            ("define-key" code nil nil [37706 37759])
            ("define-key" code nil nil [37760 37827])
            ("define-key" code nil nil [37828 37894])
            ("define-key" code nil nil [38006 38065])
            ("define-key" code nil nil [38066 38115])
            ("define-key" code nil nil [38116 38166])
            ("define-key" code nil nil [38167 38207])
            ("define-key" code nil nil [38306 38358])
            ("define-key" code nil nil [38359 38413])
            ("define-key" code nil nil [38414 38458])
            ("define-key" code nil nil [38459 38496])
            ("define-key" code nil nil [38497 38552])
            ("define-key" code nil nil [38553 38609])
            ("define-key" code nil nil [38625 38667])
            ("define-key" code nil nil [38899 38946])
            ("define-key" code nil nil [38947 38994])
            ("define-key" code nil nil [38995 39052])
            ("let" code nil nil [43013 43859])
            ("define-key" code nil nil [43861 43910])
            ("define-key" code nil nil [43911 43957])
            ("define-key" code nil nil [43958 44007])
            ("define-key" code nil nil [45174 45220])
            ("define-key" code nil nil [45342 45389])
            ("define-key" code nil nil [45391 45439])
            ("define-key" code nil nil [45441 45488])
            ("define-key" code nil nil [45489 45530])
            ("define-key" code nil nil [45531 45575])
            ("define-key" code nil nil [45576 45622])
            ("define-key" code nil nil [45624 45662])
            ("define-key" code nil nil [45663 45712])
            ("define-key" code nil nil [45713 45765])
            ("define-key" code nil nil [45766 45812])
            ("define-key" code nil nil [45813 45856])
            ("define-key" code nil nil [45857 45906])
            ("define-key" code nil nil [45908 45943])
            ("define-key" code nil nil [45944 45982])
            ("define-key" code nil nil [45983 46022])
            ("define-key" code nil nil [46023 46058])
            ("define-key" code nil nil [46059 46106])
            ("define-key" code nil nil [46108 46153])
            ("define-key" code nil nil [46154 46193])
            ("define-key" code nil nil [46194 46239])
            ("define-key" code nil nil [46240 46290])
            ("defalias" code nil nil [46292 46353])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [46354 46469])
            ("define-key" code nil nil [46470 46530])
            ("global-set-key" code nil nil [46532 46571])
            ("define-key" code nil nil [46572 46614])
            ("global-set-key" code nil nil [46615 46653])
            ("define-key" code nil nil [46654 46696])
            ("global-set-key" code nil nil [46773 46812])
            ("global-set-key" code nil nil [46813 46851])
            ("global-set-key" code nil nil [46911 46949])
            ("global-set-key" code nil nil [46950 47000])
            ("global-set-key" code nil nil [47061 47101])
            ("global-set-key" code nil nil [47103 47148])
            ("define-key" code nil nil [47149 47194])
            ("global-set-key" code nil nil [47195 47239])
            ("define-key" code nil nil [47240 47284])
            ("global-set-key" code nil nil [47285 47333])
            ("define-key" code nil nil [47334 47382])
            ("global-set-key" code nil nil [47383 47424])
            ("define-key" code nil nil [47425 47466])
            ("global-set-key" code nil nil [47467 47517])
            ("define-key" code nil nil [47518 47568])
            ("global-set-key" code nil nil [47569 47613])
            ("define-key" code nil nil [47614 47658])
            ("define-key" code nil nil [47660 47701])
            ("define-key" code nil nil [47702 47744])
            ("define-key" code nil nil [47745 47790])
            ("define-key" code nil nil [47791 47829])
            ("define-key" code nil nil [47830 47870])
            ("define-key" code nil nil [47871 47909])
            ("define-key" code nil nil [47910 47948])
            ("define-key" code nil nil [48166 48217])
            ("define-key" code nil nil [48218 48272])
            ("define-key" code nil nil [48273 48314])
            ("define-key" code nil nil [48315 48357])
            ("define-key" code nil nil [48358 48405])
            ("define-key" code nil nil [48406 48447])
            ("define-key" code nil nil [48448 48487])
            ("define-key" code nil nil [48488 48532])
            ("define-key" code nil nil [48533 48577])
            ("define-key" code nil nil [48578 48632])
            ("define-key" code nil nil [48634 48679])
            ("define-key" code nil nil [48681 48721])
            ("define-key" code nil nil [48722 48777])
            ("define-key" code nil nil [48778 48832])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frameset-to-register)) map)) nil [48836 49892])
            ("define-key" code nil nil [49893 49931])
            ("define-key" code nil nil [49933 49973])
            ("define-key" code nil nil [49974 50017])
            ("define-key" code nil nil [50020 50064])
            ("define-key" code nil nil [50065 50108])
            ("define-key" code nil nil [50109 50149])
            ("define-key" code nil nil [50150 50193])
            ("define-key" code nil nil [50194 50236])
            ("define-key" code nil nil [50237 50276])
            ("define-key" code nil nil [50277 50330])
            ("define-key" code nil nil [50332 50373])
            ("define-key" code nil nil [50374 50414])
            ("define-key" code nil nil [50415 50455])
            ("define-key" code nil nil [50456 50500])
            ("define-key" code nil nil [50501 50544])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [50593 50665])
            ("define-key" code nil nil [50666 50703])
            ("define-key" code nil nil [50705 50749])
            ("define-key" code nil nil [50750 50797])
            ("define-key" code nil nil [50798 50844])
            ("define-key" code nil nil [50845 50889])
            ("define-key" code nil nil [50890 50945])
            ("define-key" code nil nil [50946 50999])
            ("define-key" code nil nil [51061 51115])
            ("define-key" code nil nil [51116 51158])
            ("define-key" code nil nil [51159 51201])
            ("define-key" code nil nil [51418 51462])
            ("define-key" code nil nil [51463 51504])
            ("define-key" code nil nil [51505 51548])
            ("define-key" code nil nil [51550 51584])
            ("define-key" code nil nil [51586 51632])
            ("define-key" code nil nil [51634 51697])
            ("define-key" code nil nil [51698 51762])
            ("define-key" code nil nil [51783 51831])
            ("define-key" code nil nil [51832 51880]))          
      :file "bindings.el.gz"
      :pointmax 52012
      :fsize 13047
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "thingatpt.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("thingatpt" package nil nil [1992 2012])
            ("forward-thing" function (:arguments ("thing" "n")) nil [2048 2563])
            ("bounds-of-thing-at-point" function (:arguments ("thing")) nil [2601 4635])
            ("thing-at-point" function (:arguments ("thing" "no-properties")) nil [4652 5496])
            ("beginning-of-thing" function (:arguments ("thing")) nil [5522 5788])
            ("end-of-thing" function (:arguments ("thing")) nil [5790 6044])
            ("put" code nil nil [6177 6269])
            ("in-string-p" function nil nil [6282 6502])
            ("end-of-sexp" function nil nil [6504 6775])
            ("put" code nil nil [6777 6809])
            ("beginning-of-sexp" function nil nil [6811 7101])
            ("put" code nil nil [7103 7147])
            ("put" code nil nil [7160 7237])
            ("thing-at-point-bounds-of-list-at-point" function nil nil [7239 7742])
            ("put" code nil nil [7755 7801])
            ("put" code nil nil [7802 7842])
            ("put" code nil nil [7843 7883])
            ("thing-at-point-file-name-chars" variable (:default-value "-~/[:alnum:]_.${}#%,:") nil [7900 8002])
            ("put" code nil nil [8004 8134])
            ("put" code nil nil [8135 8324])
            ("thing-at-point-beginning-of-url-regexp" variable nil nil [8336 8507])
            ("thing-at-point-url-path-regexp" variable (:default-value "[^]	
 \"'<>[^`{}]*[^]	
 \"'<>[^`{}.,;]+") nil [8509 8663])
            ("thing-at-point-short-url-regexp" variable (:default-value (concat "[-A-Za-z0-9]+\\.[-A-Za-z0-9.]+" thing-at-point-url-path-regexp)) nil [8665 8834])
            ("thing-at-point-uri-schemes" variable (:default-value (quote ("aaa://" "about:" "acap://" "apt:" "bzr://" "bzr+ssh://" "attachment:/" "chrome://" "cid:" "content://" "crid://" "cvs://" "data:" "dav:" "dict://" "doi:" "dns:" "dtn:" "feed:" "file:/" "finger://" "fish://" "ftp://" "geo:" "git://" "go:" "gopher://" "h323:" "http://" "https://" "im:" "imap://" "info:" "ipp:" "irc://" "irc6://" "ircs://" "iris.beep:" "jar:" "ldap://" "ldaps://" "mailto:" "mid:" "mtqp://" "mupdate://" "news:" "nfs://" "nntp://" "opaquelocktoken:" "pop://" "pres:" "resource://" "rmi://" "rsync://" "rtsp://" "rtspu://" "service:" "sftp://" "sip:" "sips:" "smb://" "sms:" "snmp://" "soap.beep://" "soap.beeps://" "ssh://" "svn://" "svn+ssh://" "tag:" "tel:" "telnet://" "tftp://" "tip://" "tn3270://" "udp://" "urn:" "uuid:" "vemmi://" "webcal://" "xri://" "xmlrpc.beep://" "xmlrpc.beeps://" "z39.50r://" "z39.50s://" "xmpp:" "fax:" "mms://" "mmsh://" "modem:" "prospero:" "snews:" "wais://"))) nil [8836 10173])
            ("thing-at-point-markedup-url-regexp" variable (:default-value "<URL:\\([^<>
]+\\)>") nil [10175 10460])
            ("thing-at-point-newsgroup-regexp" variable (:default-value "\\`[[:lower:]]+\\.[-+[:lower:]_0-9.]+\\'") nil [10462 10585])
            ("thing-at-point-newsgroup-heads" variable (:default-value (quote ("alt" "comp" "gnu" "misc" "news" "sci" "soc" "talk"))) nil [10587 10748])
            ("thing-at-point-default-mail-uri-scheme" variable (:default-value "mailto") nil [10750 10919])
            ("put" code nil nil [10921 10996])
            ("thing-at-point-bounds-of-url-at-point" function (:arguments ("lax")) nil [10998 12199])
            ("thing-at-point--bounds-of-markedup-url" function nil nil [12201 12710])
            ("thing-at-point--bounds-of-well-formed-url" function (:arguments ("beg" "end" "_pt")) nil [12712 13806])
            ("put" code nil nil [13808 13863])
            ("thing-at-point-url-at-point" function (:arguments ("lax" "bounds")) nil [13865 16299])
            ("thing-at-point-newsgroup-p" function (:arguments ("string")) nil [16301 17194])
            ("put" code nil nil [17196 17246])
            ("put" code nil nil [17248 17304])
            ("thing-at-point-looking-at" function (:arguments ("regexp" "distance")) nil [17709 18922])
            ("thing-at-point-email-regexp" variable (:default-value "<?[-+_.~a-zA-Z][-+_.~:a-zA-Z0-9]*@[-.a-zA-Z0-9]+>?") nil [18945 19190])
            ("put" code nil nil [19433 19726])
            ("put" code nil nil [19728 19966])
            ("put" code nil nil [19980 20037])
            ("put" code nil nil [20038 20101])
            ("word-at-point" function nil nil [20116 20218])
            ("sentence-at-point" function nil nil [20220 20334])
            ("read-from-whole-string" function (:arguments ("str")) nil [20336 20789])
            ("form-at-point" function (:arguments ("thing" "pred")) nil [20791 20979])
            ("sexp-at-point" function nil nil [20996 21099])
            ("symbol-at-point" function nil nil [21115 21271])
            ("number-at-point" function nil nil [21287 21403])
            ("put" code nil nil [21404 21450])
            ("list-at-point" function nil nil [21466 21581]))          
      :file "thingatpt.el.gz"
      :pointmax 21610
      :fsize 7025
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "menu-bar.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1056 1091])
            ("cua-enable-cua-keys" variable nil nil [1135 1163])
            ("or" code nil nil [1277 1387])
            ("setq" code nil nil [1541 1581])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1709 1772])
            ("define-obsolete-variable-alias" code nil nil [1840 1922])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [1923 8903])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [8905 9235])
            ("menu-bar-last-search-type" variable nil nil [9267 9375])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9377 9773])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [9775 10175])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10177 10490])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10492 10817])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10819 11158])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11160 11511])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [11558 12375])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12377 14841])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [14873 15864])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] menu-bar-separator) (bindings--define-key menu [apropos-tags] (quote (menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [next-tag-otherw] (quote (menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window"))) (bindings--define-key menu [next-tag] (quote (menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name"))) (bindings--define-key menu [find-tag-otherw] (quote (menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [find-tag] (quote (menu-item "Find Tag..." find-tag :help "Find definition of function or variable"))) (bindings--define-key menu [separator-tags] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [15910 18081])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18084 18138])
            ("fset" code nil nil [18139 18181])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (quote (menu-item "Paste" yank :enable (and (or (and (fboundp (quote x-selection-exists-p)) (x-selection-exists-p (quote CLIPBOARD))) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18183 22315])
            ("menu-bar-next-tag-other-window" function (:user-visible-flag t) nil [22317 22465])
            ("menu-bar-next-tag" function (:user-visible-flag t) nil [22467 22589])
            ("define-obsolete-function-alias" code nil nil [22591 22673])
            ("put" code nil nil [22817 22905])
            ("put" code nil nil [22906 22963])
            ("put" code nil nil [22964 23154])
            ("clipboard-yank" function (:user-visible-flag t) nil [23156 23323])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23325 23542])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23544 23749])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [23751 24374])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24406 26671])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [26744 27195])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27197 28405])
            ("menu-set-font" function (:user-visible-flag t) nil [28453 28682])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [28684 30769])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [30878 31058])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [31060 31285])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [31287 31498])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [31500 31685])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [31687 31869])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [31871 32041])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [32043 34455])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [34457 34608])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [34610 34796])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [34798 34995])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [34997 35192])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [35194 35365])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [35367 37391])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [37393 37549])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [37551 37704])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [37706 37829])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll-bar"))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)))) menu)) nil [37831 39029])
            ("menu-bar-frame-for-menubar" function nil nil [39031 39214])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [39216 39336])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [39338 39486])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [39487 39639])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [39640 39801])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [39802 39966])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [39967 40125])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [40126 40293])
            ("when" code nil nil [40295 43074])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll-bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool-bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool-bar" toggle-tool-bar-mode-from-frame :help "Turn tool-bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [43076 46723])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [46725 48822])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place) (not (symbol-value (quote save-place)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote post-forward-angle-brackets))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case for Search" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [48824 54259])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [land] (quote (menu-item "Landmark" landmark :help "Watch a neural-network robot learn landmarks"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [54290 56378])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [56380 58721])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [58723 58850])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] (quote (menu-item "Browse the Web..." browse-web))) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Search" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message"))) (bindings--define-key menu [rmail] (quote (menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [58852 62913])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [62942 65782])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [65784 65907])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [65909 66045])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [66047 66186])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [66188 66359])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [66361 66542])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [66544 68765])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [68767 70041])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [70043 70191])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [70193 73940])
            ("bindings--define-key" code nil nil [73942 74029])
            ("bindings--define-key" code nil nil [74030 74124])
            ("bindings--define-key" code nil nil [74125 74218])
            ("bindings--define-key" code nil nil [74219 74303])
            ("bindings--define-key" code nil nil [74304 74388])
            ("bindings--define-key" code nil nil [74389 74489])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [74491 74795])
            ("menu-bar-non-minibuffer-window-p" function nil nil [74797 75243])
            ("kill-this-buffer" function (:user-visible-flag t) nil [75245 75677])
            ("kill-this-buffer-enabled-p" function nil nil [75679 76147])
            ("put" code nil nil [76149 76210])
            ("delete-frame-enabled-p" function nil nil [76285 76570])
            ("yank-menu-length" variable (:default-value 20) nil [76572 76683])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [76685 77676])
            ("put" code nil nil [77678 77724])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [77725 77965])
            ("buffers-menu-max-size" variable (:default-value 10) nil [77987 78331])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [78333 78682])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [78684 79428])
            ("buffers-menu-show-status" variable (:default-value t) nil [79430 79803])
            ("list-buffers-directory" variable nil nil [79805 79914])
            ("make-variable-buffer-local" code nil nil [79915 79967])
            ("menu-bar-select-buffer" function nil nil [79969 80058])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [80060 80171])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [80173 81043])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [81112 81162])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [81164 81352])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [81354 85519])
            ("add-hook" code nil nil [85521 85578])
            ("menu-bar-update-buffers" code nil nil [85580 85605])
            ("dolist" code nil nil [86228 86524])
            ("let" code nil nil [86526 87015])
            ("let" code nil nil [87017 88086])
            ("define-minor-mode" code nil nil [88089 89448])
            ("put" code nil nil [89892 89933])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [89935 90341])
            ("declare-function" code nil nil [90343 90408])
            ("declare-function" code nil nil [90409 90478])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [90480 93531])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [93533 94245])
            ("tty-menu-open-use-tmm" variable nil nil [94247 94708])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [94710 94861])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [94863 96314])
            ("global-set-key" code nil nil [96316 96353])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind (quote ((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit)))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] (quote tty-menu-exit)) (define-key map [18] (quote tty-menu-select)) (define-key map [10] (quote tty-menu-select)) (define-key map [return] (quote tty-menu-select)) (define-key map [linefeed] (quote tty-menu-select)) (define-key map [mouse-1] (quote tty-menu-select)) (define-key map [drag-mouse-1] (quote tty-menu-select)) (define-key map [mouse-2] (quote tty-menu-select)) (define-key map [drag-mouse-2] (quote tty-menu-select)) (define-key map [mouse-3] (quote tty-menu-select)) (define-key map [drag-mouse-3] (quote tty-menu-select)) (define-key map [wheel-down] (quote tty-menu-next-item)) (define-key map [wheel-up] (quote tty-menu-prev-item)) (define-key map [wheel-left] (quote tty-menu-prev-menu)) (define-key map [wheel-right] (quote tty-menu-next-menu)) (define-key map [S-mouse-1] (quote tty-menu-next-item)) (define-key map [S-drag-mouse-1] (quote tty-menu-next-item)) (define-key map [S-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-mouse-3] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-3] (quote tty-menu-prev-item)) (define-key map [header-line mouse-1] (quote tty-menu-select)) (define-key map [header-line drag-mouse-1] (quote tty-menu-select)) (define-key map [mode-line down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-3] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [mouse-movement] (quote tty-menu-mouse-movement)) map)) nil [96355 99900])
            ("menu-bar" package nil nil [99902 99921]))          
      :file "menu-bar.el.gz"
      :pointmax 99949
      :fsize 21847
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "select.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("selection-coding-system" variable nil nil [938 2318])
            ("next-selection-coding-system" variable nil nil [2320 2681])
            ("declare-function" code nil nil [2683 2803])
            ("define-obsolete-function-alias" code nil nil [2840 2919])
            ("x-get-selection" function (:arguments ("type" "data-type")) nil [2921 4377])
            ("x-get-clipboard" function nil nil [4379 4494])
            ("declare-function" code nil nil [4496 4604])
            ("declare-function" code nil nil [4605 4703])
            ("x-set-selection" function
               (:user-visible-flag t
                :arguments ("type" "data"))
                nil [4705 6520])
            ("x-valid-simple-selection-p" function (:arguments ("data")) nil [6522 6965])
            ("xselect--selection-bounds" function (:arguments ("value")) nil [7161 7955])
            ("xselect--int-to-cons" function (:arguments ("n")) nil [7957 8027])
            ("xselect--encode-string" function (:arguments ("type" "str" "can-modify")) nil [8029 10482])
            ("xselect-convert-to-string" function (:arguments ("_selection" "type" "value")) nil [10484 10784])
            ("xselect-convert-to-length" function (:arguments ("_selection" "_type" "value")) nil [10786 11045])
            ("xselect-convert-to-targets" function (:arguments ("_selection" "_type" "_value")) nil [11047 11560])
            ("xselect-convert-to-delete" function (:arguments ("selection" "_type" "_value")) nil [11562 11904])
            ("xselect-convert-to-filename" function (:arguments ("_selection" "_type" "value")) nil [11906 12090])
            ("xselect-convert-to-charpos" function (:arguments ("_selection" "_type" "value")) nil [12092 12392])
            ("xselect-convert-to-lineno" function (:arguments ("_selection" "_type" "value")) nil [12394 12753])
            ("xselect-convert-to-colno" function (:arguments ("_selection" "_type" "value")) nil [12755 13145])
            ("xselect-convert-to-os" function (:arguments ("_selection" "_type" "_size")) nil [13147 13260])
            ("xselect-convert-to-host" function (:arguments ("_selection" "_type" "_size")) nil [13262 13365])
            ("xselect-convert-to-user" function (:arguments ("_selection" "_type" "_size")) nil [13367 13473])
            ("xselect-convert-to-class" function (:arguments ("_selection" "_type" "_size")) nil [13475 13618])
            ("xselect-convert-to-name" function (:arguments ("_selection" "_type" "_size")) nil [13754 13895])
            ("xselect-convert-to-integer" function (:arguments ("_selection" "_type" "value")) nil [13897 14017])
            ("xselect-convert-to-atom" function (:arguments ("_selection" "_type" "value")) nil [14019 14105])
            ("xselect-convert-to-identity" function (:arguments ("_selection" "_type" "value")) nil [14107 14202])
            ("xselect-convert-to-save-targets" function (:arguments ("selection" "_type" "_value")) nil [14322 14431])
            ("setq" code nil nil [14433 15284])
            ("select" package nil nil [15286 15303]))          
      :file "select.el.gz"
      :pointmax 15329
      :fsize 4884
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ses.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("unsafep" include nil nil [2384 2402])
            ("cl-lib" include nil nil [2422 2439])
            ("ses" customgroup (:user-visible-flag t) nil [2633 2790])
            ("ses-initial-size" variable (:default-value (quote (1 . 1))) nil [2792 2979])
            ("ses-initial-column-width" variable (:default-value 7) nil [2981 3146])
            ("ses-initial-default-printer" variable (:default-value "%.7g") nil [3148 3344])
            ("ses-after-entry-functions" variable (:default-value (quote (forward-char))) nil [3346 3644])
            ("ses-mode-hook" variable nil nil [3646 3756])
            ("ses-read-cell-history" variable nil nil [3952 4032])
            ("ses-read-printer-history" variable nil nil [4034 4126])
            ("easy-menu-define" code nil nil [4128 4374])
            ("ses-mode-map" variable
               (:constant-flag t
                :default-value (let ((keys (\` ("\214" ses-reconstruct-all "" ses-recalculate-all "" ses-renarrow-buffer "" ses-recalculate-cell "\223" ses-sort-column "\210" ses-set-header-row "" ses-truncate-cell "
" ses-jump "" ses-read-default-printer "\214" ses-reprint-all [33554444] ses-reprint-all [header-line down-mouse-3] (\, ses-header-line-menu) [header-line mouse-2] ses-sort-column-click))) (newmap (make-sparse-keymap))) (while keys (define-key (1value newmap) (car keys) (cadr keys)) (setq keys (cddr keys))) newmap))
                nil [4376 5084])
            ("easy-menu-define" code nil nil [5086 5807])
            ("ses-mode-edit-map" variable
               (:constant-flag t
                :default-value (let ((keys (quote ("" ses-insert-range "" ses-insert-ses-range [S-mouse-3] ses-insert-range-click [C-S-mouse-3] ses-insert-ses-range-click "\211" lisp-complete-symbol))) (newmap (make-sparse-keymap))) (set-keymap-parent newmap minibuffer-local-map) (while keys (define-key newmap (pop keys) (pop keys))) newmap))
                nil [5809 6253])
            ("defalias" code nil nil [6288 8089])
            ("ses-mode-print-map" variable
               (:constant-flag t
                :default-value (symbol-function (quote ses-mode-print-map)))
                nil [8154 8221])
            ("defalias" code nil nil [8251 8464])
            ("ses-print-data-boundary" variable
               (:constant-flag t
                :default-value "

")
                nil [8466 8585])
            ("ses-initial-global-parameters" variable
               (:constant-flag t
                :default-value "
( ;Global parameters (these are read first)
 2 ;SES file-format
 1 ;numrows
 1 ;numcols
)

")
                nil [8587 8811])
            ("ses-initial-file-trailer" variable
               (:constant-flag t
                :default-value ";; Local Variables:
;; mode: ses
;; End:
")
                nil [8813 8971])
            ("ses-initial-file-contents" variable
               (:constant-flag t
                :default-value (concat "       
" ses-print-data-boundary "(ses-cell A1 nil nil nil nil)
" "
" "(ses-column-widths [7])
" "(ses-column-printers [nil])
" "(ses-default-printer \"%.7g\")
" "(ses-header-row 0)
" ses-initial-global-parameters ses-initial-file-trailer))
                nil [8973 9462])
            ("ses-box-prop" variable
               (:constant-flag t
                :default-value (quote (:box (:line-width 2 :style released-button))))
                nil [9464 9610])
            ("ses-standard-printer-functions" variable
               (:constant-flag t
                :default-value (quote (ses-center ses-center-span ses-dashfill ses-dashfill-span ses-tildefill-span)))
                nil [9612 10011])
            ("ses-set-localvars" function nil nil [11098 11418])
            ("ses-localvars" variable
               (:constant-flag t
                :default-value (quote (ses--blank-line ses--cells ses--col-printers ses--col-widths ses--curcell ses--curcell-overlay ses--default-printer ses--deferred-narrow ses--deferred-recalc ses--deferred-write ses--file-format ses--named-cell-hashmap (ses--header-hscroll . -1) ses--header-row ses--header-string ses--linewidth ses--numcols ses--numrows ses--symbolic-formulas ses--data-marker ses--params-marker (ses--Dijkstra-attempt-nb . 0) ses--Dijkstra-weight-bound ses--renamed-cell-symb-list mode-line-process next-line-add-newlines transient-mark-mode)))
                nil [10226 11096])
            ("ses-set-localvars" code nil nil [11463 11482])
            ("put" code nil nil [11552 11609])
            ("ses-paramlines-plist" variable
               (:constant-flag t
                :default-value (quote (ses--col-widths -5 ses--col-printers -4 ses--default-printer -3 ses--header-row -2 ses--file-format 1 ses--numrows 2 ses--numcols 3)))
                nil [11611 11909])
            ("ses-relocate-return" variable nil nil [12269 12622])
            ("ses-call-printer-return" variable nil nil [12624 12865])
            ("ses-start-time" variable nil nil [12867 13004])
            ("ses-get-cell" function (:arguments ("row" "col")) nil [13176 13323])
            ("ses-make-cell" function (:arguments ("symbol" "formula" "printer" "references" "property-list")) nil [13465 13615])
            ("ses-cell-symbol" function (:arguments ("row" "col")) nil [13617 13830])
            ("put" code nil nil [13831 13870])
            ("ses-cell-formula" function (:arguments ("row" "col")) nil [13872 14050])
            ("ses-cell-formula-aset" function (:arguments ("cell" "formula")) nil [14052 14184])
            ("ses-cell-printer" function (:arguments ("row" "col")) nil [14186 14362])
            ("ses-cell-references" function (:arguments ("row" "col")) nil [14364 14573])
            ("ses-cell-references-aset" function (:arguments ("cell" "references")) nil [14575 14761])
            ("ses-cell-p" function (:arguments ("cell")) nil [14763 15045])
            ("ses-cell-property-get-fun" function (:arguments ("property-name" "cell")) nil [15047 15944])
            ("ses-cell-property-get" function (:arguments ("property-name" "row" "col")) nil [15946 16338])
            ("ses-cell-property-delq-fun" function (:arguments ("property-name" "cell")) nil [16340 16494])
            ("ses-cell-property-set-fun" function (:arguments ("property-name" "property-val" "cell")) nil [16496 16746])
            ("ses-cell-property-set" function (:arguments ("property-name" "property-value" "row" "col")) nil [16748 17196])
            ("ses-cell-property-pop-fun" function (:arguments ("property-name" "cell")) nil [17198 17551])
            ("ses-cell-property-pop" function (:arguments ("property-name" "row" "col")) nil [17554 17835])
            ("ses-cell-property-get-handle-fun" function (:arguments ("property-name" "cell")) nil [17837 18363])
            ("ses-cell-property-get-handle" function (:arguments ("property-name" "row" "col")) nil [18365 18683])
            ("defalias" code nil nil [18686 18731])
            ("defalias" code nil nil [18732 18783])
            ("ses-cell-value" function (:arguments ("row" "col")) nil [18785 18950])
            ("ses-col-width" function (:arguments ("col")) nil [18952 19050])
            ("ses-col-printer" function (:arguments ("col")) nil [19052 19164])
            ("ses-sym-rowcol" function (:arguments ("sym")) nil [19166 19463])
            ("ses-is-cell-sym-p" function (:arguments ("sym")) nil [19465 19843])
            ("ses-cell" function (:arguments ("sym" "value" "formula" "printer" "references")) nil [19845 20615])
            ("ses-column-widths" function (:arguments ("widths")) nil [20617 21156])
            ("ses-column-printers" function (:arguments ("printers")) nil [21158 21623])
            ("ses-default-printer" function (:arguments ("def")) nil [21625 21888])
            ("ses-header-row" function (:arguments ("row")) nil [21890 22192])
            ("ses-dorange" function (:arguments ("curcell" "body")) nil [22194 23135])
            ("1value" function (:arguments ("form")) nil [23169 23293])
            ("noreturn" function (:arguments ("form")) nil [23294 23406])
            ("ses-vector-insert" function (:arguments ("array" "idx" "new")) nil [23589 23901])
            ("ses-vector-delete" function (:arguments ("array" "idx" "count")) nil [23960 24500])
            ("ses-delete-line" function (:arguments ("count")) nil [24502 24654])
            ("ses-printer-validate" function (:arguments ("printer")) nil [24656 24941])
            ("ses-printer-record" function (:arguments ("printer")) nil [24943 25304])
            ("ses-formula-record" function (:arguments ("formula")) nil [25306 25601])
            ("ses-column-letter" function (:arguments ("col")) nil [25603 25873])
            ("ses-create-cell-symbol" function (:arguments ("row" "col")) nil [25875 26054])
            ("ses-decode-cell-symbol" function (:arguments ("str")) nil [26056 26770])
            ("ses-create-cell-variable-range" function (:arguments ("minrow" "maxrow" "mincol" "maxcol")) nil [26772 27283])
            ("ses-create-cell-variable" function (:arguments ("sym" "row" "col")) nil [27285 27945])
            ("ses-destroy-cell-variable-range" function (:arguments ("minrow" "maxrow" "mincol" "maxcol")) nil [28113 28771])
            ("ses-reset-header-string" function nil nil [28773 28990])
            ("ses-time-check" function (:arguments ("format" "arg")) nil [29069 29371])
            ("ses-set-cell" function (:arguments ("row" "col" "field" "val")) nil [29546 30137])
            ("ses-cell-set-formula" function (:arguments ("row" "col" "formula")) nil [30169 31517])
            ("ses-repair-cell-reference-all" function (:user-visible-flag t) nil [31520 33814])
            ("ses-calculate-cell" function (:arguments ("row" "col" "force")) nil [33816 37344])
            ("ses-clear-cell" function (:arguments ("row" "col")) nil [37346 37504])
            ("ses-self-reference-early-detection" variable nil nil [37506 37678])
            ("ses-update-cells" function (:arguments ("list" "force")) nil [37680 40184])
            ("ses-in-print-area" function nil nil [40364 40479])
            ("ses-goto-print" function (:arguments ("row" "col")) nil [40687 41122])
            ("ses-set-curcell" function nil nil [41124 41824])
            ("ses-check-curcell" function (:arguments ("args")) nil [41826 42455])
            ("ses-print-cell" function (:arguments ("row" "col")) nil [42457 47390])
            ("ses-call-printer" function (:arguments ("printer" "value")) nil [47392 48410])
            ("ses-adjust-print-width" function (:arguments ("col" "change")) nil [48412 49203])
            ("ses-print-cell-new-width" function (:arguments ("row" "col")) nil [49205 49735])
            ("ses-widen" function nil nil [49914 50071])
            ("ses-goto-data" function (:arguments ("def" "col")) nil [50073 50771])
            ("ses-set-parameter" function (:arguments ("def" "value" "elem")) nil [50773 52074])
            ("ses-write-cells" function nil nil [52077 53471])
            ("ses-formula-references" function (:arguments ("formula" "result-so-far")) nil [53655 54540])
            ("ses-relocate-symbol" function (:arguments ("sym" "rowcol" "startrow" "startcol" "rowincr" "colincr")) nil [54542 55150])
            ("ses-relocate-formula" function (:arguments ("formula" "startrow" "startcol" "rowincr" "colincr")) nil [55152 56890])
            ("ses-relocate-range" function (:arguments ("range" "startrow" "startcol" "rowincr" "colincr")) nil [56892 59759])
            ("ses-relocate-all" function (:arguments ("minrow" "mincol" "rowincr" "colincr")) nil [59761 63825])
            ("ses-begin-change" function nil nil [64003 64200])
            ("ses-set-with-undo" function (:arguments ("sym" "newval")) nil [64202 64809])
            ("ses-unset-with-undo" function (:arguments ("sym")) nil [64811 65072])
            ("ses-aset-with-undo" function (:arguments ("array" "idx" "newval")) nil [65074 65353])
            ("ses-load" function nil nil [65541 68856])
            ("ses-setup" function (:user-visible-flag t) nil [68858 71053])
            ("ses-cleanup" function nil nil [71055 71813])
            ("ses-mode" function (:user-visible-flag t) nil [71830 75938])
            ("put" code nil nil [75940 75976])
            ("ses-command-hook" function nil nil [75978 78325])
            ("ses-create-header-string" function nil nil [78357 80002])
            ("ses-jump" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [80195 80496])
            ("ses-jump-safe" function (:arguments ("cell")) nil [80498 80615])
            ("ses-reprint-all" function
               (:user-visible-flag t
                :arguments ("nonarrow"))
                nil [80617 81673])
            ("ses-initialize-Dijkstra-attempt" function nil nil [81675 81839])
            ("ses-recalculate-cell" function (:user-visible-flag t) nil [81841 83916])
            ("ses-recalculate-all" function (:user-visible-flag t) nil [83918 84217])
            ("ses-truncate-cell" function (:user-visible-flag t) nil [84219 84956])
            ("ses-reconstruct-all" function (:user-visible-flag t) nil [84958 87314])
            ("ses-edit-cell" function
               (:user-visible-flag t
                :arguments ("row" "col" "newval"))
                nil [87502 88574])
            ("ses-read-cell" function
               (:user-visible-flag t
                :arguments ("row" "col" "newval"))
                nil [88576 89541])
            ("ses-read-symbol" function
               (:user-visible-flag t
                :arguments ("row" "col" "symb"))
                nil [89543 90290])
            ("ses-clear-cell-forward" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [90292 90789])
            ("ses-clear-cell-backward" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [90791 91275])
            ("ses-read-printer" function (:arguments ("prompt" "default")) nil [91472 92317])
            ("ses-read-cell-printer" function
               (:user-visible-flag t
                :arguments ("newval"))
                nil [92319 93609])
            ("ses-read-column-printer" function
               (:user-visible-flag t
                :arguments ("col" "newval"))
                nil [93611 94155])
            ("ses-read-default-printer" function
               (:user-visible-flag t
                :arguments ("newval"))
                nil [94157 94521])
            ("ses-insert-row" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [94715 96874])
            ("ses-delete-row" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [96876 98182])
            ("ses-insert-column" function
               (:user-visible-flag t
                :arguments ("count" "col" "width" "printer"))
                nil [98184 100557])
            ("ses-delete-column" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [100559 102431])
            ("ses-forward-or-insert" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [102433 103299])
            ("ses-append-row-jump-first-column" function (:user-visible-flag t) nil [103301 103541])
            ("ses-set-column-width" function
               (:user-visible-flag t
                :arguments ("col" "newwidth"))
                nil [103543 104541])
            ("ses--advice-copy-region-as-kill" function (:arguments ("crak-fun" "beg" "end" "args")) nil [104739 105651])
            ("advice-add" code nil nil [105652 105727])
            ("ses-copy-region" function (:arguments ("beg" "end")) nil [105729 106290])
            ("ses-copy-region-helper" function (:arguments ("line")) nil [106292 107067])
            ("ses-kill-override" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [107069 107941])
            ("ses--advice-yank" function (:arguments ("yank-fun" "arg" "args")) nil [107943 109605])
            ("advice-add" code nil nil [109606 109651])
            ("ses-yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [109653 110335])
            ("ses-yank-cells" function (:arguments ("text" "arg")) nil [110337 112816])
            ("ses-yank-one" function (:arguments ("rowcol" "text" "from" "to" "arg")) nil [112818 113637])
            ("ses-yank-tsf" function (:arguments ("text" "arg")) nil [113639 114969])
            ("ses-yank-resize" function (:arguments ("needrows" "needcols")) nil [114971 116129])
            ("ses-export-tsv" function
               (:user-visible-flag t
                :arguments ("_beg" "_end"))
                nil [116131 116335])
            ("ses-export-tsf" function
               (:user-visible-flag t
                :arguments ("_beg" "_end"))
                nil [116337 116541])
            ("ses-export-tab" function (:arguments ("want-formulas")) nil [116543 117588])
            ("ses-unset-header-row" function (:user-visible-flag t) nil [117773 117880])
            ("ses-set-header-row" function
               (:user-visible-flag t
                :arguments ("row"))
                nil [117882 118703])
            ("ses-mark-row" function (:user-visible-flag t) nil [118705 119016])
            ("ses-mark-column" function (:user-visible-flag t) nil [119018 119519])
            ("ses-end-of-line" function (:user-visible-flag t) nil [119521 120563])
            ("ses-renarrow-buffer" function (:user-visible-flag t) nil [120565 120721])
            ("ses-sort-column" function
               (:user-visible-flag t
                :arguments ("sorter" "reverse"))
                nil [120723 122103])
            ("ses-sort-column-click" function
               (:user-visible-flag t
                :arguments ("event" "reverse"))
                nil [122105 122596])
            ("ses-insert-range" function (:user-visible-flag t) nil [122598 123052])
            ("ses-insert-ses-range" function (:user-visible-flag t) nil [123054 123494])
            ("ses-insert-range-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [123496 123643])
            ("ses-insert-ses-range-click" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [123645 123804])
            ("ses-replace-name-in-formula" function (:arguments ("formula" "old-name" "new-name")) nil [123806 124267])
            ("ses-rename-cell" function
               (:user-visible-flag t
                :arguments ("new-name" "cell"))
                nil [124269 126692])
            ("ses-safe-printer" function (:arguments ("printer")) nil [126885 127153])
            ("ses-safe-formula" function (:arguments ("formula")) nil [127155 127347])
            ("ses-warn-unsafe" function (:arguments ("formula" "checker")) nil [127349 127815])
            ("ses--clean-!" function (:arguments ("x")) nil [127998 128127])
            ("ses--clean-_" function (:arguments ("x" "y")) nil [128129 128448])
            ("ses-range" function (:arguments ("from" "to" "rest")) nil [128450 132646])
            ("ses-delete-blanks" function (:arguments ("args")) nil [132648 132873])
            ("ses+" function (:arguments ("args")) nil [132875 133000])
            ("ses-average" function (:arguments ("list")) nil [133002 133274])
            ("ses-select" function (:arguments ("fromrange" "test" "torange")) nil [133276 133953])
            ("dolist" code nil nil [133988 134110])
            ("row" variable nil nil [134476 134488])
            ("col" variable nil nil [134489 134501])
            ("ses-center" function (:arguments ("value" "span" "fill")) nil [134503 135305])
            ("ses-center-span" function (:arguments ("value" "fill")) nil [135307 135708])
            ("ses-dashfill" function (:arguments ("value" "span")) nil [135710 135898])
            ("ses-dashfill-span" function (:arguments ("value")) nil [135900 136097])
            ("ses-tildefill-span" function (:arguments ("value")) nil [136099 136297])
            ("ses-unsafe" function (:arguments ("_value")) nil [136299 136413])
            ("dolist" code nil nil [136471 136563])
            ("ses-unload-function" function nil nil [136565 136792])
            ("ses" package nil nil [136794 136808]))          
      :file "ses.el.gz"
      :pointmax 136831
      :fsize 37294
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 11482 . 11483) (symbol 11422 . 11439) (open-paren 11421 . 11422) (close-paren 11418 . 11419) (symbol 10207 . 10223) (open-paren 10206 . 10207) (close-paren 2439 . 2440) (symbol 2404 . 2421) (open-paren 2403 . 2404)))
    (semanticdb-table "term.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("term-protocol-version" variable
               (:constant-flag t
                :default-value "0.96")
                nil [14571 14610])
            ("ange-ftp" include nil nil [14631 14650])
            ("ring" include nil nil [14652 14667])
            ("ehelp" include nil nil [14668 14684])
            ("declare-function" code nil nil [14686 14731])
            ("declare-function" code nil nil [14732 14779])
            ("declare-function" code nil nil [14780 14842])
            ("declare-function" code nil nil [14843 14887])
            ("declare-function" code nil nil [14888 14937])
            ("term" customgroup (:user-visible-flag t) nil [14939 15023])
            ("term-input-ring-size" variable (:default-value 32) nil [15504 15566])
            ("term-height" variable nil nil [16301 16321])
            ("term-width" variable nil nil [16370 16389])
            ("term-home-marker" variable nil nil [16441 16466])
            ("term-saved-home-marker" variable nil nil [16518 16648])
            ("term-start-line-column" variable nil nil [16649 16747])
            ("term-current-column" variable nil nil [16748 16823])
            ("term-current-row" variable nil nil [16824 16921])
            ("term-insert-mode" variable nil nil [16922 16951])
            ("term-vertical-motion" variable nil nil [16952 16981])
            ("term-terminal-state" variable nil nil [16982 17381])
            ("term-kill-echo-list" variable nil nil [17382 17468])
            ("term-terminal-parameter" variable nil nil [17469 17501])
            ("term-terminal-previous-parameter" variable nil nil [17502 17543])
            ("term-current-face" variable (:default-value (quote term)) nil [17544 17576])
            ("term-scroll-start" variable nil nil [17577 17654])
            ("term-scroll-end" variable nil nil [17655 17679])
            ("term-pager-count" variable nil nil [17734 17835])
            ("term-saved-cursor" variable nil nil [17836 17866])
            ("term-command-hook" variable nil nil [17867 17893])
            ("term-log-buffer" variable nil nil [17894 17922])
            ("term-scroll-with-delete" variable nil nil [17923 18204])
            ("term-pending-delete-marker" variable nil nil [18205 18240])
            ("term-old-mode-map" variable nil nil [18412 18484])
            ("term-old-mode-line-format" variable nil nil [18485 18519])
            ("term-pager-old-local-map" variable nil nil [18563 18633])
            ("term-pager-old-filter" variable nil nil [18634 18664])
            ("explicit-shell-file-name" variable nil nil [18703 18870])
            ("term-prompt-regexp" variable (:default-value "^") nil [18872 19309])
            ("term-delimiter-argument-list" variable nil nil [19311 19740])
            ("term-input-autoexpand" variable nil nil [19742 20260])
            ("term-input-ignoredups" variable nil nil [20262 20476])
            ("term-input-ring-file-name" variable nil nil [20478 20748])
            ("term-scroll-to-bottom-on-output" variable nil nil [20750 21183])
            ("term-scroll-show-maximum-output" variable nil nil [21185 21475])
            ("term-suppress-hard-newline" variable nil nil [21477 21709])
            ("term-pending-frame" variable nil nil [21880 21911])
            ("term-get-old-input" variable (:default-value (function term-get-old-input-default)) nil [21953 22333])
            ("term-dynamic-complete-functions" variable (:default-value (quote (term-replace-by-expanded-history term-dynamic-complete-filename))) nil [22335 22635])
            ("term-input-filter" variable (:default-value (function (lambda (str) (not (string-match "\\`\\s *\\'" str))))) nil [22637 22923])
            ("term-input-filter-functions" variable (:default-value (quote nil)) nil [22925 23128])
            ("term-input-sender" variable (:default-value (function term-simple-send)) nil [23130 23482])
            ("term-eol-on-send" variable (:default-value t) nil [23484 23635])
            ("term-mode-hook" variable (:default-value (quote nil)) nil [23637 23780])
            ("term-exec-hook" variable (:default-value (quote nil)) nil [23782 24162])
            ("term-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote term-previous-input)) (define-key map "n" (quote term-next-input)) (define-key map "r" (quote term-previous-matching-input)) (define-key map "s" (quote term-next-matching-input)) (unless (featurep (quote xemacs)) (define-key map [138412146] (quote term-previous-matching-input-from-input)) (define-key map [138412147] (quote term-next-matching-input-from-input))) (define-key map "" (quote term-show-output)) (define-key map "" (quote term-send-input)) (define-key map "" (quote term-delchar-or-maybe-eof)) (define-key map "" (quote term-bol)) (define-key map "" (quote term-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote term-interrupt-subjob)) (define-key map "" (quote term-stop-subjob)) (define-key map "" (quote term-quit-subjob)) (define-key map "" (quote term-copy-old-input)) (define-key map "" (quote term-kill-output)) (define-key map "" (quote term-show-output)) (define-key map "" (quote term-show-maximum-output)) (define-key map "" (quote term-dynamic-list-input-ring)) (define-key map "" (quote term-next-prompt)) (define-key map "" (quote term-previous-prompt)) (define-key map "" (quote term-send-eof)) (define-key map "" (quote term-char-mode)) (define-key map "
" (quote term-line-mode)) (define-key map "" (quote term-pager-toggle)) (easy-menu-define nil map "Complete menu for Term mode." (quote ("Complete" ["Complete Before Point" term-dynamic-complete t] ["Complete File Name" term-dynamic-complete-filename t] ["File Completion Listing" term-dynamic-list-filename-completions t] ["Expand File Name" term-replace-by-expanded-filename t]))) (easy-menu-define nil map "In/Out menu for Term mode." (quote ("In/Out" ["Expand History Before Point" term-replace-by-expanded-history term-input-autoexpand] ["List Input History" term-dynamic-list-input-ring t] ["Previous Input" term-previous-input t] ["Next Input" term-next-input t] ["Previous Matching Current Input" term-previous-matching-input-from-input t] ["Next Matching Current Input" term-next-matching-input-from-input t] ["Previous Matching Input..." term-previous-matching-input t] ["Next Matching Input..." term-next-matching-input t] ["Backward Matching Input..." term-backward-matching-input t] ["Forward Matching Input..." term-forward-matching-input t] ["Copy Old Input" term-copy-old-input t] ["Kill Current Input" term-kill-input t] ["Show Current Output Group" term-show-output t] ["Show Maximum Output" term-show-maximum-output t] ["Backward Output Group" term-previous-prompt t] ["Forward Output Group" term-next-prompt t] ["Kill Current Output Group" term-kill-output t]))) map)) nil [24164 27235])
            ("term-escape-char" variable nil nil [27237 27382])
            ("term-pager-break-map" variable (:default-value (let ((map (make-keymap))) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map " " (quote term-pager-page)) (define-key map "" (quote term-pager-line)) (define-key map "?" (quote term-pager-help)) (define-key map "h" (quote term-pager-help)) (define-key map "b" (quote term-pager-back-page)) (define-key map "" (quote term-pager-back-line)) (define-key map "q" (quote term-pager-discard)) (define-key map "D" (quote term-pager-disable)) (define-key map "<" (quote term-pager-bob)) (define-key map ">" (quote term-pager-eob)) map)) nil [27384 28212])
            ("term-ptyp" variable (:default-value t) nil [28214 28360])
            ("term-last-input-match" variable nil nil [28362 28493])
            ("term-input-ring" variable nil nil [28495 28523])
            ("term-last-input-start" variable nil nil [28524 28554])
            ("term-last-input-end" variable nil nil [28555 28583])
            ("term-input-ring-index" variable nil nil [28584 28661])
            ("term-matching-input-from-input-string" variable nil nil [28662 28761])
            ("term-pager-filter" variable (:default-value t) nil [28876 28904])
            ("put" code nil nil [28906 28947])
            ("put" code nil nil [28948 28995])
            ("put" code nil nil [28996 29043])
            ("put" code nil nil [29044 29097])
            ("put" code nil nil [29098 29155])
            ("put" code nil nil [29156 29213])
            ("put" code nil nil [29214 29249])
            ("term-in-char-mode" function nil nil [29251 29321])
            ("term-in-line-mode" function nil nil [29322 29380])
            ("term-pager-enabled" function nil nil [29424 29474])
            ("term-handling-pager" function nil nil [29475 29534])
            ("term-using-alternate-sub-buffer" function nil nil [29535 29604])
            ("term-ansi-at-host" variable nil nil [29645 29675])
            ("term-ansi-at-dir" variable nil nil [29676 29705])
            ("term-ansi-at-user" variable nil nil [29706 29736])
            ("term-ansi-at-message" variable nil nil [29737 29770])
            ("term-ansi-at-save-user" variable nil nil [29771 29806])
            ("term-ansi-at-save-pwd" variable nil nil [29807 29841])
            ("term-ansi-at-save-anon" variable nil nil [29842 29877])
            ("term-ansi-current-bold" variable nil nil [29878 29913])
            ("term-ansi-current-color" variable nil nil [29914 29948])
            ("term-ansi-face-already-done" variable nil nil [29949 29989])
            ("term-ansi-current-bg-color" variable nil nil [29990 30027])
            ("term-ansi-current-underline" variable nil nil [30028 30068])
            ("term-ansi-current-reverse" variable nil nil [30069 30107])
            ("term-ansi-current-invisible" variable nil nil [30108 30148])
            ("term-terminal-more-parameters" variable nil nil [30208 30248])
            ("term-terminal-previous-parameter-2" variable (:default-value -1) nil [30249 30295])
            ("term-terminal-previous-parameter-3" variable (:default-value -1) nil [30296 30342])
            ("term-terminal-previous-parameter-4" variable (:default-value -1) nil [30343 30389])
            ("ansi-term-color-vector" variable (:default-value [term term-color-black term-color-red term-color-green term-color-yellow term-color-blue term-color-magenta term-color-cyan term-color-white]) nil [30401 30600])
            ("term-default-fg-color" variable nil nil [30602 30765])
            ("make-obsolete-variable" code nil nil [30766 30875])
            ("term-default-bg-color" variable nil nil [30877 31040])
            ("make-obsolete-variable" code nil nil [31041 31150])
            ("term" variable
               (:default-value (\` ((t :foreground (\, term-default-fg-color) :background (\, term-default-bg-color) :inherit default)))
                :type "face")
                nil [31152 31330])
            ("term-bold" variable
               (:default-value (quote ((t :bold t)))
                :type "face")
                nil [31332 31422])
            ("term-underline" variable
               (:default-value (quote ((t :underline t)))
                :type "face")
                nil [31424 31530])
            ("term-color-black" variable
               (:default-value (quote ((t :foreground "black" :background "black")))
                :type "face")
                nil [31532 31664])
            ("term-color-red" variable
               (:default-value (quote ((t :foreground "red3" :background "red3")))
                :type "face")
                nil [31666 31792])
            ("term-color-green" variable
               (:default-value (quote ((t :foreground "green3" :background "green3")))
                :type "face")
                nil [31794 31928])
            ("term-color-yellow" variable
               (:default-value (quote ((t :foreground "yellow3" :background "yellow3")))
                :type "face")
                nil [31930 32068])
            ("term-color-blue" variable
               (:default-value (quote ((t :foreground "blue2" :background "blue2")))
                :type "face")
                nil [32070 32200])
            ("term-color-magenta" variable
               (:default-value (quote ((t :foreground "magenta3" :background "magenta3")))
                :type "face")
                nil [32202 32344])
            ("term-color-cyan" variable
               (:default-value (quote ((t :foreground "cyan3" :background "cyan3")))
                :type "face")
                nil [32346 32476])
            ("term-color-white" variable
               (:default-value (quote ((t :foreground "white" :background "white")))
                :type "face")
                nil [32478 32610])
            ("term-buffer-maximum-size" variable (:default-value 2048) nil [32651 32941])
            ("term-raw-map" variable (:default-value (let* ((map (make-keymap)) (esc-map (make-keymap)) (i 0)) (while (< i 128) (define-key map (make-string 1 i) (quote term-send-raw)) (unless (or (eq i 79) (eq i 91)) (define-key esc-map (make-string 1 i) (quote term-send-raw-meta))) (setq i (1+ i))) (define-key map [remap self-insert-command] (quote term-send-raw)) (define-key map "" esc-map) (if (featurep (quote xemacs)) (define-key map [button2] (quote term-mouse-paste)) (define-key map [mouse-2] (quote term-mouse-paste))) (define-key map [up] (quote term-send-up)) (define-key map [down] (quote term-send-down)) (define-key map [right] (quote term-send-right)) (define-key map [left] (quote term-send-left)) (define-key map [delete] (quote term-send-del)) (define-key map [deletechar] (quote term-send-del)) (define-key map [backspace] (quote term-send-backspace)) (define-key map [home] (quote term-send-home)) (define-key map [end] (quote term-send-end)) (define-key map [insert] (quote term-send-insert)) (define-key map [S-prior] (quote scroll-down)) (define-key map [S-next] (quote scroll-up)) (define-key map [S-insert] (quote term-paste)) (define-key map [prior] (quote term-send-prior)) (define-key map [next] (quote term-send-next)) map)) nil [32974 34390])
            ("easy-menu-define" code nil nil [34392 34886])
            ("easy-menu-define" code nil nil [34888 35573])
            ("easy-menu-define" code nil nil [35575 36067])
            ("term-raw-escape-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map (quote Control-X-prefix)) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (lookup-key (current-global-map) "")) (define-key map "" (quote term-pager-toggle)) (define-key map "" (quote term-char-mode)) (define-key map "
" (quote term-line-mode)) (define-key map [134217848] (quote execute-extended-command)) map)) nil [36069 36706])
            ("term-set-escape-char" function (:arguments ("key")) nil [36708 37236])
            ("term-set-escape-char" code nil nil [37238 37288])
            ("overflow-newline-into-fringe" variable nil nil [37290 37327])
            ("term-window-width" function nil nil [37329 37711])
            ("put" code nil nil [37715 37752])
            ("term-display-table" variable (:default-value (let ((dt (or (copy-sequence standard-display-table) (make-display-table))) i) (setq i 0) (while (< i 10) (aset dt i (vector i)) (setq i (1+ i))) (setq i 11) (while (< i 32) (aset dt i (vector i)) (setq i (1+ i))) (setq i 128) (while (< i 256) (aset dt i (vector i)) (setq i (1+ i))) dt)) nil [37812 38250])
            ("term-ansi-reset" function nil nil [38252 38767])
            ("define-derived-mode" code nil nil [38769 45009])
            ("term-reset-size" function (:arguments ("height" "width")) nil [45012 45239])
            ("term-check-kill-echo-list" function nil nil [45674 46300])
            ("term-check-size" function (:arguments ("process")) nil [46302 46552])
            ("term-send-raw-string" function (:arguments ("chars")) nil [46554 47000])
            ("term-send-raw" function (:user-visible-flag t) nil [47002 47238])
            ("term-send-raw-meta" function nil nil [47240 47833])
            ("term-mouse-paste" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [47835 48676])
            ("term-paste" function (:user-visible-flag t) nil [48678 48811])
            ("term-send-up" function nil nil [49086 49156])
            ("term-send-down" function nil nil [49157 49227])
            ("term-send-right" function nil nil [49228 49298])
            ("term-send-left" function nil nil [49299 49369])
            ("term-send-home" function nil nil [49370 49441])
            ("term-send-insert" function nil nil [49442 49513])
            ("term-send-end" function nil nil [49514 49585])
            ("term-send-prior" function nil nil [49586 49657])
            ("term-send-next" function nil nil [49658 49729])
            ("term-send-del" function nil nil [49730 49801])
            ("term-send-backspace" function nil nil [49802 49877])
            ("term-char-mode" function (:user-visible-flag t) nil [49880 50782])
            ("term-line-mode" function (:user-visible-flag t) nil [50784 51114])
            ("term-update-mode-line" function nil nil [51116 53474])
            ("term-check-proc" function (:arguments ("buffer")) nil [53476 53756])
            ("make-term" function (:arguments ("name" "program" "startfile" "switches")) nil [53773 54576])
            ("term" function
               (:user-visible-flag t
                :arguments ("program"))
                nil [54593 55112])
            ("term-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [55114 56504])
            ("term-sentinel" function (:arguments ("proc" "msg")) nil [56506 57269])
            ("term-handle-exit" function (:arguments ("process-name" "msg")) nil [57271 57741])
            ("term-term-name" variable (:default-value "eterm-color") nil [57744 57879])
            ("term-termcap-format" variable (:default-value "%s%s:li#%d:co#%d:cl=\\E[H\\E[J:cd=\\E[J:bs:am:xn:cm=\\E[%%i%%d;%%dH:nd=\\E[C:up=\\E[A:ce=\\E[K:ho=\\E[H:pt:al=\\E[L:dl=\\E[M:DL=\\E[%%dM:AL=\\E[%%dL:cs=\\E[%%i%%d;%%dr:sf=^J:dc=\\E[P:DC=\\E[%%dP:IC=\\E[%%d@:im=\\E[4h:ei=\\E[4l:mi::so=\\E[7m:se=\\E[m:us=\\E[4m:ue=\\E[m:md=\\E[1m:mr=\\E[7m:me=\\E[m:UP=\\E[%%dA:DO=\\E[%%dB:LE=\\E[%%dD:RI=\\E[%%dC:kl=\\EOD:kd=\\EOB:kr=\\EOC:ku=\\EOA:kN=\\E[6~:kP=\\E[5~:@7=\\E[4~:kh=\\E[1~:mk=\\E[8m:cb=\\E[1K:op=\\E[39;49m:Co#8:pa#64:AB=\\E[4%%dm:AF=\\E[3%%dm:cr=^M:bl=^G:do=^J:le=^H:ta=^I:se=\\E[27m:ue=\\E24m:kb=^?:kD=^[[3~:sc=\\E7:rc=\\E8:r1=\\Ec:") nil [57970 58718])
            ("term-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [58819 60429])
            ("term-read-input-ring" function (:arguments ("silent")) nil [61529 63446])
            ("term-write-input-ring" function nil nil [63448 64631])
            ("term-dynamic-list-input-ring" function (:user-visible-flag t) nil [64634 65678])
            ("term-regexp-arg" function (:arguments ("prompt")) nil [65681 66130])
            ("term-search-arg" function (:arguments ("arg")) nil [66132 66534])
            ("term-search-start" function (:arguments ("arg")) nil [66536 67003])
            ("term-previous-input-string" function (:arguments ("arg")) nil [67037 67322])
            ("term-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [67324 67462])
            ("term-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [67464 67588])
            ("term-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [67590 67881])
            ("term-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [67883 69073])
            ("term-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [69075 69865])
            ("term-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [69867 70254])
            ("term-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [70256 70992])
            ("term-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [70994 71358])
            ("term-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent"))
                nil [71361 72587])
            ("term-replace-by-expanded-history-before-point" function (:arguments ("silent")) nil [72590 76217])
            ("term-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [76220 76481])
            ("term-within-quotes" function (:arguments ("beg" "end")) nil [76484 76805])
            ("term-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [76807 77070])
            ("term-args" function (:arguments ("string" "begin" "end")) nil [77072 77841])
            ("term-delim-arg" function (:arguments ("arg")) nil [77979 78517])
            ("term-arguments" function (:arguments ("string" "nth" "mth")) nil [78519 80011])
            ("term-send-input" function (:user-visible-flag t) nil [80062 84287])
            ("term-get-old-input-default" function nil nil [84289 84596])
            ("term-copy-old-input" function (:user-visible-flag t) nil [84598 84982])
            ("term-skip-prompt" function nil nil [84984 85290])
            ("term-after-pmark-p" function nil nil [85293 85763])
            ("term-simple-send" function (:arguments ("proc" "string")) nil [85765 86014])
            ("term-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [86016 86412])
            ("term-read-noecho" function (:arguments ("prompt" "stars")) nil [86607 88610])
            ("term-send-invisible" function
               (:user-visible-flag t
                :arguments ("str" "proc"))
                nil [88612 89336])
            ("term-input-chunk-size" variable (:default-value 512) nil [89377 89591])
            ("term-send-string" function (:arguments ("proc" "str")) nil [89593 90254])
            ("term-send-region" function (:arguments ("proc" "start" "end")) nil [90256 90542])
            ("term-kill-output" function (:user-visible-flag t) nil [90572 90878])
            ("term-show-output" function (:user-visible-flag t) nil [90880 91190])
            ("term-interrupt-subjob" function (:user-visible-flag t) nil [91192 91310])
            ("term-kill-subjob" function (:user-visible-flag t) nil [91312 91430])
            ("term-quit-subjob" function (:user-visible-flag t) nil [91432 91550])
            ("term-stop-subjob" function (:user-visible-flag t) nil [91552 91922])
            ("term-continue-subjob" function (:user-visible-flag t) nil [91924 92120])
            ("term-kill-input" function (:user-visible-flag t) nil [92122 92399])
            ("term-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [92401 92603])
            ("term-send-eof" function (:user-visible-flag t) nil [92605 92715])
            ("term-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [92717 93346])
            ("term-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [93348 93748])
            ("term-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [93751 94006])
            ("term-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [94008 94167])
            ("term-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [97353 97636])
            ("term-check-source" function (:arguments ("fname")) nil [98078 98352])
            ("term-extract-string" function nil nil [99473 99924])
            ("term-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [99926 100676])
            ("term-proc-query" function (:arguments ("proc" "str")) nil [101958 102844])
            ("term-horizontal-column" function nil nil [102962 103048])
            ("term-vertical-motion" function (:arguments ("count")) nil [103113 103198])
            ("term-buffer-vertical-motion" function (:arguments ("count")) nil [103347 104698])
            ("term-start-line-column" function nil nil [104759 104988])
            ("term-current-column" function nil nil [105060 105168])
            ("term-move-columns" function (:arguments ("delta")) nil [105243 105702])
            ("term-insert-char" function (:arguments ("char" "count")) nil [105756 105919])
            ("term-current-row" function nil nil [105921 106141])
            ("term-adjust-current-row-cache" function (:arguments ("delta")) nil [106143 106280])
            ("term-terminal-pos" function nil nil [106282 106546])
            ("term-handle-ansi-terminal-messages" function (:arguments ("message")) nil [106642 108678])
            ("term-emulate-terminal" function (:arguments ("proc" "str")) nil [108831 123246])
            ("term-handle-deferred-scroll" function nil nil [123248 123532])
            ("term-reset-terminal" function nil nil [123534 123943])
            ("term-handle-colors-array" function (:arguments ("parameter")) nil [124079 127142])
            ("term-handle-ansi-escape" function (:arguments ("proc" "char")) nil [127256 131401])
            ("term-set-scroll-region" function (:arguments ("top" "bottom")) nil [131403 132064])
            ("term-command-hook" function (:arguments ("string")) nil [133316 134054])
            ("term-display-line" function (:arguments ("true-file" "line")) nil [134286 134393])
            ("term-display-buffer-line" function (:arguments ("buffer" "line")) nil [134395 134956])
            ("term-goto-home" function nil nil [135179 135393])
            ("term-goto" function (:arguments ("row" "col")) nil [135395 135748])
            ("term-process-pager" function nil nil [135815 136396])
            ("term-pager-line" function (:arguments ("lines")) nil [136398 136714])
            ("term-pager-page" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [136716 136886])
            ("term-pager-bob" function nil nil [136940 137112])
            ("term-pager-eob" function nil nil [137160 137314])
            ("term-pager-back-line" function (:arguments ("lines")) nil [137316 137578])
            ("term-pager-back-page" function (:arguments ("arg")) nil [137580 137679])
            ("term-pager-discard" function nil nil [137681 137826])
            ("term-pager-disable" function nil nil [137927 138091])
            ("term-pager-enable" function nil nil [138121 138292])
            ("term-pager-toggle" function nil nil [138294 138407])
            ("term-pager-help" function (:user-visible-flag t) nil [138409 139600])
            ("term-pager-continue" function (:arguments ("new-count")) nil [139602 140038])
            ("term-handle-scroll" function (:arguments ("down")) nil [140179 141781])
            ("term-down" function (:arguments ("down" "check-for-scroll")) nil [141783 142899])
            ("term-unwrap-line" function nil nil [143084 143161])
            ("term-erase-in-line" function (:arguments ("kind")) nil [143163 144418])
            ("term-erase-in-display" function (:arguments ("kind")) nil [144420 145201])
            ("term-delete-chars" function (:arguments ("count")) nil [145203 145440])
            ("term-insert-spaces" function (:arguments ("count")) nil [145619 146342])
            ("term-delete-lines" function (:arguments ("lines")) nil [146344 147235])
            ("term-insert-lines" function (:arguments ("lines")) nil [147237 148512])
            ("term-start-output-log" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [148515 149222])
            ("term-stop-output-log" function (:user-visible-flag t) nil [149224 149347])
            ("term-show-maximum-output" function (:user-visible-flag t) nil [149349 149501])
            ("term-load-hook" variable nil nil [149540 149653])
            ("run-hooks" code nil nil [149655 149682])
            ("term-completion-autolist" variable nil nil [150639 150827])
            ("term-completion-addsuffix" variable (:default-value t) nil [150829 151315])
            ("term-completion-recexact" variable nil nil [151317 151577])
            ("term-completion-fignore" variable nil nil [151579 151902])
            ("term-file-name-prefix" variable nil nil [151904 152109])
            ("term-directory" function (:arguments ("directory")) nil [152112 152341])
            ("term-word" function (:arguments ("word-chars")) nil [152344 152958])
            ("term-match-partial-filename" function nil nil [152961 153228])
            ("term-dynamic-complete" function (:user-visible-flag t) nil [153231 153646])
            ("term-dynamic-complete-filename" function (:user-visible-flag t) nil [153649 154580])
            ("term-dynamic-complete-as-filename" function nil nil [154582 157160])
            ("term-replace-by-expanded-filename" function (:user-visible-flag t) nil [157163 157811])
            ("term-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [157814 159793])
            ("term-dynamic-list-filename-completions" function (:user-visible-flag t) nil [159795 160363])
            ("term-dynamic-list-completions" function (:arguments ("completions")) nil [160366 161371])
            ("term-ansi-make-term" function (:arguments ("name" "program" "startfile" "switches")) nil [161429 162198])
            ("term-ansi-buffer-name" variable nil nil [162200 162234])
            ("term-ansi-default-program" variable nil nil [162235 162273])
            ("term-ansi-buffer-base-name" variable nil nil [162274 162313])
            ("ansi-term" function
               (:user-visible-flag t
                :arguments ("program" "new-buffer-name"))
                nil [162330 163944])
            ("serial-port-is-file-p" function nil nil [164048 164379])
            ("serial-name-history" variable (:default-value (if (serial-port-is-file-p) (or (when (file-exists-p "/dev/ttys0") (list "/dev/ttys0")) (when (file-exists-p "/dev/ttyS0") (list "/dev/ttyS0"))) (list "COM1"))) nil [164381 164647])
            ("serial-speed-history" variable (:default-value (list "9600" "1200" "2400" "4800" "9600" "14400" "19200" "28800" "38400" "57600" "115200")) nil [164649 164960])
            ("serial-nice-speed-history" function nil nil [164962 165351])
            ("serial-no-speed" variable
               (:constant-flag t
                :default-value "nil")
                nil [165353 165620])
            ("serial-supported-or-barf" function nil nil [165622 165822])
            ("serial-read-name" function nil nil [165824 167914])
            ("serial-read-speed" function nil nil [167916 168889])
            ("serial-term" function
               (:user-visible-flag t
                :arguments ("port" "speed"))
                nil [168906 170074])
            ("serial-mode-line-speed-menu" variable nil nil [170076 170116])
            ("serial-mode-line-config-menu" variable nil nil [170117 170158])
            ("serial-speed" function nil nil [170160 170376])
            ("serial-mode-line-speed-menu-1" function (:arguments ("event")) nil [170378 170772])
            ("serial-mode-line-speed-menu" function (:arguments ("event")) nil [170774 170868])
            ("serial-update-speed-menu" function nil nil [170870 171867])
            ("serial-mode-line-config-menu-1" function (:arguments ("event")) nil [171869 172309])
            ("serial-mode-line-config-menu" function (:arguments ("event")) nil [172311 172407])
            ("serial-update-config-menu" function nil nil [172409 173753])
            ("term" package nil nil [177304 177319]))          
      :file "term.el.gz"
      :pointmax 177343
      :fsize 49414
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 14650 . 14651) (symbol 14613 . 14630) (open-paren 14612 . 14613)))
    (semanticdb-table "minibuffer.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4229 4246])
            ("completion-boundaries" function (:arguments ("string" "table" "pred" "suffix")) nil [4319 5231])
            ("completion-metadata" function (:arguments ("string" "table" "pred")) nil [5233 6243])
            ("completion--field-metadata" function (:arguments ("field-start")) nil [6245 6476])
            ("completion-metadata-get" function (:arguments ("metadata" "prop")) nil [6478 6554])
            ("completion--some" function (:arguments ("fun" "xs")) nil [6556 6989])
            ("complete-with-action" function (:arguments ("action" "table" "string" "pred")) nil [6991 7517])
            ("completion-table-dynamic" function (:arguments ("fun")) nil [7519 8772])
            ("completion-table-with-cache" function (:arguments ("fun" "ignore-case")) nil [8774 9660])
            ("lazy-completion-table" function (:arguments ("var" "fun")) nil [9662 10477])
            ("completion-table-case-fold" function (:arguments ("table" "dont-fold")) nil [10479 10821])
            ("completion-table-subvert" function (:arguments ("table" "s1" "s2")) nil [10823 12524])
            ("completion-table-with-context" function (:arguments ("prefix" "table" "string" "pred" "action")) nil [12526 13810])
            ("completion-table-with-terminator" function (:arguments ("terminator" "table" "string" "pred" "action")) nil [13812 17064])
            ("completion-table-with-predicate" function (:arguments ("table" "pred1" "strict" "string" "pred2" "action")) nil [17066 18539])
            ("completion-table-in-turn" function (:arguments ("tables")) nil [18541 19040])
            ("completion-table-merge" function (:arguments ("tables")) nil [19042 20059])
            ("completion-table-with-quoting" function (:arguments ("table" "unquote" "requote")) nil [20061 27590])
            ("completion--twq-try" function (:arguments ("string" "ustring" "completion" "point" "unquote" "requote")) nil [27592 28838])
            ("completion--string-equal-p" function (:arguments ("s1" "s2")) nil [28840 28944])
            ("completion--twq-all" function (:arguments ("string" "ustring" "completions" "boundary" "_unquote" "requote")) nil [28946 32574])
            ("define-obsolete-function-alias" code nil nil [32725 32810])
            ("define-obsolete-function-alias" code nil nil [32811 32904])
            ("minibuffer" customgroup (:user-visible-flag t) nil [32933 33073])
            ("minibuffer-message" function (:arguments ("message" "args")) nil [33075 35119])
            ("minibuffer-completion-contents" function nil nil [35121 35377])
            ("delete-minibuffer-contents" function (:user-visible-flag t) nil [35379 35736])
            ("completion-show-inline-help" variable (:default-value t) nil [35738 35841])
            ("completion-auto-help" variable (:default-value t) nil [35843 36225])
            ("completion-styles-alist" variable
               (:constant-flag t
                :default-value (quote ((emacs21 completion-emacs21-try-completion completion-emacs21-all-completions "Simple prefix-based completion.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foobar*\".") (emacs22 completion-emacs22-try-completion completion-emacs22-all-completions "Prefix completion that only operates on the text before point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*\" and will add back \"bar\" to the end of it.") (basic completion-basic-try-completion completion-basic-all-completions "Completion of the prefix before point and the suffix after point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*bar*\".") (partial-completion completion-pcm-try-completion completion-pcm-all-completions "Completion of multiple words, each one taken as a prefix.
I.e. when completing \"l-co_h\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"l*-co*h*\".
Furthermore, for completions that are done step by step in subfields,
the method is applied to all the preceding fields that do not yet match.
E.g. C-x C-f /u/mo/s TAB could complete to /usr/monnier/src.
Additionally the user can use the char \"*\" as a glob pattern.") (substring completion-substring-try-completion completion-substring-all-completions "Completion of the string taken as a substring.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"*foo*bar*\".") (initials completion-initials-try-completion completion-initials-all-completions "Completion of acronyms and initialisms.
E.g. can complete M-x lch to list-command-history
and C-x C-f ~/sew to ~/src/emacs/work."))))
                nil [36227 38808])
            ("completion--styles-type" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "insert a new menu to add more styles" (choice (\,@ (mapcar (lambda (x) (list (quote const) (car x))) completion-styles-alist))))))
                nil [38810 39019])
            ("completion--cycling-threshold-type" variable
               (:constant-flag t
                :default-value (quote (choice (const :tag "No cycling" nil) (const :tag "Always cycle" t) (integer :tag "Threshold"))))
                nil [39020 39186])
            ("completion-styles" variable (:default-value (quote (basic partial-completion emacs22))) nil [39188 40092])
            ("completion-category-overrides" variable (:default-value (quote ((buffer (styles basic substring))))) nil [40094 41211])
            ("completion--styles" function (:arguments ("metadata")) nil [41213 41505])
            ("completion--nth-completion" function (:arguments ("n" "string" "table" "pred" "point" "metadata")) nil [41507 43188])
            ("completion-try-completion" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [43190 43747])
            ("completion-all-completions" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [43749 44286])
            ("minibuffer--bitset" function (:arguments ("modified" "completions" "exact")) nil [44288 44437])
            ("completion--replace" function (:arguments ("beg" "end" "newtext")) nil [44439 46142])
            ("completion-cycle-threshold" variable nil nil [46144 46574])
            ("completion--cycle-threshold" function (:arguments ("metadata")) nil [46576 46813])
            ("defvar-local" code nil nil [46815 46867])
            ("defvar-local" code nil nil [46868 46930])
            ("completion-cycling" variable nil nil [46931 46962])
            ("completion-fail-discreetly" variable nil nil [46964 47055])
            ("completion--message" function (:arguments ("msg")) nil [47057 47156])
            ("completion--do-completion" function (:arguments ("beg" "end" "try-completion-function" "expect-exact")) nil [47158 53719])
            ("minibuffer-complete" function (:user-visible-flag t) nil [53721 54222])
            ("completion--in-region-1" function (:arguments ("beg" "end")) nil [54224 55407])
            ("completion--cache-all-sorted-completions" function (:arguments ("beg" "end" "comps")) nil [55409 55723])
            ("completion--flush-all-sorted-completions" function (:arguments ("start" "end" "_len")) nil [55725 56170])
            ("completion--metadata" function (:arguments ("string" "base" "md-at-point" "table" "pred")) nil [56172 56618])
            ("completion-all-sorted-completions" function (:arguments ("start" "end")) nil [56620 58773])
            ("minibuffer-force-complete-and-exit" function (:user-visible-flag t) nil [58775 59406])
            ("minibuffer-force-complete" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [59408 62160])
            ("minibuffer-confirm-exit-commands" variable (:default-value (quote (completion-at-point minibuffer-complete minibuffer-complete-word PC-complete PC-complete-word))) nil [62162 62428])
            ("minibuffer-complete-and-exit" function (:user-visible-flag t) nil [62430 63181])
            ("completion-complete-and-exit" function (:arguments ("beg" "end" "exit-function")) nil [63183 63718])
            ("completion--complete-and-exit" function (:arguments ("beg" "end" "exit-function" "completion-function")) nil [63720 66320])
            ("completion--try-word-completion" function (:arguments ("string" "table" "predicate" "point" "md")) nil [66322 71327])
            ("minibuffer-complete-word" function (:user-visible-flag t) nil [71330 71758])
            ("completion-in-region--single-word" function (:arguments ("beg" "end" "collection" "predicate")) nil [71760 72143])
            ("completions-annotations" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [72145 72262])
            ("completions-format" variable (:default-value (quote horizontal)) nil [72264 72660])
            ("completion--insert-strings" function (:arguments ("strings")) nil [72662 76233])
            ("completion-common-substring" variable nil nil [76235 76275])
            ("make-obsolete-variable" code nil nil [76276 76340])
            ("completion-setup-hook" variable nil nil [76342 76679])
            ("completions-first-difference" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [76681 76847])
            ("completions-common-part" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [76849 77152])
            ("completion-hilit-commonality" function (:arguments ("completions" "prefix-len" "base-size")) nil [77154 79032])
            ("display-completion-list" function (:arguments ("completions" "common-substring")) nil [79034 80800])
            ("completion-extra-properties" variable nil nil [80802 81772])
            ("completion-annotate-function" variable nil nil [81774 82657])
            ("make-obsolete-variable" code nil nil [82658 82772])
            ("completion--done" function (:arguments ("string" "finished" "message")) nil [82774 83590])
            ("minibuffer-completion-help" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [83592 88706])
            ("minibuffer-hide-completions" function nil nil [88708 89051])
            ("exit-minibuffer" function (:user-visible-flag t) nil [89053 89534])
            ("self-insert-and-exit" function (:user-visible-flag t) nil [89536 89733])
            ("completion-in-region-functions" variable nil nil [89735 89827])
            ("make-obsolete-variable" code nil nil [89828 89946])
            ("completion-in-region-function" variable (:default-value (function completion--in-region)) nil [89948 90227])
            ("completion-in-region--data" variable nil nil [90229 90268])
            ("completion-in-region-mode-predicate" variable nil nil [90270 90526])
            ("completion-in-region-mode--predicate" variable nil nil [90528 90749])
            ("completion-in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [90751 91368])
            ("read-file-name-completion-ignore-case" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt darwin cygwin))) t nil)) nil [91370 91595])
            ("completion--in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [91597 92612])
            ("completion-in-region-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\277" (quote completion-help-at-point)) (define-key map "	" (quote completion-at-point)) map)) nil [92614 92966])
            ("completion-in-region--postch" function nil nil [93314 93971])
            ("completion-in-region-mode" variable nil nil [94047 94085])
            ("define-minor-mode" code nil nil [94123 95299])
            ("setq" code nil nil [95426 95554])
            ("completion-at-point-functions" variable (:default-value (quote (tags-completion-at-point-function))) nil [95556 96648])
            ("completion--capf-misbehave-funs" variable nil nil [96650 96898])
            ("completion--capf-safe-funs" variable nil nil [96899 97129])
            ("completion--capf-wrapper" function (:arguments ("fun" "which")) nil [97131 99054])
            ("completion-at-point" function (:user-visible-flag t) nil [99056 100060])
            ("completion-help-at-point" function (:user-visible-flag t) nil [100062 101828])
            ("let" code nil nil [101849 102013])
            ("minibuffer-local-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote minibuffer-complete)) (define-key map " " (quote minibuffer-complete-word)) (define-key map "?" (quote minibuffer-completion-help)) map)) nil [102015 102518])
            ("minibuffer-local-must-match-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-completion-map) (define-key map "" (quote minibuffer-complete-and-exit)) (define-key map "
" (quote minibuffer-complete-and-exit)) map)) nil [102520 102849])
            ("minibuffer-local-filename-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " nil) map)) nil [102851 103146])
            ("define-obsolete-variable-alias" code nil nil [103148 103273])
            ("minibuffer-local-filename-must-match-map" variable (:default-value (make-sparse-keymap)) nil [103274 103344])
            ("make-obsolete-variable" code nil nil [103345 103422])
            ("let" code nil nil [103424 103587])
            ("minibuffer-inactive-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map "e" (quote find-file-other-frame)) (define-key map "f" (quote find-file-other-frame)) (define-key map "b" (quote switch-to-buffer-other-frame)) (define-key map "i" (quote info)) (define-key map "m" (quote mail)) (define-key map "n" (quote make-frame)) (define-key map [mouse-1] (quote view-echo-area-messages)) (define-key map [down-mouse-1] (function ignore)) map)) nil [103589 104365])
            ("define-derived-mode" code nil nil [104367 104694])
            ("minibuffer--double-dollars" function (:arguments ("str")) nil [104720 104976])
            ("completion--make-envvar-table" function nil nil [104978 105144])
            ("completion--embedded-envvar-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:^\\|[^$]\\(?:\\$\\$\\)*\\)" "$\\([[:alnum:]_]*\\|{\\([^}]*\\)\\)\\'"))
                nil [105146 105415])
            ("completion--embedded-envvar-table" function (:arguments ("string" "_pred" "action")) nil [105417 107864])
            ("completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [107866 110594])
            ("read-file-name-predicate" variable nil nil [110653 110747])
            ("make-obsolete-variable" code nil nil [110748 110861])
            ("completion--sifn-requote" function (:arguments ("upos" "qstr")) nil [110863 113246])
            ("defalias" code nil nil [113248 113682])
            ("defalias" code nil nil [113684 113907])
            ("read-file-name-function" variable (:default-value (quote read-file-name-default)) nil [113909 114082])
            ("insert-default-directory" variable (:default-value t) nil [114084 115123])
            ("declare-function" code nil nil [115205 115325])
            ("read-file-name--defaults" function (:arguments ("dir" "initial")) nil [115327 116517])
            ("read-file-name" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [116519 119603])
            ("minibuffer-local-filename-syntax" variable (:default-value (let ((table (make-syntax-table)) (punctuation (car (string-to-syntax ".")))) (map-char-table (lambda (c syntax) (when (eq (car syntax) punctuation) (modify-syntax-entry c "_" table))) table) (mapc (lambda (c) (modify-syntax-entry c "." table)) (quote (47 58 92))) table)) nil [119605 120077])
            ("read-file-name-default" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [120667 127884])
            ("internal-complete-buffer-except" function (:arguments ("buffer")) nil [127886 128385])
            ("completion-emacs21-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [128445 128664])
            ("completion-emacs21-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [128666 128880])
            ("completion-emacs22-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [128882 129919])
            ("completion-emacs22-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [129921 130193])
            ("completion--merge-suffix" function (:arguments ("completion" "point" "suffix")) nil [130218 130899])
            ("completion-basic--pattern" function (:arguments ("beforepoint" "afterpoint" "bounds")) nil [130901 131096])
            ("completion-basic-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [131098 132378])
            ("completion-basic-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [132380 133063])
            ("completion-pcm--delim-wild-regex" variable nil nil [133112 133564])
            ("completion-pcm--prepare-delim-re" function (:arguments ("delims")) nil [133566 133682])
            ("completion-pcm-word-delimiters" variable (:default-value "-_./:| ") nil [133684 134325])
            ("completion-pcm-complete-word-inserts-delimiters" variable nil nil [134327 134764])
            ("completion-pcm--pattern-trivial-p" function (:arguments ("pattern")) nil [134766 135051])
            ("completion-pcm--string->pattern" function (:arguments ("string" "point")) nil [135053 137510])
            ("completion-pcm--optimize-pattern" function (:arguments ("p")) nil [137512 138447])
            ("completion-pcm--pattern->regex" function (:arguments ("pattern" "group")) nil [138449 139259])
            ("completion-pcm--all-completions" function (:arguments ("prefix" "pattern" "table" "pred")) nil [139261 140514])
            ("completion-pcm--hilit-commonality" function (:arguments ("pattern" "completions")) nil [140516 141316])
            ("completion-pcm--find-all-completions" function (:arguments ("string" "table" "pred" "point" "filter")) nil [141318 146552])
            ("completion-pcm-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [146554 146854])
            ("completion--sreverse" function (:arguments ("str")) nil [146856 147003])
            ("completion--common-suffix" function (:arguments ("strs")) nil [147005 147188])
            ("completion-pcm--merge-completions" function (:arguments ("strs" "pattern")) nil [147190 152221])
            ("completion-pcm--pattern->string" function (:arguments ("pattern")) nil [152223 152494])
            ("completion-pcm--filename-try-filter" function (:arguments ("all")) nil [153118 153506])
            ("completion-pcm--merge-try" function (:arguments ("pattern" "all" "prefix" "suffix")) nil [153509 155361])
            ("completion-pcm-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [155363 155739])
            ("completion-substring--all-completions" function (:arguments ("string" "table" "pred" "point")) nil [155822 156557])
            ("completion-substring-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [156559 156946])
            ("completion-substring-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [156948 157283])
            ("completion-initials-expand" function (:arguments ("str" "table" "pred")) nil [157378 159027])
            ("completion-initials-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [159029 159256])
            ("completion-initials-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [159258 159483])
            ("completing-read-function" variable (:default-value (quote completing-read-default)) nil [159486 159663])
            ("completing-read-default" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [159665 161448])
            ("minibuffer-insert-file-name-at-point" function (:user-visible-flag t) nil [161469 161842])
            ("minibuffer" package nil nil [161844 161865]))          
      :file "minibuffer.el.gz"
      :pointmax 161895
      :fsize 42602
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 4246 . 4247) (symbol 4211 . 4228) (open-paren 4210 . 4211))))
  :file "!usr!share!emacs!24.5!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
