;; Object lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "lisp/"
  :tables
  (list
    (semanticdb-table "cus-face.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [941 972])
            ("custom-declare-face" function (:arguments ("face" "spec" "doc" "args")) nil [997 1433])
            ("custom-face-attributes" variable
               (:constant-flag t
                :default-value (quote ((:family (string :tag "Font Family" :help-echo "Font family or fontset alias name.")) (:foundry (string :tag "Font Foundry" :help-echo "Font foundry name.")) (:width (choice :tag "Width" :help-echo "Font width." :value normal (const :tag "compressed" condensed) (const :tag "condensed" condensed) (const :tag "demiexpanded" semi-expanded) (const :tag "expanded" expanded) (const :tag "extracondensed" extra-condensed) (const :tag "extraexpanded" extra-expanded) (const :tag "medium" normal) (const :tag "narrow" condensed) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semicondensed" semi-condensed) (const :tag "semiexpanded" semi-expanded) (const :tag "ultracondensed" ultra-condensed) (const :tag "ultraexpanded" ultra-expanded) (const :tag "wide" extra-expanded))) (:height (choice :tag "Height" :help-echo "Face's font height." :value 1.0 (integer :tag "Height in 1/10 pt") (number :tag "Scale" 1.0))) (:weight (choice :tag "Weight" :help-echo "Font weight." :value normal (const :tag "black" ultra-bold) (const :tag "bold" bold) (const :tag "book" semi-light) (const :tag "demibold" semi-bold) (const :tag "extralight" extra-light) (const :tag "extrabold" extra-bold) (const :tag "heavy" extra-bold) (const :tag "light" light) (const :tag "medium" normal) (const :tag "normal" normal) (const :tag "regular" normal) (const :tag "semibold" semi-bold) (const :tag "semilight" semi-light) (const :tag "ultralight" ultra-light) (const :tag "ultrabold" ultra-bold) (const :tag "thin" thin))) (:slant (choice :tag "Slant" :help-echo "Font slant." :value normal (const :tag "italic" italic) (const :tag "oblique" oblique) (const :tag "normal" normal) (const :tag "roman" roman))) (:underline (choice :tag "Underline" :help-echo "Control text underlining." (const :tag "Off" nil) (list :tag "On" :value (:color foreground-color :style line) (const :format "" :value :color) (choice :tag "Color" (const :tag "Foreground Color" foreground-color) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Line" line) (const :tag "Wave" wave)))) (lambda (real-value) (and real-value (let ((color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) (quote foreground-color))) (style (or (and (consp real-value) (plist-get real-value :style)) (quote line)))) (list :color color :style style)))) (lambda (cus-value) (and cus-value (let ((color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((eq style (quote line)) (if (eq color (quote foreground-color)) t color)) (t (\` (:color (\, color) :style (\, style))))))))) (:overline (choice :tag "Overline" :help-echo "Control text overlining." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:strike-through (choice :tag "Strike-through" :help-echo "Control text strike-through." (const :tag "Off" nil) (const :tag "On" t) (color :tag "Colored"))) (:box (choice :tag "Box around text" :help-echo "Control box around text." (const :tag "Off" nil) (list :tag "Box" :value (:line-width 2 :color "grey75" :style released-button) (const :format "" :value :line-width) (integer :tag "Width") (const :format "" :value :color) (choice :tag "Color" (const :tag "*" nil) color) (const :format "" :value :style) (choice :tag "Style" (const :tag "Raised" released-button) (const :tag "Sunken" pressed-button) (const :tag "None" nil)))) (lambda (real-value) (and real-value (let ((lwidth (or (and (consp real-value) (plist-get real-value :line-width)) (and (integerp real-value) real-value) 1)) (color (or (and (consp real-value) (plist-get real-value :color)) (and (stringp real-value) real-value) nil)) (style (and (consp real-value) (plist-get real-value :style)))) (list :line-width lwidth :color color :style style)))) (lambda (cus-value) (and cus-value (let ((lwidth (plist-get cus-value :line-width)) (color (plist-get cus-value :color)) (style (plist-get cus-value :style))) (cond ((and (null color) (null style)) lwidth) ((and (null lwidth) (null style)) color) (t (nconc (and lwidth (\` (:line-width (\, lwidth)))) (and color (\` (:color (\, color)))) (and style (\` (:style (\, style))))))))))) (:inverse-video (choice :tag "Inverse-video" :help-echo "Control whether text should be in inverse-video." (const :tag "Off" nil) (const :tag "On" t))) (:foreground (color :tag "Foreground" :help-echo "Set foreground color (name or #RRGGBB hex spec).")) (:distant-foreground (color :tag "Distant Foreground" :help-echo "Set distant foreground color (name or #RRGGBB hex spec).")) (:background (color :tag "Background" :help-echo "Set background color (name or #RRGGBB hex spec).")) (:stipple (choice :tag "Stipple" :help-echo "Background bit-mask" (const :tag "None" nil) (file :tag "File" :help-echo "Name of bitmap file." :must-match t))) (:inherit (repeat :tag "Inherit" :help-echo "List of faces to inherit attributes from." (face :Tag "Face" default)) (lambda (real-value) (cond ((or (null real-value) (eq real-value (quote unspecified))) nil) ((symbolp real-value) (list real-value)) (t real-value))) (lambda (cus-value) (if (and (consp cus-value) (null (cdr cus-value))) (car cus-value) cus-value))))))
                nil [1457 8954])
            ("custom-face-attributes-get" function (:arguments ("face" "frame")) nil [8956 9591])
            ("custom-set-faces" function (:arguments ("args")) nil [9612 10034])
            ("custom-theme-set-faces" function (:arguments ("theme" "args")) nil [10036 12339])
            ("custom-theme-reset-faces" function (:arguments ("theme" "args")) nil [12501 12857])
            ("custom-reset-faces" function (:arguments ("args")) nil [12859 13175])
            ("cus-face" package nil nil [13191 13210]))          
      :file "cus-face.el.gz"
      :pointmax 13238
      :fsize 3966
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "subr.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_arglist" "_fileonly")) nil [1111 2631])
            ("defalias" code nil nil [2660 2681])
            ("noreturn" function (:arguments ("form")) nil [2683 2887])
            ("1value" function (:arguments ("form")) nil [2889 3127])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3129 3589])
            ("lambda" function (:arguments ("cdr")) nil [3591 4749])
            ("setq-local" function (:arguments ("var" "val")) nil [4751 4963])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [4965 5406])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5408 5823])
            ("push" function (:arguments ("newelt" "place")) nil [5825 6419])
            ("pop" function (:arguments ("place")) nil [6421 7232])
            ("when" function (:arguments ("cond" "body")) nil [7234 7522])
            ("unless" function (:arguments ("cond" "body")) nil [7524 7810])
            ("dolist" function (:arguments ("spec" "body")) nil [7812 9091])
            ("dotimes" function (:arguments ("spec" "body")) nil [9093 10558])
            ("declare" function (:arguments ("_specs")) nil [10560 11075])
            ("ignore-errors" function (:arguments ("body")) nil [11077 11384])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11415 11563])
            ("error" function (:arguments ("args")) nil [11620 12006])
            ("user-error" function (:arguments ("format" "args")) nil [12008 12534])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [12536 13448])
            ("frame-configuration-p" function (:arguments ("object")) nil [13562 13817])
            ("caar" function (:arguments ("x")) nil [13842 13913])
            ("cadr" function (:arguments ("x")) nil [13915 13986])
            ("cdar" function (:arguments ("x")) nil [13988 14059])
            ("cddr" function (:arguments ("x")) nil [14061 14132])
            ("last" function (:arguments ("list" "n")) nil [14134 14551])
            ("butlast" function (:arguments ("list" "n")) nil [14553 14781])
            ("nbutlast" function (:arguments ("list" "n")) nil [14783 15060])
            ("delete-dups" function (:arguments ("list")) nil [15062 15415])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [15492 15960])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [15962 17779])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [17781 18530])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [18570 19370])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [19372 19694])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [19696 19964])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [19966 20401])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [20403 20887])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [20889 21382])
            ("remove" function (:arguments ("elt" "seq")) nil [21384 21737])
            ("remq" function (:arguments ("elt" "list")) nil [21739 22070])
            ("kbd" function (:arguments ("keys")) nil [22095 22405])
            ("put" code nil nil [22406 22424])
            ("undefined" function (:user-visible-flag t) nil [22426 22881])
            ("put" code nil nil [22976 23011])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [23013 23577])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [23579 24231])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [24233 26294])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [26296 26976])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [26978 27448])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [27502 28102])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [28104 28570])
            ("keymap-canonicalize" function (:arguments ("map")) nil [28572 30441])
            ("put" code nil nil [30443 30500])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [30502 30877])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [30908 31654])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [31656 32460])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [32462 32658])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [32660 32889])
            ("key-substitution-in-progress" variable nil nil [32945 33038])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [33040 34424])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [34426 36091])
            ("global-map" variable nil nil [36240 36414])
            ("esc-map" variable nil nil [36416 36556])
            ("ctl-x-map" variable nil nil [36558 36693])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [36695 36773])
            ("defalias" code nil nil [36774 36812])
            ("define-key" code nil nil [36813 36855])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [36857 36929])
            ("defalias" code nil nil [36930 36968])
            ("define-key" code nil nil [36969 37011])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [37051 37106])
            ("listify-key-sequence" function (:arguments ("key")) nil [37108 37346])
            ("eventp" function (:arguments ("obj")) nil [37348 37549])
            ("event-modifiers" function (:arguments ("event")) nil [37551 38845])
            ("event-basic-type" function (:arguments ("event")) nil [38847 39615])
            ("mouse-movement-p" function (:arguments ("object")) nil [39617 39750])
            ("mouse-event-p" function (:arguments ("object")) nil [39752 39970])
            ("event-start" function (:arguments ("event")) nil [39972 41132])
            ("event-end" function (:arguments ("event")) nil [41134 41452])
            ("event-click-count" function (:arguments ("event")) nil [41454 41664])
            ("posnp" function (:arguments ("obj")) nil [41721 42303])
            ("posn-window" function (:arguments ("position")) nil [42337 42519])
            ("posn-area" function (:arguments ("position")) nil [42521 42845])
            ("posn-point" function (:arguments ("position")) nil [42847 43313])
            ("posn-set-point" function (:arguments ("position")) nil [43315 43635])
            ("posn-x-y" function (:arguments ("position")) nil [43637 43890])
            ("declare-function" code nil nil [43892 43958])
            ("posn-col-row" function (:arguments ("position")) nil [43960 45778])
            ("posn-actual-col-row" function (:arguments ("position")) nil [45780 46370])
            ("posn-timestamp" function (:arguments ("position")) nil [46372 46560])
            ("posn-string" function (:arguments ("position")) nil [46562 46921])
            ("posn-image" function (:arguments ("position")) nil [46923 47163])
            ("posn-object" function (:arguments ("position")) nil [47165 47534])
            ("posn-object-x-y" function (:arguments ("position")) nil [47536 47823])
            ("posn-object-width-height" function (:arguments ("position")) nil [47825 48085])
            ("define-obsolete-function-alias" code nil nil [48128 48193])
            ("define-obsolete-function-alias" code nil nil [48194 48267])
            ("define-obsolete-function-alias" code nil nil [48268 48332])
            ("define-obsolete-function-alias" code nil nil [48333 48404])
            ("define-obsolete-function-alias" code nil nil [48405 48478])
            ("define-obsolete-function-alias" code nil nil [48479 48551])
            ("make-obsolete" code nil nil [48553 48619])
            ("make-obsolete" code nil nil [48620 48669])
            ("insert-string" function (:arguments ("args")) nil [48671 48989])
            ("makehash" function (:arguments ("test")) nil [48991 49111])
            ("log10" function (:arguments ("x")) nil [49113 49222])
            ("defalias" code nil nil [49270 49304])
            ("make-obsolete" code nil nil [49305 49359])
            ("defalias" code nil nil [49360 49396])
            ("make-obsolete" code nil nil [49397 49453])
            ("make-obsolete" code nil nil [49454 49561])
            ("set-advertised-calling-convention" code nil nil [49562 49663])
            ("set-advertised-calling-convention" code nil nil [49664 49732])
            ("set-advertised-calling-convention" code nil nil [49733 49818])
            ("set-advertised-calling-convention" code nil nil [49819 49888])
            ("set-advertised-calling-convention" code nil nil [49889 49958])
            ("make-obsolete-variable" code nil nil [50363 50438])
            ("make-obsolete-variable" code nil nil [50439 50518])
            ("make-obsolete-variable" code nil nil [50519 50586])
            ("make-obsolete-variable" code nil nil [50587 50652])
            ("make-obsolete-variable" code nil nil [50653 50714])
            ("make-obsolete-variable" code nil nil [50715 50786])
            ("make-obsolete-variable" code nil nil [50787 50852])
            ("make-obsolete-variable" code nil nil [50853 50914])
            ("make-obsolete-variable" code nil nil [50915 50990])
            ("make-obsolete-variable" code nil nil [50991 51068])
            ("make-obsolete-variable" code nil nil [51069 51148])
            ("make-obsolete-variable" code nil nil [51149 51226])
            ("make-obsolete-variable" code nil nil [51227 51306])
            ("make-obsolete-variable" code nil nil [51307 51396])
            ("make-obsolete-variable" code nil nil [51397 51472])
            ("make-obsolete-variable" code nil nil [51473 51554])
            ("make-obsolete-variable" code nil nil [51555 51638])
            ("make-obsolete-variable" code nil nil [51639 51734])
            ("make-obsolete-variable" code nil nil [51735 51822])
            ("make-obsolete-variable" code nil nil [51823 51904])
            ("make-obsolete-variable" code nil nil [51905 51992])
            ("make-obsolete-variable" code nil nil [51993 52084])
            ("make-obsolete-variable" code nil nil [52085 52150])
            ("make-obsolete-variable" code nil nil [52151 52216])
            ("make-obsolete-variable" code nil nil [52217 52320])
            ("make-obsolete-variable" code nil nil [52321 52414])
            ("make-obsolete-variable" code nil nil [52415 52478])
            ("make-obsolete-variable" code nil nil [52479 52619])
            ("make-obsolete-variable" code nil nil [52621 52685])
            ("make-obsolete-variable" code nil nil [52686 52769])
            ("make-obsolete-variable" code nil nil [52770 52842])
            ("make-obsolete-variable" code nil nil [52843 52919])
            ("make-obsolete-variable" code nil nil [52920 52977])
            ("make-obsolete" code nil nil [52978 53034])
            ("make-obsolete" code nil nil [53035 53095])
            ("make-obsolete" code nil nil [53097 53151])
            ("make-obsolete" code nil nil [53152 53208])
            ("define-obsolete-variable-alias" code nil nil [53247 53334])
            ("define-obsolete-variable-alias" code nil nil [53336 53429])
            ("define-obsolete-variable-alias" code nil nil [53430 53523])
            ("make-obsolete-variable" code nil nil [53769 53833])
            ("defvaralias" code nil nil [53835 53892])
            ("defalias" code nil nil [53965 54009])
            ("defalias" code nil nil [54010 54054])
            ("defalias" code nil nil [54055 54088])
            ("defalias" code nil nil [54089 54122])
            ("defalias" code nil nil [54123 54158])
            ("defalias" code nil nil [54159 54185])
            ("defalias" code nil nil [54186 54212])
            ("defalias" code nil nil [54213 54235])
            ("defalias" code nil nil [54261 54300])
            ("defalias" code nil nil [54301 54355])
            ("defalias" code nil nil [54356 54426])
            ("defalias" code nil nil [54427 54499])
            ("defalias" code nil nil [54500 54543])
            ("defalias" code nil nil [54544 54588])
            ("defalias" code nil nil [54589 54622])
            ("defalias" code nil nil [54623 54656])
            ("defalias" code nil nil [54688 54731])
            ("defalias" code nil nil [54732 54781])
            ("defalias" code nil nil [54783 54836])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [54875 57004])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [57006 58674])
            ("letrec" function (:arguments ("binders" "body")) nil [58676 59305])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [59307 62360])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [62362 65709])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [65712 67031])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [67033 68245])
            ("delay-mode-hooks" variable nil nil [68267 68361])
            ("delayed-mode-hooks" variable nil nil [68362 68443])
            ("make-variable-buffer-local" code nil nil [68444 68492])
            ("put" code nil nil [68493 68535])
            ("change-major-mode-after-body-hook" variable nil nil [68537 68651])
            ("after-change-major-mode-hook" variable nil nil [68653 68755])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [68757 69640])
            ("delay-mode-hooks" function (:arguments ("body")) nil [69642 70043])
            ("derived-mode-p" function (:arguments ("modes")) nil [70104 70417])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [70608 70801])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [70803 73488])
            ("autoloadp" function (:arguments ("object")) nil [73510 73612])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [74096 75303])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [75305 76711])
            ("process-lines" function (:arguments ("program" "args")) nil [76736 77341])
            ("process-live-p" function (:arguments ("process")) nil [77343 77656])
            ("make-obsolete" code nil nil [77676 77801])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [77802 78146])
            ("process-kill-buffer-query-function" function nil nil [78148 78567])
            ("add-hook" code nil nil [78569 78644])
            ("process-get" function (:arguments ("process" "propname")) nil [78675 78887])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [78889 79128])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [79168 79218])
            ("read-key-delay" variable (:default-value 0.01) nil [79220 79248])
            ("read-key" function (:arguments ("prompt")) nil [79297 82003])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [82005 82342])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [82344 85116])
            ("read-number" function (:arguments ("prompt" "default")) nil [85118 86188])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [86190 87929])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [87931 90275])
            ("declare-function" code nil nil [90315 90394])
            ("y-or-n-p" function (:arguments ("prompt")) nil [90396 93874])
            ("atomic-change-group" function (:arguments ("body")) nil [93905 95111])
            ("prepare-change-group" function (:arguments ("buffer")) nil [95113 96589])
            ("activate-change-group" function (:arguments ("handle")) nil [96591 96829])
            ("accept-change-group" function (:arguments ("handle")) nil [96831 97122])
            ("cancel-change-group" function (:arguments ("handle")) nil [97124 98295])
            ("define-obsolete-function-alias" code nil nil [98353 98435])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [98437 99937])
            ("copy-overlay" function (:arguments ("o")) nil [99966 100540])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [100542 101550])
            ("suspend-hook" variable nil nil [101572 101656])
            ("suspend-resume-hook" variable nil nil [101658 101756])
            ("temp-buffer-show-hook" variable nil nil [101758 101974])
            ("temp-buffer-setup-hook" variable nil nil [101976 102207])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [102209 102584])
            ("buffer-narrowed-p" function nil nil [102617 102751])
            ("find-tag-default-bounds" function nil nil [102753 103756])
            ("find-tag-default" function nil nil [103758 104024])
            ("find-tag-default-as-regexp" function nil nil [104026 104461])
            ("find-tag-default-as-symbol-regexp" function nil nil [104463 105022])
            ("play-sound" function (:arguments ("sound")) nil [105024 105843])
            ("declare-function" code nil nil [105845 105901])
            ("shell-quote-argument" function (:arguments ("argument")) nil [105903 108048])
            ("string-or-null-p" function (:arguments ("object")) nil [108050 108187])
            ("booleanp" function (:arguments ("object")) nil [108189 108347])
            ("special-form-p" function (:arguments ("object")) nil [108349 108594])
            ("macrop" function (:arguments ("object")) nil [108596 108828])
            ("field-at-pos" function (:arguments ("pos")) nil [108830 109100])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [109102 109465])
            ("defalias" code nil nil [109467 109820])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [109822 110632])
            ("yank-handled-properties" variable nil nil [110739 110771])
            ("yank-excluded-properties" variable nil nil [110772 110805])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [110807 111596])
            ("yank-undo-function" variable nil nil [111598 111625])
            ("insert-for-yank" function (:arguments ("string")) nil [111627 111986])
            ("insert-for-yank-1" function (:arguments ("string")) nil [111988 114338])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [114340 114825])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [114827 115513])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [115515 115827])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [115966 116404])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [116442 117426])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [117428 117920])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [117922 119563])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [119565 120114])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [120169 120557])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [120559 121079])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [121081 121641])
            ("with-selected-window" function (:arguments ("window" "body")) nil [121643 122781])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [122783 123524])
            ("save-window-excursion" function (:arguments ("body")) nil [123526 124345])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [124347 125742])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [125795 128248])
            ("with-temp-file" function (:arguments ("file" "body")) nil [128250 128945])
            ("with-temp-message" function (:arguments ("message" "body")) nil [128947 129874])
            ("with-temp-buffer" function (:arguments ("body")) nil [129876 130435])
            ("with-silent-modifications" function (:arguments ("body")) nil [130437 131635])
            ("with-output-to-string" function (:arguments ("body")) nil [131637 132082])
            ("with-local-quit" function (:arguments ("body")) nil [132084 132839])
            ("while-no-input" function (:arguments ("body")) nil [132841 133341])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [133343 133896])
            ("define-obsolete-function-alias" code nil nil [133898 133993])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [133995 134932])
            ("combine-after-change-calls" function (:arguments ("body")) nil [134934 135629])
            ("with-case-table" function (:arguments ("table" "body")) nil [135631 136152])
            ("save-match-data-internal" variable nil nil [136185 136218])
            ("save-match-data" function (:arguments ("body")) nil [136476 137156])
            ("match-string" function (:arguments ("num" "string")) nil [137158 137803])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [137805 138529])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [138532 139181])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [139184 140369])
            ("looking-at-p" function (:arguments ("regexp")) nil [140371 140549])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [140551 140771])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [140773 142683])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [142705 143058])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [143320 146436])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [146438 146999])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [147001 147637])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [147671 148075])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [148077 150656])
            ("string-prefix-p" function (:arguments ("str1" "str2" "ignore-case")) nil [150659 150958])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [150960 151369])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [151371 152154])
            ("load-history-regexp" function (:arguments ("file")) nil [152194 152830])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [152832 153268])
            ("put" code nil nil [153270 153316])
            ("eval-after-load" function (:arguments ("file" "form")) nil [153317 157198])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [157200 157480])
            ("after-load-functions" variable nil nil [157482 157655])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [157657 159196])
            ("eval-next-after-load" function (:arguments ("file")) nil [159198 159498])
            ("display-delayed-warnings" function nil nil [159502 159769])
            ("collapse-delayed-warnings" function nil nil [159771 160450])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [160580 160920])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [160922 161177])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [161206 161549])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [161551 161775])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [161799 162435])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [162437 162757])
            ("syntax-after" function (:arguments ("pos")) nil [162759 163132])
            ("syntax-class" function (:arguments ("syntax")) nil [163134 163486])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163533 164116])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164131 164680])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164701 165183])
            ("text-clone--maintaining" variable nil nil [165205 165241])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [165243 167309])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [167311 169559])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [169667 171245])
            ("called-interactively-p-functions" variable nil nil [171248 171665])
            ("internal--call-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote call-interactively)))
                nil [171667 171744])
            ("called-interactively-p" function (:arguments ("kind")) nil [171746 175843])
            ("interactive-p" function nil nil [175845 176855])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [176857 177202])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [177204 177512])
            ("define-obsolete-function-alias" code nil nil [177514 177601])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [177603 179906])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [180489 181256])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [181258 183103])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [183105 183604])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [183606 183723])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [183725 185431])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [185433 185588])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [185590 186694])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [186731 186890])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-_+ ]?snapshot$" . -4) ("^[-_+]$" . -4) ("^[-_+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-_+ ]?alpha$" . -3) ("^[-_+ ]?beta$" . -2) ("^[-_+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [186893 188388])
            ("version-to-list" function (:arguments ("ver")) nil [188391 190795])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [190798 191629])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [191632 192431])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [192434 193219])
            ("version-list-not-zero" function (:arguments ("lst")) nil [193221 193531])
            ("version<" function (:arguments ("v1" "v2")) nil [193534 194038])
            ("version<=" function (:arguments ("v1" "v2")) nil [194040 194558])
            ("version=" function (:arguments ("v1" "v2")) nil [194560 195054])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [195068 195130])
            ("when" code nil nil [195292 195417])
            ("unmsys--file-name" function (:arguments ("file")) nil [195550 196037]))          
      :file "subr.el.gz"
      :pointmax 196062
      :fsize 58331
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "simple.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1051 1068])
            ("declare-function" code nil nil [1071 1133])
            ("declare-function" code nil nil [1134 1174])
            ("compilation-current-error" variable nil nil [1196 1230])
            ("compilation-context-lines" variable nil nil [1231 1265])
            ("idle-update-delay" variable (:default-value 0.5) nil [1267 1564])
            ("killing" customgroup (:user-visible-flag t) nil [1566 1640])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1642 1744])
            ("next-error" customgroup (:user-visible-flag t) nil [1781 1882])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1884 2015])
            ("next-error-highlight" variable (:default-value 0.5) nil [2017 2772])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2774 3467])
            ("next-error-recenter" variable nil nil [3469 3831])
            ("next-error-hook" variable nil nil [3833 3974])
            ("next-error-highlight-timer" variable nil nil [3976 4015])
            ("next-error-overlay-arrow-position" variable nil nil [4017 4063])
            ("put" code nil nil [4064 4142])
            ("add-to-list" code nil nil [4143 4220])
            ("next-error-last-buffer" variable nil nil [4222 4449])
            ("next-error-function" variable nil nil [4451 4909])
            ("make-variable-buffer-local" code nil nil [4910 4959])
            ("next-error-move-function" variable nil nil [4961 5274])
            ("make-variable-buffer-local" code nil nil [5275 5329])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5331 6374])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6376 8658])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8660 10429])
            ("next-error-internal" function nil nil [10431 10852])
            ("defalias" code nil nil [10854 10893])
            ("defalias" code nil nil [10894 10928])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10930 11247])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11249 11517])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11519 11971])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11973 12351])
            ("next-error-follow-last-line" variable nil nil [12422 12462])
            ("define-minor-mode" code nil nil [12464 13172])
            ("next-error-follow-mode-post-command-hook" function nil nil [13288 13621])
            ("fundamental-mode" function (:user-visible-flag t) nil [13630 13839])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13917 14401])
            ("put" code nil nil [14403 14443])
            ("define-derived-mode" code nil nil [14444 14589])
            ("self-insert-uses-region-functions" variable nil nil [14622 14995])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [14997 15130])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [15132 18256])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [18258 18606])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18608 19320])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19322 20123])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20125 20838])
            ("defalias" code nil nil [20840 20882])
            ("delete-blank-lines" function (:user-visible-flag t) nil [20901 22328])
            ("delete-trailing-lines" variable (:default-value t) nil [22330 22616])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22618 24424])
            ("newline-and-indent" function (:user-visible-flag t) nil [24426 24859])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [24861 26087])
            ("read-quoted-char-radix" variable (:default-value 8) nil [26089 26310])
            ("read-quoted-char" function (:arguments ("prompt")) nil [26312 28852])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [28854 30883])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30885 31078])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31080 31279])
            ("back-to-indentation" function (:user-visible-flag t) nil [31281 31571])
            ("fixup-whitespace" function (:user-visible-flag t) nil [31573 31912])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [31914 32352])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [32354 32603])
            ("cycle-spacing--context" variable nil nil [32605 32842])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "single-shot"))
                nil [32844 34999])
            ("beginning-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35002 35903])
            ("put" code nil nil [35904 35994])
            ("end-of-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35996 37221])
            ("put" code nil nil [37222 37301])
            ("delete-active-region" variable (:default-value t) nil [37303 37840])
            ("region-extract-function" variable (:default-value (lambda (delete) (when (region-beginning) (if (eq delete (quote delete-only)) (delete-region (region-beginning) (region-end)) (filter-buffer-substring (region-beginning) (region-end) delete))))) nil [37842 38385])
            ("delete-backward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [38387 39806])
            ("put" code nil nil [39807 39865])
            ("delete-forward-char" function
               (:user-visible-flag t
                :arguments ("n" "killflag"))
                nil [39867 40792])
            ("put" code nil nil [40793 40850])
            ("mark-whole-buffer" function (:user-visible-flag t) nil [40852 41256])
            ("goto-line" function
               (:user-visible-flag t
                :arguments ("line" "buffer"))
                nil [41300 43533])
            ("put" code nil nil [43534 43582])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [43584 44266])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [44268 45052])
            ("count-words--buffer-message" function nil nil [45054 45207])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [45209 45534])
            ("define-obsolete-function-alias" code nil nil [45536 45615])
            ("what-line" function (:user-visible-flag t) nil [45617 45968])
            ("count-lines" function (:arguments ("start" "end")) nil [45970 46807])
            ("line-number-at-pos" function (:arguments ("pos")) nil [46809 47269])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [47271 51608])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [51673 51988])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [51990 52513])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [52515 52972])
            ("minibuffer-completing-symbol" variable nil nil [52974 53077])
            ("make-obsolete-variable" code nil nil [53078 53148])
            ("minibuffer-default" variable nil nil [53150 53343])
            ("eval-expression-print-level" variable (:default-value 4) nil [53345 53575])
            ("eval-expression-print-length" variable (:default-value 12) nil [53577 53810])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [53812 54021])
            ("eval-expression-print-format" function (:arguments ("value")) nil [54023 54667])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [54669 54783])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [54785 55263])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value"))
                nil [55393 57667])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [57669 58596])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [58598 60645])
            ("repeat-complex-command--called-interactively-skip" function (:arguments ("i" "_frame1" "frame2")) nil [60647 60864])
            ("extended-command-history" variable nil nil [60866 60903])
            ("read-extended-command" function nil nil [60905 62429])
            ("suggest-key-bindings" variable (:default-value t) nil [62431 62797])
            ("execute-extended-command" function
               (:user-visible-flag t
                :arguments ("prefixarg" "command-name"))
                nil [62799 65269])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [65271 67656])
            ("minibuffer-history" variable nil nil [67659 67912])
            ("minibuffer-history-sexp-flag" variable nil nil [67913 68228])
            ("setq" code nil nil [68229 68283])
            ("setq" code nil nil [68284 68322])
            ("minibuffer-history-search-history" variable nil nil [68348 68394])
            ("minibuffer-text-before-history" variable nil nil [68396 68596])
            ("add-hook" code nil nil [68598 68662])
            ("minibuffer-history-initialize" function nil nil [68664 68748])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [68750 68912])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [68914 69304])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [69306 72150])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [72152 73206])
            ("minibuffer-temporary-goal-position" variable nil nil [73208 73255])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [73257 73897])
            ("minibuffer-default-add-done" variable nil nil [73899 74222])
            ("make-variable-buffer-local" code nil nil [74224 74281])
            ("minibuffer-default-add-completions" function nil nil [74283 74737])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [74739 76931])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [76933 77184])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [77186 77444])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [77446 78102])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [78104 78389])
            ("minibuffer-prompt-width" function nil nil [78448 78737])
            ("add-hook" code nil nil [78770 78837])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [78839 78890])
            ("make-variable-buffer-local" code nil nil [78891 78963])
            ("minibuffer-history-isearch-setup" function nil nil [78965 79605])
            ("minibuffer-history-isearch-end" function nil nil [79607 79837])
            ("minibuffer-history-isearch-search" function nil nil [79839 81744])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [81746 83143])
            ("minibuffer-history-isearch-wrap" function nil nil [83145 83762])
            ("minibuffer-history-isearch-push-state" function nil nil [83764 84095])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [84097 84309])
            ("define-obsolete-function-alias" code nil nil [84387 84449])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [84451 84694])
            ("undo-in-region" variable nil nil [84696 84800])
            ("undo-no-redo" variable nil nil [84802 84877])
            ("pending-undo-list" variable nil nil [84879 85030])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85032 89653])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [89655 89936])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [89938 90200])
            ("undo-in-progress" variable nil nil [90202 90333])
            ("undo-more" function (:arguments ("n")) nil [90335 91030])
            ("primitive-undo" function (:arguments ("n" "list")) nil [91032 97432])
            ("undo-copy-list" function (:arguments ("list")) nil [97457 97555])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [97557 97666])
            ("undo-start" function (:arguments ("beg" "end")) nil [97668 98256])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [98258 101835])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [101837 102876])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [102878 103386])
            ("undo-delta" function (:arguments ("undo-elt")) nil [103557 103890])
            ("undo-ask-before-discard" variable nil nil [103892 104658])
            ("undo-extra-outer-limit" variable nil nil [104660 104936])
            ("make-variable-buffer-local" code nil nil [104937 104989])
            ("setq" code nil nil [105274 105333])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [105334 107023])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "\354\225\224\355\230\270" "\343\203\221\343\202\271\343\203\257\343\203\274\343\203\211" "\340\254\252\340\255\215\340\254\260\340\254\254\340\255\207\340\254\266 \340\254\270\340\254\231\340\255\215\340\254\225\340\255\207\340\254\244" "\341\236\226\341\236\266\341\236\200\341\237\222\341\236\231\341\236\237\341\236\230\341\237\222\341\236\204\341\236\266\341\236\217\341\237\213" "adgangskode" "contrase\303\261a" "contrasenya" "geslo" "has\305\202o" "heslo" "iphasiwedi" "jelsz\303\263" "l\303\266senord" "lozinka" "m\341\272\255t kh\341\272\251u" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slapta\305\276odis" "wachtwoordnil [107026 108415])
            ("shell-command-history" variable nil nil [108417 108607])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [108609 108723])
            ("shell-command-default-error-buffer" variable nil nil [108725 109040])
            ("declare-function" code nil nil [109042 109108])
            ("declare-function" code nil nil [109109 109195])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [109197 109901])
            ("declare-function" code nil nil [109903 109954])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [109956 110201])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [110203 110832])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [110834 112087])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [112089 113394])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [113396 121358])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "not-this-window" "frame")) nil [121360 123783])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [123879 124090])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer"))
                nil [124092 131348])
            ("shell-command-to-string" function (:arguments ("command")) nil [131350 131610])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [131612 133062])
            ("process-file-side-effects" variable (:default-value t) nil [133064 133490])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [133492 134377])
            ("tabulated-list-format" variable nil nil [134399 134429])
            ("tabulated-list-entries" variable nil nil [134430 134461])
            ("tabulated-list-sort-key" variable nil nil [134462 134494])
            ("declare-function" code nil nil [134495 134561])
            ("declare-function" code nil nil [134562 134661])
            ("process-menu-query-only" variable nil nil [134663 134699])
            ("define-derived-mode" code nil nil [134701 135197])
            ("list-processes--refresh" function nil nil [135199 136827])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [136829 136926])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [136928 137891])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [137894 139510])
            ("universal-argument--mode" function nil nil [139512 139592])
            ("universal-argument" function (:user-visible-flag t) nil [139594 140303])
            ("universal-argument-more" function (:arguments ("arg")) nil [140305 140743])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [140745 141085])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [141087 141821])
            ("filter-buffer-substring-functions" variable nil nil [141825 141942])
            ("make-obsolete-variable" code nil nil [141943 142067])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [142069 142475])
            ("buffer-substring-filters" variable nil nil [142477 142958])
            ("make-obsolete-variable" code nil nil [142959 143074])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [143076 143932])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [143934 144763])
            ("interprogram-cut-function" variable nil nil [144807 145344])
            ("interprogram-paste-function" variable nil nil [145346 146767])
            ("kill-ring" variable nil nil [146808 147263])
            ("kill-ring-max" variable (:default-value 60) nil [147265 147400])
            ("kill-ring-yank-pointer" variable nil nil [147402 147503])
            ("save-interprogram-paste-before-kill" variable nil nil [147505 148007])
            ("kill-do-not-save-duplicates" variable nil nil [148009 148238])
            ("kill-new" function (:arguments ("string" "replace")) nil [148240 150266])
            ("kill-append" function (:arguments ("string" "before-p")) nil [150268 150682])
            ("yank-pop-change-selection" variable nil nil [150684 151032])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [151034 152692])
            ("kill-read-only-ok" variable nil nil [152743 152879])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [152881 155604])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [155798 156698])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [156700 157756])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [157758 159334])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [159336 160156])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [160172 160997])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [161070 161533])
            ("yank-window-start" variable nil nil [161535 161565])
            ("yank-undo-function" variable nil nil [161566 161897])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [161899 163629])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [163631 165078])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165080 165270])
            ("kill-forward-chars" function (:arguments ("arg")) nil [165335 165480])
            ("kill-backward-chars" function (:arguments ("arg")) nil [165529 165675])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [165677 166152])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [166154 167506])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [167508 168125])
            ("kill-whole-line" variable nil nil [168162 168307])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [168309 170525])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170527 172156])
            ("forward-visible-line" function (:arguments ("arg")) nil [172158 174648])
            ("end-of-visible-line" function nil nil [174650 175416])
            ("insert-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [175419 176044])
            ("put" code nil nil [176045 176108])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [176110 177010])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [177012 177554])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [177556 178125])
            ("define-error" code nil nil [178128 178197])
            ("activate-mark-hook" variable nil nil [178199 178388])
            ("deactivate-mark-hook" variable nil nil [178390 178468])
            ("mark" function (:arguments ("force")) nil [178470 179094])
            ("declare-function" code nil nil [179128 179227])
            ("declare-function" code nil nil [179228 179328])
            ("deactivate-mark" function (:arguments ("force")) nil [179330 181248])
            ("activate-mark" function (:arguments ("no-tmm")) nil [181250 181635])
            ("set-mark" function (:arguments ("pos")) nil [181637 182861])
            ("use-empty-active-region" variable nil nil [182863 183359])
            ("use-region-p" function nil nil [183361 183967])
            ("region-active-p" function nil nil [183969 184630])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [184633 184739])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [184741 185612])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [185614 186294])
            ("redisplay--update-region-highlights" function (:arguments ("windows")) nil [186296 187031])
            ("add-function" code nil nil [187033 187130])
            ("defvar-local" code nil nil [187133 187232])
            ("put" code nil nil [187233 187268])
            ("mark-ring-max" variable (:default-value 16) nil [187270 187415])
            ("global-mark-ring" variable nil nil [187417 187501])
            ("global-mark-ring-max" variable (:default-value 16) nil [187503 187664])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [187666 187974])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [187976 188387])
            ("set-mark-command-repeat-pop" variable nil nil [188389 188848])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [188850 191192])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [191194 192748])
            ("pop-mark" function nil nil [192750 193169])
            ("define-obsolete-function-alias" code nil nil [193171 193260])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193261 194145])
            ("shift-select-mode" variable (:default-value t) nil [194147 194719])
            ("handle-shift-selection" function nil nil [194721 195890])
            ("define-minor-mode" code nil nil [195892 197235])
            ("widen-automatically" variable (:default-value t) nil [197237 197571])
            ("non-essential" variable nil nil [197573 197971])
            ("pop-global-mark" function (:user-visible-flag t) nil [197973 198788])
            ("next-line-add-newlines" variable nil nil [198791 198965])
            ("next-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [198967 201223])
            ("put" code nil nil [201224 201272])
            ("previous-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [201274 203008])
            ("put" code nil nil [203009 203105])
            ("track-eol" variable nil nil [203107 203445])
            ("goal-column" variable nil nil [203447 203714])
            ("make-variable-buffer-local" code nil nil [203715 203756])
            ("temporary-goal-column" variable nil nil [203758 204275])
            ("line-move-ignore-invisible" variable (:default-value t) nil [204277 204935])
            ("line-move-visual" variable (:default-value t) nil [204937 205513])
            ("declare-function" code nil nil [205550 205610])
            ("default-font-height" function nil nil [205612 206129])
            ("default-line-height" function nil nil [206131 206593])
            ("window-screen-lines" function nil nil [206595 207165])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [207212 210985])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [211309 213286])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [213434 216024])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [216178 220851])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [220853 223991])
            ("line-move-to-column" function (:arguments ("col")) nil [223993 225372])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [225374 226729])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [226731 228263])
            ("put" code nil nil [228393 228427])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [228429 229430])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [229498 230062])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [230064 230655])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [230657 232072])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [232074 232443])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [232445 232824])
            ("visual-line" customgroup (:user-visible-flag t) nil [232826 232927])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [232929 233417])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [233419 234606])
            ("visual-line--saved-state" variable nil nil [234608 234645])
            ("define-minor-mode" code nil nil [234647 236288])
            ("turn-on-visual-line-mode" function nil nil [236290 236348])
            ("define-globalized-minor-mode" code nil nil [236350 236448])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236452 236886])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236888 237332])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [237334 238805])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [238807 239414])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [239565 240763])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [240765 241769])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [241772 242024])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [242026 242778])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242780 242992])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242994 243185])
            ("current-word" function (:arguments ("strict" "really-word")) nil [243187 244667])
            ("fill-prefix" variable nil nil [244670 244836])
            ("make-variable-buffer-local" code nil nil [244837 244878])
            ("put" code nil nil [244879 244936])
            ("auto-fill-inhibit-regexp" variable nil nil [244938 245104])
            ("do-auto-fill" function nil nil [245106 248406])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [248408 248734])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [248736 249843])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [249845 250001])
            ("put" code nil nil [250003 250065])
            ("put" code nil nil [250239 250291])
            ("define-minor-mode" code nil nil [250293 251038])
            ("auto-fill-function" function nil nil [251105 251212])
            ("turn-on-auto-fill" function nil nil [251214 251307])
            ("turn-off-auto-fill" function nil nil [251309 251405])
            ("custom-add-option" code nil nil [251407 251461])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [251463 252301])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [252304 253094])
            ("defvaralias" code nil nil [253096 253154])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [253156 253936])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [253938 254482])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [254484 254601])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [254602 254729])
            ("define-minor-mode" code nil nil [254731 255464])
            ("define-minor-mode" code nil nil [255466 256394])
            ("define-minor-mode" code nil nil [256396 256872])
            ("define-minor-mode" code nil nil [256874 257178])
            ("define-minor-mode" code nil nil [257180 257488])
            ("define-minor-mode" code nil nil [257490 258486])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [258489 258620])
            ("blink-matching-paren" variable (:default-value t) nil [258622 258956])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [258958 259357])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [259359 259684])
            ("blink-matching-delay" variable (:default-value 1) nil [259686 259822])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [259824 260092])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [260094 261079])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [261081 261447])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [261449 261659])
            ("blink-matching-open" function (:user-visible-flag t) nil [261661 266088])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [266090 266279])
            ("blink-paren-post-self-insert-function" function nil nil [266281 266808])
            ("put" code nil nil [266810 266868])
            ("add-hook" code nil nil [266870 267249])
            ("keyboard-quit" function (:user-visible-flag t) nil [267427 268075])
            ("buffer-quit-function" variable nil nil [268077 268327])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [268329 269155])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [269157 269552])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [269556 270073])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [270075 271619])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [271621 271946])
            ("rfc822-goto-eoh" function nil nil [271948 272352])
            ("mail-encode-mml" variable nil nil [272394 272533])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [272535 275221])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [275223 275614])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [275616 276004])
            ("set-variable-value-history" variable nil nil [276008 276193])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [276195 279034])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [279089 279626])
            ("put" code nil nil [279694 279742])
            ("completion-reference-buffer" variable nil nil [279744 279973])
            ("completion-no-auto-exit" variable nil nil [279975 280156])
            ("completion-base-position" variable nil nil [280158 280528])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [280530 280829])
            ("completion-base-size" variable nil nil [280831 281286])
            ("make-obsolete-variable" code nil nil [281287 281366])
            ("delete-completion-window" function (:user-visible-flag t) nil [281368 281742])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [281744 281875])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [281877 283127])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [283129 285088])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [285172 286010])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [286012 286204])
            ("choose-completion-string-functions" variable nil nil [286206 286845])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [286847 290257])
            ("define-derived-mode" code nil nil [290259 290631])
            ("completion-list-mode-finish" function nil nil [290633 290829])
            ("add-hook" code nil nil [290831 290893])
            ("completion-show-help" variable (:default-value t) nil [290957 291108])
            ("completion-setup-function" function nil nil [291239 293254])
            ("add-hook" code nil nil [293256 293316])
            ("define-key" code nil nil [293318 293393])
            ("define-key" code nil nil [293394 293469])
            ("switch-to-completions" function (:user-visible-flag t) nil [293471 294012])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [294174 294417])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [294418 294671])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [294672 294925])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [294926 295179])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [295180 295437])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [295438 295686])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [295688 296752])
            ("define-key" code nil nil [296754 296825])
            ("define-key" code nil nil [296826 296897])
            ("define-key" code nil nil [296898 296968])
            ("define-key" code nil nil [296969 297038])
            ("define-key" code nil nil [297039 297110])
            ("define-key" code nil nil [297111 297184])
            ("mapc" code nil nil [297474 298069])
            ("clone-buffer-hook" variable nil nil [298121 298222])
            ("clone-indirect-buffer-hook" variable nil nil [298224 298343])
            ("clone-process" function (:arguments ("process" "newname")) nil [298345 299854])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [299957 302920])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [302923 304515])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [304518 305001])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [305049 306589])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [306591 307666])
            ("define-minor-mode" code nil nil [307668 311163])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [311166 311289])
            ("define-minor-mode" code nil nil [311291 312444])
            ("define-minor-mode" code nil nil [312446 313216])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [313219 313402])
            ("define-derived-mode" code nil nil [313404 313520])
            ("messages-buffer" function nil nil [313522 313809])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [314768 316196])
            ("bad-package-check" function (:arguments ("package")) nil [316198 316703])
            ("dolist" code nil nil [316705 316827])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [317480 320014])
            ("iswitchb-mode" variable nil nil [320093 320382])
            ("custom-autoload" code nil nil [320384 320431])
            ("iswitchb-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [320433 320805])
            ("make-obsolete" code nil nil [320807 320905])
            ("simple" package nil nil [320909 320926]))          
      :file "simple.el.gz"
      :pointmax 320952
      :fsize 87791
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1068 . 1069) (symbol 1033 . 1050) (open-paren 1032 . 1033)))
    (semanticdb-table "files.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock-keywords" variable nil nil [1117 1144])
            ("backup" customgroup (:user-visible-flag t) nil [1146 1217])
            ("find-file" customgroup (:user-visible-flag t) nil [1219 1278])
            ("delete-auto-save-files" variable (:default-value t) nil [1281 1531])
            ("directory-abbrev-alist" variable nil nil [1533 2498])
            ("make-backup-files" variable (:default-value t) nil [2500 3423])
            ("backup-inhibited" variable nil nil [3524 3716])
            ("put" code nil nil [3717 3759])
            ("backup-by-copying" variable nil nil [3761 3939])
            ("backup-by-copying-when-linked" variable nil nil [3941 4234])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4236 4724])
            ("put" code nil nil [4725 4782])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4784 5407])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5409 5628])
            ("buffer-offer-save" variable nil nil [5630 5849])
            ("make-variable-buffer-local" code nil nil [5850 5897])
            ("put" code nil nil [5898 5941])
            ("find-file-existing-other-name" variable (:default-value t) nil [5943 6236])
            ("find-file-visit-truename" variable nil nil [6238 6610])
            ("put" code nil nil [6611 6673])
            ("revert-without-query" variable nil nil [6675 7040])
            ("buffer-file-number" variable nil nil [7042 7311])
            ("make-variable-buffer-local" code nil nil [7312 7360])
            ("put" code nil nil [7361 7405])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7407 7552])
            ("buffer-file-read-only" variable nil nil [7554 7644])
            ("make-variable-buffer-local" code nil nil [7645 7696])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7698 8142])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8210 8279])
            ("declare-function" code nil nil [8281 8331])
            ("declare-function" code nil nil [8332 8381])
            ("declare-function" code nil nil [8382 8468])
            ("declare-function" code nil nil [8469 8536])
            ("declare-function" code nil nil [8537 8609])
            ("declare-function" code nil nil [8610 8666])
            ("declare-function" code nil nil [8667 8726])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8728 9401])
            ("file-precious-flag" variable nil nil [9403 10243])
            ("break-hardlink-on-save" variable nil nil [10245 11000])
            ("version-control" variable nil nil [11002 11372])
            ("put" code nil nil [11373 11469])
            ("dired-kept-versions" variable (:default-value 2) nil [11471 11611])
            ("delete-old-versions" variable nil nil [11613 11879])
            ("kept-old-versions" variable (:default-value 2) nil [11881 12020])
            ("put" code nil nil [12021 12076])
            ("kept-new-versions" variable (:default-value 2) nil [12078 12255])
            ("put" code nil nil [12256 12311])
            ("require-final-newline" variable nil nil [12313 13084])
            ("mode-require-final-newline" variable (:default-value t) nil [13086 14221])
            ("auto-save-default" variable (:default-value t) nil [14223 14365])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14367 15795])
            ("save-abbrevs" variable (:default-value t) nil [15797 16008])
            ("find-file-run-dired" variable (:default-value t) nil [16010 16207])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16209 16537])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16598 16926])
            ("define-obsolete-variable-alias" code nil nil [17034 17135])
            ("find-file-not-found-functions" variable nil nil [17136 17437])
            ("define-obsolete-variable-alias" code nil nil [17535 17607])
            ("find-file-hook" variable nil nil [17608 17885])
            ("define-obsolete-variable-alias" code nil nil [17887 17966])
            ("write-file-functions" variable nil nil [17967 18748])
            ("put" code nil nil [18749 18795])
            ("local-write-file-hooks" variable nil nil [18797 18832])
            ("make-variable-buffer-local" code nil nil [18833 18885])
            ("put" code nil nil [18886 18934])
            ("make-obsolete-variable" code nil nil [18935 19012])
            ("define-obsolete-variable-alias" code nil nil [19014 19105])
            ("write-contents-functions" variable nil nil [19106 19862])
            ("make-variable-buffer-local" code nil nil [19863 19917])
            ("enable-local-variables" variable (:default-value t) nil [19919 21171])
            ("enable-dir-local-variables" variable (:default-value t) nil [21173 21394])
            ("local-enable-local-variables" variable (:default-value t) nil [22757 23142])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [23144 23535])
            ("or" code nil nil [23600 23663])
            ("or" code nil nil [23664 23731])
            ("or" code nil nil [23732 23799])
            ("view-read-only" variable nil nil [23801 24151])
            ("file-name-history" variable nil nil [24153 24336])
            ("put" code nil nil [24339 24393])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [24394 25000])
            ("declare-function" code nil nil [25002 25074])
            ("declare-function" code nil nil [25075 25147])
            ("convert-standard-filename" function (:arguments ("filename")) nil [25149 26402])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [26404 27525])
            ("pwd" function (:user-visible-flag t) nil [27529 27648])
            ("cd-path" variable nil nil [27650 27780])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27782 28401])
            ("cd-absolute" function (:arguments ("dir")) nil [28403 29308])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [29310 31200])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [31202 31529])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [31531 32910])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [32912 35874])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [35876 36284])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [36286 36890])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [38443 40632])
            ("user-emacs-directory-warning" variable (:default-value t) nil [40634 40836])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [40838 42652])
            ("executable-find" function (:arguments ("command")) nil [42655 42963])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [42965 43562])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [43564 45318])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [45617 46336])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [46338 47563])
            ("file-local-copy" function (:arguments ("file")) nil [47565 47954])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [47956 52847])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [52849 54252])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [54384 55501])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [55503 57094])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [57096 59333])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [59336 59949])
            ("confirm-nonexistent-file-or-buffer" function nil nil [59951 60392])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [60394 61220])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [61222 61336])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [61338 62583])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [62585 63515])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63517 64441])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [64443 64878])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [64880 65307])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65309 65690])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65692 66143])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [66145 66591])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [66593 67542])
            ("kill-buffer-hook" variable nil nil [67603 67843])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67845 70814])
            ("create-file-buffer" function (:arguments ("filename")) nil [70939 71619])
            ("generate-new-buffer" function (:arguments ("name")) nil [71621 71826])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [71828 71980])
            ("make-obsolete-variable" code nil nil [71981 72058])
            ("abbreviated-home-dir" variable nil nil [72060 72167])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [72169 74520])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [74522 76449])
            ("find-file-wildcards" variable (:default-value t) nil [76452 76699])
            ("find-file-suppress-same-file-warnings" variable nil nil [76701 77027])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [77029 77308])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [77310 77797])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [77799 84785])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [84787 87281])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [87284 88236])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [88238 88935])
            ("insert-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [88937 89358])
            ("put" code nil nil [89359 89437])
            ("find-file-literally" variable nil nil [89439 89646])
            ("put" code nil nil [89647 89692])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [89694 90788])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [90791 94131])
            ("report-errors" function (:arguments ("format" "body")) nil [94133 94613])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [94615 96224])
            ("auto-mode-case-fold" variable (:default-value t) nil [96226 96664])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ck]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.js\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[]>:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gnokiirc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [96666 108054])
            ("put" code nil nil [108055 108101])
            ("conf-mode-maybe" function nil nil [108103 108353])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [108355 109729])
            ("define-obsolete-variable-alias" code nil nil [109731 109844])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [110043 110903])
            ("define-obsolete-variable-alias" code nil nil [110905 111015])
            ("inhibit-local-variables-suffixes" variable nil nil [111017 111293])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [111365 111471])
            ("inhibit-local-variables-p" function nil nil [111473 112283])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [112285 112803])
            ("magic-mode-alist" variable nil nil [112805 113339])
            ("put" code nil nil [113340 113387])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [113389 114930])
            ("put" code nil nil [114931 114987])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [114989 115131])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [115133 121561])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [121814 122221])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [122223 122489])
            ("set-auto-mode-1" function nil nil [122491 123996])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [124034 124240])
            ("put" code nil nil [124241 124295])
            ("hack-local-variables-hook" variable nil nil [124297 124530])
            ("safe-local-variable-values" variable nil nil [124532 124792])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [124794 125456])
            ("mapc" code nil nil [125484 126101])
            ("dolist" code nil nil [126743 127431])
            ("put" code nil nil [127433 127547])
            ("put" code nil nil [127549 127595])
            ("file-local-variables-alist" variable nil nil [127597 127952])
            ("make-variable-buffer-local" code nil nil [127953 128009])
            ("put" code nil nil [128010 128062])
            ("dir-local-variables-alist" variable nil nil [128064 128446])
            ("make-variable-buffer-local" code nil nil [128447 128502])
            ("before-hack-local-variables-hook" variable nil nil [128504 128922])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [128924 131794])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [131796 131883])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [131885 134339])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [134341 136827])
            ("hack-local-variables--warned-lexical" variable nil nil [136888 136937])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [136939 142855])
            ("hack-local-variables-apply" function nil nil [142857 143658])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [143660 144348])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [144350 145253])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [145255 145359])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [145361 145549])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [145551 147371])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [147373 147750])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [147752 148665])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [148731 148846])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [148848 149424])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [149426 149559])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [149561 150206])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [150208 152219])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [152221 152985])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [152987 154450])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [154452 154634])
            ("dir-locals-find-file" function (:arguments ("file")) nil [154636 157700])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [157702 158545])
            ("enable-remote-dir-locals" variable nil nil [158547 158713])
            ("hack-dir-local-variables--warned-coding" variable nil nil [158715 158767])
            ("hack-dir-local-variables" function nil nil [158769 160427])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [160429 160735])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [160739 161176])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [161178 166155])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [166157 168182])
            ("file-extended-attributes" function (:arguments ("filename")) nil [168185 168499])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [168501 168930])
            ("backup-buffer" function nil nil [168933 172958])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [172960 174230])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [174232 174525])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [174527 175226])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [175228 177095])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [177097 177792])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [177794 178611])
            ("file-name-base" function (:arguments ("filename")) nil [178613 178857])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [178859 179607])
            ("backup-directory-alist" variable nil nil [179609 180646])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [180648 181940])
            ("make-backup-file-name" function (:arguments ("file")) nil [181942 182255])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [182257 183007])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [183009 185116])
            ("backup-file-name-p" function (:arguments ("file")) nil [185118 185379])
            ("backup-extract-version-start" variable nil nil [185381 185418])
            ("backup-extract-version" function (:arguments ("fn")) nil [185593 186045])
            ("find-backup-file-name" function (:arguments ("fn")) nil [186047 188186])
            ("file-nlinks" function (:arguments ("filename")) nil [188188 188305])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [190281 193182])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193185 195587])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [195589 196160])
            ("auto-save-hook" variable nil nil [196162 196234])
            ("before-save-hook" variable nil nil [196236 196406])
            ("after-save-hook" variable nil nil [196408 196599])
            ("save-buffer-coding-system" variable nil nil [196601 196973])
            ("make-variable-buffer-local" code nil nil [196975 197030])
            ("put" code nil nil [197031 197082])
            ("basic-save-buffer" function (:user-visible-flag t) nil [197084 201251])
            ("basic-save-buffer-1" function nil nil [201533 201836])
            ("basic-save-buffer-2" function nil nil [201925 206549])
            ("declare-function" code nil nil [206551 206637])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [206639 207805])
            ("put" code nil nil [207806 207867])
            ("buffer-save-without-query" variable nil nil [207869 207985])
            ("make-variable-buffer-local" code nil nil [207986 208041])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [208043 211501])
            ("clear-visited-file-modtime" function nil nil [211504 211695])
            ("not-modified" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [211697 212148])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [212150 212436])
            ("insert-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [212438 212834])
            ("put" code nil nil [212835 212893])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [212895 213506])
            ("file-newest-backup" function (:arguments ("filename")) nil [213508 214431])
            ("rename-uniquely" function (:user-visible-flag t) nil [214433 215449])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [215451 217023])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [217025 217171])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [217173 219634])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [219636 220196])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [220198 221136])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [221138 224325])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [224373 224935])
            ("put" code nil nil [224939 224987])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [224988 225440])
            ("put" code nil nil [225442 225511])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [225512 225984])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [225986 226498])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [226500 227415])
            ("before-revert-hook" variable nil nil [227417 227620])
            ("after-revert-hook" variable nil nil [227622 227977])
            ("revert-buffer-in-progress-p" variable nil nil [227979 228093])
            ("revert-buffer-internal-hook" variable nil nil [228095 228131])
            ("revert-buffer-preserve-modes" variable nil nil [228321 228358])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [228360 230572])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [230574 233929])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [233931 236131])
            ("recover-this-file" function (:user-visible-flag t) nil [236133 236284])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [236286 238369])
            ("recover-session" function (:user-visible-flag t) nil [238371 239964])
            ("recover-session-finish" function (:user-visible-flag t) nil [239966 242369])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [242371 242622])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [242624 243227])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [243229 243757])
            ("rename-auto-save-file" function nil nil [243761 244325])
            ("make-auto-save-file-name" function nil nil [244327 248556])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [248558 248786])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [248789 250972])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [250975 251136])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [251138 251304])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [251306 253027])
            ("files" package nil nil [253101 253137])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [253139 254485])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [254487 256319])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [256322 256449])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [256451 256988])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [256990 257177])
            ("get-free-disk-space" function (:arguments ("dir")) nil [257179 258930])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [259002 261391])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [261393 261438])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [262512 272643])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [272645 273211])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [273213 273697])
            ("kill-emacs-query-functions" variable nil nil [273699 274005])
            ("confirm-kill-emacs" variable nil nil [274007 274447])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274449 276096])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [276098 276586])
            ("setq" code nil nil [276696 276817])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [277018 279651])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [279694 280161])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [280163 281012])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [281014 282168])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [282170 283237])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [283239 284304])
            ("define-obsolete-variable-alias" code nil nil [284306 284388])
            ("trash-directory" variable nil nil [284412 284815])
            ("trash--hexify-table" variable nil nil [284817 284845])
            ("declare-function" code nil nil [284847 284913])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [284915 290335])
            ("define-key" code nil nil [290339 290379])
            ("define-key" code nil nil [290380 290430])
            ("define-key" code nil nil [290431 290481])
            ("define-key" code nil nil [290482 290524])
            ("define-key" code nil nil [290525 290570])
            ("define-key" code nil nil [290571 290612])
            ("define-key" code nil nil [290613 290652])
            ("define-key" code nil nil [290653 290691])
            ("define-key" code nil nil [290692 290737])
            ("define-key" code nil nil [290738 290795])
            ("define-key" code nil nil [290796 290841])
            ("define-key" code nil nil [290843 290895])
            ("define-key" code nil nil [290896 290958])
            ("define-key" code nil nil [290959 291014])
            ("define-key" code nil nil [291015 291074])
            ("define-key" code nil nil [291075 291122])
            ("define-key" code nil nil [291124 291182])
            ("define-key" code nil nil [291183 291234])
            ("define-key" code nil nil [291235 291289])
            ("define-key" code nil nil [291290 291351])
            ("define-key" code nil nil [291352 291411]))          
      :file "files.el.gz"
      :pointmax 291436
      :fsize 84308
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "window.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [962 1995])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [1997 2294])
            ("save-selected-window" function (:arguments ("body")) nil [2296 3334])
            ("temp-buffer-window-setup-hook" variable nil nil [3336 3537])
            ("temp-buffer-window-show-hook" variable nil nil [3539 3760])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3762 4376])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4378 5622])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5624 8089])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8091 8856])
            ("window-right" function (:arguments ("window")) nil [9163 9375])
            ("window-left" function (:arguments ("window")) nil [9377 9587])
            ("window-child" function (:arguments ("window")) nil [9589 9744])
            ("window-child-count" function (:arguments ("window")) nil [9746 10042])
            ("window-last-child" function (:arguments ("window")) nil [10044 10311])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [10313 10807])
            ("window-normalize-frame" function (:arguments ("frame")) nil [10809 11062])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [11064 11619])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [11658 12430])
            ("ignore-window-parameters" variable nil nil [12432 12776])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [12826 12950])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [12952 13148])
            ("window-min-height" variable (:default-value 4) nil [13150 13830])
            ("window-min-pixel-height" function (:arguments ("window")) nil [13832 14019])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [14069 14192])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [14194 14389])
            ("window-min-width" variable (:default-value 10) nil [14391 15090])
            ("window-min-pixel-width" function (:arguments ("window")) nil [15092 15277])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [15279 15596])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [15598 16230])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [16232 16658])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [16660 17767])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [17769 18481])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [18483 19706])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [19708 20359])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [20361 21319])
            ("window-atom-root" function (:arguments ("window")) nil [21341 21761])
            ("window-make-atom" function (:arguments ("window")) nil [21763 22151])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [22153 24598])
            ("window--atom-check-1" function (:arguments ("window")) nil [24600 25488])
            ("window--atom-check" function (:arguments ("frame")) nil [25490 25878])
            ("window-sides" variable (:default-value (quote (left top right bottom))) nil [25897 25961])
            ("window-sides-vertical" variable nil nil [25963 26169])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [26171 27592])
            ("window--major-non-side-window" function (:arguments ("frame")) nil [27594 28650])
            ("window--major-side-window" function (:arguments ("side")) nil [28652 30322])
            ("display-buffer-in-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [30324 32376])
            ("delete-side-window" function (:arguments ("window")) nil [32378 32596])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [32598 37601])
            ("window--side-check" function (:arguments ("frame")) nil [37603 40107])
            ("window--check" function (:arguments ("frame")) nil [40109 40288])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [40324 42168])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [42170 43775])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [43795 44743])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [44745 45549])
            ("window-size-fixed" variable nil nil [45551 45988])
            ("make-variable-buffer-local" code nil nil [45989 46036])
            ("window--size-ignore-p" function (:arguments ("window" "ignore")) nil [46038 46214])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [46216 46921])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [46923 47839])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [47841 50693])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [50695 52454])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [52456 52961])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal")) nil [52963 54103])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal")) nil [54105 54595])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [54597 55991])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [55993 58118])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [58120 59463])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [59465 61294])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [61342 63494])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [63496 64154])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [64156 65578])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [65580 66136])
            ("defalias" code nil nil [66183 66229])
            ("defalias" code nil nil [66230 66273])
            ("window-full-height-p" function (:arguments ("window")) nil [66362 66800])
            ("window-full-width-p" function (:arguments ("window")) nil [66802 67234])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [67236 67767])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [67769 68689])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [68691 70573])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [70575 71152])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [71154 71672])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [71674 72064])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [72355 77850])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [77852 79473])
            ("defalias" code nil nil [79475 79525])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [79527 81178])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [81180 82450])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [82452 83745])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [83747 85278])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [85280 85430])
            ("count-windows" function (:arguments ("minibuf")) nil [85432 85725])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [85750 86700])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [86702 88326])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [88328 90243])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [90245 90681])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [90683 91205])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [91334 92558])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [92560 92966])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [92968 96645])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [96647 97194])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [97196 97373])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [97375 100893])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [100895 107843])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [107845 112023])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [112025 114271])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [114273 115106])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [115108 117029])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [117031 122497])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [122499 123786])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [123788 125131])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [125133 125729])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [125731 126341])
            ("frame-root-window-p" function (:arguments ("window")) nil [126344 126483])
            ("window--subtree" function (:arguments ("window" "next")) nil [126485 127208])
            ("window-tree" function (:arguments ("frame")) nil [127210 128105])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [128108 130739])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [130875 132148])
            ("window-deletable-p" function (:arguments ("window")) nil [132173 133562])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [133564 133867])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [133869 137265])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [137267 139718])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [139720 140346])
            ("record-window-buffer" function (:arguments ("window")) nil [142082 143501])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [143503 144002])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [144004 144931])
            ("switch-to-visible-buffer" variable (:default-value t) nil [144933 145481])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [145483 150792])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [150794 154151])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [154153 155149])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [155151 155878])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [155880 156398])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [156400 157240])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [157242 158375])
            ("unbury-buffer" function (:user-visible-flag t) nil [158377 158502])
            ("next-buffer" function (:user-visible-flag t) nil [158504 158806])
            ("previous-buffer" function (:user-visible-flag t) nil [158808 159118])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [159120 160874])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [160876 161908])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [161910 166445])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [166447 167047])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [167049 168013])
            ("window-split-min-size" function (:arguments ("horizontal" "pixelwise")) nil [168039 168455])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [168457 180056])
            ("split-window-keep-point" variable (:default-value t) nil [180133 180507])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [180509 182764])
            ("defalias" code nil nil [182766 182821])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [182823 184032])
            ("defalias" code nil nil [184034 184091])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [184594 187362])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [187364 187790])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [187792 189049])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [189051 189481])
            ("window-area-factor" variable (:default-value 1) nil [189528 189697])
            ("make-variable-buffer-local" code nil nil [189698 189746])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [189748 190402])
            ("balance-windows-area" function (:user-visible-flag t) nil [190404 194760])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [194830 197625])
            ("window-state-get" function (:arguments ("window" "writable")) nil [197627 199716])
            ("window-state-put-list" variable nil nil [199718 199796])
            ("window-state-put-stale-windows" variable nil nil [199798 199885])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [199887 202589])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [202591 206347])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [206349 210426])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [210429 212584])
            ("display-buffer-function" variable nil nil [212586 213142])
            ("make-obsolete-variable" code nil nil [213144 213225])
            ("pop-up-frame-alist" variable nil nil [213406 214022])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [214024 214353])
            ("special-display-buffer-names" variable nil nil [214355 216945])
            ("make-obsolete-variable" code nil nil [216946 217029])
            ("put" code nil nil [217030 217089])
            ("special-display-regexps" variable nil nil [217091 219733])
            ("make-obsolete-variable" code nil nil [219734 219812])
            ("put" code nil nil [219813 219867])
            ("special-display-p" function (:arguments ("buffer-name")) nil [219869 220764])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [220766 221381])
            ("make-obsolete-variable" code nil nil [221382 221464])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [221466 223486])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [223488 224286])
            ("make-obsolete-variable" code nil nil [224287 224366])
            ("same-window-buffer-names" variable nil nil [224368 224940])
            ("same-window-regexps" variable nil nil [224942 225530])
            ("same-window-p" function (:arguments ("buffer-name")) nil [225532 226503])
            ("pop-up-frames" variable nil nil [226505 226917])
            ("display-buffer-reuse-frames" variable nil nil [226919 227148])
            ("make-obsolete-variable" code nil nil [227150 227278])
            ("pop-up-windows" variable (:default-value t) nil [227280 227404])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [227406 228789])
            ("split-height-threshold" variable (:default-value 80) nil [228791 229317])
            ("split-width-threshold" variable (:default-value 160) nil [229319 229707])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [229709 231986])
            ("split-window-sensibly" function (:arguments ("window")) nil [231988 234373])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [234375 235485])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [235487 236429])
            ("even-window-heights" variable (:default-value t) nil [236431 236747])
            ("window--even-window-heights" function (:arguments ("window")) nil [236749 237613])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [237615 240290])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [240292 240716])
            ("display-buffer-mark-dedicated" variable nil nil [241055 241264])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (function :tag "Other function"))))
                nil [241266 241742])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [241744 242119])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [242121 242456])
            ("put" code nil nil [242457 242520])
            ("display-buffer-alist" variable nil nil [242522 243533])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [243535 243959])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [243961 244545])
            ("put" code nil nil [244546 244607])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [244609 245032])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [245034 245206])
            ("put" code nil nil [245207 245272])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [245274 245504])
            ("put" code nil nil [245505 245570])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [245572 251325])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [251327 251660])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [251702 252187])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [252189 252530])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [252532 254178])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [254180 254931])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [254933 255953])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [255955 257269])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [257271 257857])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [257859 258708])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [258710 259801])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [259803 262090])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [262092 263835])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [263837 264292])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "action" "norecord"))
                nil [264328 265860])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [265862 266496])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [266498 267642])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [267644 268200])
            ("switch-to-buffer-preserve-window-point" variable nil nil [268202 269091])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [269093 271844])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [271846 272878])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [272880 273892])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [273895 274868])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [274870 275085])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [275087 275306])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [275308 276709])
            ("window-buffer-height" function (:arguments ("window")) nil [276711 277189])
            ("fit-window-to-buffer-horizontally" variable nil nil [277254 277648])
            ("fit-frame-to-buffer" variable nil nil [277762 278211])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [278213 279427])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [279429 280718])
            ("declare-function" code nil nil [280720 280791])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [280793 280997])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [280999 289619])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width"))
                nil [289621 295683])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [295685 296066])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [296068 297176])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [297179 298001])
            ("recenter-last-op" variable nil nil [298005 298157])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [298159 299019])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [299021 300168])
            ("define-key" code nil nil [300170 300222])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300224 301358])
            ("define-key" code nil nil [301360 301423])
            ("scroll-error-top-bottom" variable nil nil [301593 302037])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [302039 303102])
            ("put" code nil nil [303104 303146])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [303148 304215])
            ("put" code nil nil [304217 304261])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [304331 304614])
            ("put" code nil nil [304616 304655])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [304657 304942])
            ("put" code nil nil [304944 304985])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [304989 305384])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [305386 306070])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [306072 306575])
            ("mouse-autoselect-window-timer" variable nil nil [306578 306668])
            ("mouse-autoselect-window-position" variable nil nil [306670 306781])
            ("mouse-autoselect-window-window" variable nil nil [306783 306884])
            ("mouse-autoselect-window-state" variable nil nil [306886 307183])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [307185 307906])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [307908 308736])
            ("mouse-autoselect-window-select" function nil nil [308738 311939])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [311941 313445])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [313447 314125])
            ("define-key" code nil nil [314215 314256])
            ("define-key" code nil nil [314257 314305])
            ("define-key" code nil nil [314306 314352])
            ("define-key" code nil nil [314353 314399])
            ("define-key" code nil nil [314400 314440])
            ("define-key" code nil nil [314441 314483])
            ("define-key" code nil nil [314484 314539])
            ("define-key" code nil nil [314540 314594])
            ("define-key" code nil nil [314595 314658])
            ("define-key" code nil nil [314659 314702])
            ("define-key" code nil nil [314703 314755]))          
      :file "window.el.gz"
      :pointmax 314781
      :fsize 69800
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "minibuffer.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4229 4246])
            ("completion-boundaries" function (:arguments ("string" "table" "pred" "suffix")) nil [4319 5231])
            ("completion-metadata" function (:arguments ("string" "table" "pred")) nil [5233 6243])
            ("completion--field-metadata" function (:arguments ("field-start")) nil [6245 6476])
            ("completion-metadata-get" function (:arguments ("metadata" "prop")) nil [6478 6554])
            ("completion--some" function (:arguments ("fun" "xs")) nil [6556 6989])
            ("complete-with-action" function (:arguments ("action" "table" "string" "pred")) nil [6991 7517])
            ("completion-table-dynamic" function (:arguments ("fun")) nil [7519 8772])
            ("completion-table-with-cache" function (:arguments ("fun" "ignore-case")) nil [8774 9660])
            ("lazy-completion-table" function (:arguments ("var" "fun")) nil [9662 10477])
            ("completion-table-case-fold" function (:arguments ("table" "dont-fold")) nil [10479 10821])
            ("completion-table-subvert" function (:arguments ("table" "s1" "s2")) nil [10823 12524])
            ("completion-table-with-context" function (:arguments ("prefix" "table" "string" "pred" "action")) nil [12526 13810])
            ("completion-table-with-terminator" function (:arguments ("terminator" "table" "string" "pred" "action")) nil [13812 17064])
            ("completion-table-with-predicate" function (:arguments ("table" "pred1" "strict" "string" "pred2" "action")) nil [17066 18539])
            ("completion-table-in-turn" function (:arguments ("tables")) nil [18541 19040])
            ("completion-table-merge" function (:arguments ("tables")) nil [19042 20059])
            ("completion-table-with-quoting" function (:arguments ("table" "unquote" "requote")) nil [20061 27590])
            ("completion--twq-try" function (:arguments ("string" "ustring" "completion" "point" "unquote" "requote")) nil [27592 28838])
            ("completion--string-equal-p" function (:arguments ("s1" "s2")) nil [28840 28944])
            ("completion--twq-all" function (:arguments ("string" "ustring" "completions" "boundary" "_unquote" "requote")) nil [28946 32574])
            ("define-obsolete-function-alias" code nil nil [32725 32810])
            ("define-obsolete-function-alias" code nil nil [32811 32904])
            ("minibuffer" customgroup (:user-visible-flag t) nil [32933 33073])
            ("minibuffer-message" function (:arguments ("message" "args")) nil [33075 35119])
            ("minibuffer-completion-contents" function nil nil [35121 35377])
            ("delete-minibuffer-contents" function (:user-visible-flag t) nil [35379 35736])
            ("completion-show-inline-help" variable (:default-value t) nil [35738 35841])
            ("completion-auto-help" variable (:default-value t) nil [35843 36225])
            ("completion-styles-alist" variable
               (:constant-flag t
                :default-value (quote ((emacs21 completion-emacs21-try-completion completion-emacs21-all-completions "Simple prefix-based completion.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foobar*\".") (emacs22 completion-emacs22-try-completion completion-emacs22-all-completions "Prefix completion that only operates on the text before point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*\" and will add back \"bar\" to the end of it.") (basic completion-basic-try-completion completion-basic-all-completions "Completion of the prefix before point and the suffix after point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*bar*\".") (partial-completion completion-pcm-try-completion completion-pcm-all-completions "Completion of multiple words, each one taken as a prefix.
I.e. when completing \"l-co_h\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"l*-co*h*\".
Furthermore, for completions that are done step by step in subfields,
the method is applied to all the preceding fields that do not yet match.
E.g. C-x C-f /u/mo/s TAB could complete to /usr/monnier/src.
Additionally the user can use the char \"*\" as a glob pattern.") (substring completion-substring-try-completion completion-substring-all-completions "Completion of the string taken as a substring.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"*foo*bar*\".") (initials completion-initials-try-completion completion-initials-all-completions "Completion of acronyms and initialisms.
E.g. can complete M-x lch to list-command-history
and C-x C-f ~/sew to ~/src/emacs/work."))))
                nil [36227 38808])
            ("completion--styles-type" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "insert a new menu to add more styles" (choice (\,@ (mapcar (lambda (x) (list (quote const) (car x))) completion-styles-alist))))))
                nil [38810 39019])
            ("completion--cycling-threshold-type" variable
               (:constant-flag t
                :default-value (quote (choice (const :tag "No cycling" nil) (const :tag "Always cycle" t) (integer :tag "Threshold"))))
                nil [39020 39186])
            ("completion-styles" variable (:default-value (quote (basic partial-completion emacs22))) nil [39188 40092])
            ("completion-category-overrides" variable (:default-value (quote ((buffer (styles basic substring))))) nil [40094 41211])
            ("completion--styles" function (:arguments ("metadata")) nil [41213 41505])
            ("completion--nth-completion" function (:arguments ("n" "string" "table" "pred" "point" "metadata")) nil [41507 43188])
            ("completion-try-completion" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [43190 43747])
            ("completion-all-completions" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [43749 44286])
            ("minibuffer--bitset" function (:arguments ("modified" "completions" "exact")) nil [44288 44437])
            ("completion--replace" function (:arguments ("beg" "end" "newtext")) nil [44439 46142])
            ("completion-cycle-threshold" variable nil nil [46144 46574])
            ("completion--cycle-threshold" function (:arguments ("metadata")) nil [46576 46813])
            ("defvar-local" code nil nil [46815 46867])
            ("defvar-local" code nil nil [46868 46930])
            ("completion-cycling" variable nil nil [46931 46962])
            ("completion-fail-discreetly" variable nil nil [46964 47055])
            ("completion--message" function (:arguments ("msg")) nil [47057 47156])
            ("completion--do-completion" function (:arguments ("beg" "end" "try-completion-function" "expect-exact")) nil [47158 53719])
            ("minibuffer-complete" function (:user-visible-flag t) nil [53721 54222])
            ("completion--in-region-1" function (:arguments ("beg" "end")) nil [54224 55407])
            ("completion--cache-all-sorted-completions" function (:arguments ("beg" "end" "comps")) nil [55409 55723])
            ("completion--flush-all-sorted-completions" function (:arguments ("start" "end" "_len")) nil [55725 56170])
            ("completion--metadata" function (:arguments ("string" "base" "md-at-point" "table" "pred")) nil [56172 56618])
            ("completion-all-sorted-completions" function (:arguments ("start" "end")) nil [56620 58773])
            ("minibuffer-force-complete-and-exit" function (:user-visible-flag t) nil [58775 59406])
            ("minibuffer-force-complete" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [59408 62160])
            ("minibuffer-confirm-exit-commands" variable (:default-value (quote (completion-at-point minibuffer-complete minibuffer-complete-word PC-complete PC-complete-word))) nil [62162 62428])
            ("minibuffer-complete-and-exit" function (:user-visible-flag t) nil [62430 63181])
            ("completion-complete-and-exit" function (:arguments ("beg" "end" "exit-function")) nil [63183 63718])
            ("completion--complete-and-exit" function (:arguments ("beg" "end" "exit-function" "completion-function")) nil [63720 66320])
            ("completion--try-word-completion" function (:arguments ("string" "table" "predicate" "point" "md")) nil [66322 71327])
            ("minibuffer-complete-word" function (:user-visible-flag t) nil [71330 71758])
            ("completion-in-region--single-word" function (:arguments ("beg" "end" "collection" "predicate")) nil [71760 72143])
            ("completions-annotations" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [72145 72262])
            ("completions-format" variable (:default-value (quote horizontal)) nil [72264 72660])
            ("completion--insert-strings" function (:arguments ("strings")) nil [72662 76233])
            ("completion-common-substring" variable nil nil [76235 76275])
            ("make-obsolete-variable" code nil nil [76276 76340])
            ("completion-setup-hook" variable nil nil [76342 76679])
            ("completions-first-difference" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [76681 76847])
            ("completions-common-part" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [76849 77152])
            ("completion-hilit-commonality" function (:arguments ("completions" "prefix-len" "base-size")) nil [77154 79032])
            ("display-completion-list" function (:arguments ("completions" "common-substring")) nil [79034 80800])
            ("completion-extra-properties" variable nil nil [80802 81772])
            ("completion-annotate-function" variable nil nil [81774 82657])
            ("make-obsolete-variable" code nil nil [82658 82772])
            ("completion--done" function (:arguments ("string" "finished" "message")) nil [82774 83590])
            ("minibuffer-completion-help" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [83592 88706])
            ("minibuffer-hide-completions" function nil nil [88708 89051])
            ("exit-minibuffer" function (:user-visible-flag t) nil [89053 89534])
            ("self-insert-and-exit" function (:user-visible-flag t) nil [89536 89733])
            ("completion-in-region-functions" variable nil nil [89735 89827])
            ("make-obsolete-variable" code nil nil [89828 89946])
            ("completion-in-region-function" variable (:default-value (function completion--in-region)) nil [89948 90227])
            ("completion-in-region--data" variable nil nil [90229 90268])
            ("completion-in-region-mode-predicate" variable nil nil [90270 90526])
            ("completion-in-region-mode--predicate" variable nil nil [90528 90749])
            ("completion-in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [90751 91368])
            ("read-file-name-completion-ignore-case" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt darwin cygwin))) t nil)) nil [91370 91595])
            ("completion--in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [91597 92612])
            ("completion-in-region-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\277" (quote completion-help-at-point)) (define-key map "	" (quote completion-at-point)) map)) nil [92614 92966])
            ("completion-in-region--postch" function nil nil [93314 93971])
            ("completion-in-region-mode" variable nil nil [94047 94085])
            ("define-minor-mode" code nil nil [94123 95299])
            ("setq" code nil nil [95426 95554])
            ("completion-at-point-functions" variable (:default-value (quote (tags-completion-at-point-function))) nil [95556 96648])
            ("completion--capf-misbehave-funs" variable nil nil [96650 96898])
            ("completion--capf-safe-funs" variable nil nil [96899 97129])
            ("completion--capf-wrapper" function (:arguments ("fun" "which")) nil [97131 99054])
            ("completion-at-point" function (:user-visible-flag t) nil [99056 100060])
            ("completion-help-at-point" function (:user-visible-flag t) nil [100062 101828])
            ("let" code nil nil [101849 102013])
            ("minibuffer-local-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote minibuffer-complete)) (define-key map " " (quote minibuffer-complete-word)) (define-key map "?" (quote minibuffer-completion-help)) map)) nil [102015 102518])
            ("minibuffer-local-must-match-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-completion-map) (define-key map "" (quote minibuffer-complete-and-exit)) (define-key map "
" (quote minibuffer-complete-and-exit)) map)) nil [102520 102849])
            ("minibuffer-local-filename-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " nil) map)) nil [102851 103146])
            ("define-obsolete-variable-alias" code nil nil [103148 103273])
            ("minibuffer-local-filename-must-match-map" variable (:default-value (make-sparse-keymap)) nil [103274 103344])
            ("make-obsolete-variable" code nil nil [103345 103422])
            ("let" code nil nil [103424 103587])
            ("minibuffer-inactive-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map "e" (quote find-file-other-frame)) (define-key map "f" (quote find-file-other-frame)) (define-key map "b" (quote switch-to-buffer-other-frame)) (define-key map "i" (quote info)) (define-key map "m" (quote mail)) (define-key map "n" (quote make-frame)) (define-key map [mouse-1] (quote view-echo-area-messages)) (define-key map [down-mouse-1] (function ignore)) map)) nil [103589 104365])
            ("define-derived-mode" code nil nil [104367 104694])
            ("minibuffer--double-dollars" function (:arguments ("str")) nil [104720 104976])
            ("completion--make-envvar-table" function nil nil [104978 105144])
            ("completion--embedded-envvar-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:^\\|[^$]\\(?:\\$\\$\\)*\\)" "$\\([[:alnum:]_]*\\|{\\([^}]*\\)\\)\\'"))
                nil [105146 105415])
            ("completion--embedded-envvar-table" function (:arguments ("string" "_pred" "action")) nil [105417 107864])
            ("completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [107866 110594])
            ("read-file-name-predicate" variable nil nil [110653 110747])
            ("make-obsolete-variable" code nil nil [110748 110861])
            ("completion--sifn-requote" function (:arguments ("upos" "qstr")) nil [110863 113246])
            ("defalias" code nil nil [113248 113682])
            ("defalias" code nil nil [113684 113907])
            ("read-file-name-function" variable (:default-value (quote read-file-name-default)) nil [113909 114082])
            ("insert-default-directory" variable (:default-value t) nil [114084 115123])
            ("declare-function" code nil nil [115205 115325])
            ("read-file-name--defaults" function (:arguments ("dir" "initial")) nil [115327 116517])
            ("read-file-name" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [116519 119603])
            ("minibuffer-local-filename-syntax" variable (:default-value (let ((table (make-syntax-table)) (punctuation (car (string-to-syntax ".")))) (map-char-table (lambda (c syntax) (when (eq (car syntax) punctuation) (modify-syntax-entry c "_" table))) table) (mapc (lambda (c) (modify-syntax-entry c "." table)) (quote (47 58 92))) table)) nil [119605 120077])
            ("read-file-name-default" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [120667 127884])
            ("internal-complete-buffer-except" function (:arguments ("buffer")) nil [127886 128385])
            ("completion-emacs21-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [128445 128664])
            ("completion-emacs21-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [128666 128880])
            ("completion-emacs22-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [128882 129919])
            ("completion-emacs22-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [129921 130193])
            ("completion--merge-suffix" function (:arguments ("completion" "point" "suffix")) nil [130218 130899])
            ("completion-basic--pattern" function (:arguments ("beforepoint" "afterpoint" "bounds")) nil [130901 131096])
            ("completion-basic-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [131098 132378])
            ("completion-basic-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [132380 133063])
            ("completion-pcm--delim-wild-regex" variable nil nil [133112 133564])
            ("completion-pcm--prepare-delim-re" function (:arguments ("delims")) nil [133566 133682])
            ("completion-pcm-word-delimiters" variable (:default-value "-_./:| ") nil [133684 134325])
            ("completion-pcm-complete-word-inserts-delimiters" variable nil nil [134327 134764])
            ("completion-pcm--pattern-trivial-p" function (:arguments ("pattern")) nil [134766 135051])
            ("completion-pcm--string->pattern" function (:arguments ("string" "point")) nil [135053 137510])
            ("completion-pcm--optimize-pattern" function (:arguments ("p")) nil [137512 138447])
            ("completion-pcm--pattern->regex" function (:arguments ("pattern" "group")) nil [138449 139259])
            ("completion-pcm--all-completions" function (:arguments ("prefix" "pattern" "table" "pred")) nil [139261 140514])
            ("completion-pcm--hilit-commonality" function (:arguments ("pattern" "completions")) nil [140516 141316])
            ("completion-pcm--find-all-completions" function (:arguments ("string" "table" "pred" "point" "filter")) nil [141318 146552])
            ("completion-pcm-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [146554 146854])
            ("completion--sreverse" function (:arguments ("str")) nil [146856 147003])
            ("completion--common-suffix" function (:arguments ("strs")) nil [147005 147188])
            ("completion-pcm--merge-completions" function (:arguments ("strs" "pattern")) nil [147190 152221])
            ("completion-pcm--pattern->string" function (:arguments ("pattern")) nil [152223 152494])
            ("completion-pcm--filename-try-filter" function (:arguments ("all")) nil [153118 153506])
            ("completion-pcm--merge-try" function (:arguments ("pattern" "all" "prefix" "suffix")) nil [153509 155361])
            ("completion-pcm-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [155363 155739])
            ("completion-substring--all-completions" function (:arguments ("string" "table" "pred" "point")) nil [155822 156557])
            ("completion-substring-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [156559 156946])
            ("completion-substring-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [156948 157283])
            ("completion-initials-expand" function (:arguments ("str" "table" "pred")) nil [157378 159027])
            ("completion-initials-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [159029 159256])
            ("completion-initials-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [159258 159483])
            ("completing-read-function" variable (:default-value (quote completing-read-default)) nil [159486 159663])
            ("completing-read-default" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [159665 161448])
            ("minibuffer-insert-file-name-at-point" function (:user-visible-flag t) nil [161469 161842])
            ("minibuffer" package nil nil [161844 161865]))          
      :file "minibuffer.el.gz"
      :pointmax 161895
      :fsize 42602
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 4246 . 4247) (symbol 4211 . 4228) (open-paren 4210 . 4211)))
    (semanticdb-table "indent.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("indent" customgroup (:user-visible-flag t) nil [1004 1069])
            ("standard-indent" variable (:default-value 4) nil [1071 1205])
            ("indent-line-function" variable (:default-value (quote indent-relative)) nil [1207 1593])
            ("tab-always-indent" variable (:default-value t) nil [1595 2350])
            ("indent-according-to-mode" function (:user-visible-flag t) nil [2353 3439])
            ("indent-for-tab-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [3441 5866])
            ("insert-tab" function (:arguments ("arg")) nil [5868 6160])
            ("indent-rigidly--current-indentation" function (:arguments ("beg" "end")) nil [6162 6647])
            ("indent-rigidly-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [left] (quote indent-rigidly-left)) (define-key map [right] (quote indent-rigidly-right)) (define-key map [S-left] (quote indent-rigidly-left-to-tab-stop)) (define-key map [S-right] (quote indent-rigidly-right-to-tab-stop)) map)) nil [6649 7072])
            ("indent-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg" "interactive"))
                nil [7074 8937])
            ("indent-rigidly--pop-undo" function nil nil [8939 9226])
            ("indent-rigidly-left" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [9228 9476])
            ("indent-rigidly-right" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [9478 9728])
            ("indent-rigidly-left-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [9730 10128])
            ("indent-rigidly-right-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10130 10526])
            ("indent-line-to" function (:arguments ("column")) nil [10528 11160])
            ("current-left-margin" function nil nil [11162 11566])
            ("move-to-left-margin" function
               (:user-visible-flag t
                :arguments ("n" "force"))
                nil [11568 12483])
            ("indent-to-left-margin" function nil nil [12583 12894])
            ("delete-to-left-margin" function (:arguments ("from" "to")) nil [12896 13460])
            ("set-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [13462 14337])
            ("set-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [14339 14898])
            ("alter-text-property" function (:arguments ("from" "to" "prop" "func" "object")) nil [14900 15568])
            ("increase-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [15570 16404])
            ("decrease-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [16406 16887])
            ("increase-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [16889 17542])
            ("decrease-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [17544 18075])
            ("beginning-of-line-text" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18077 19091])
            ("indent-region-function" variable nil nil [19093 19275])
            ("indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "column"))
                nil [19277 21679])
            ("indent-relative-maybe" function (:user-visible-flag t) nil [21681 21944])
            ("indent-relative" function
               (:user-visible-flag t
                :arguments ("unindented-ok"))
                nil [21946 23309])
            ("tab-stop-list" variable nil nil [23311 23871])
            ("edit-tab-stops-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote edit-tab-stops-note-changes)) (define-key map "" (quote edit-tab-stops-note-changes)) map)) nil [23873 24104])
            ("edit-tab-stops-buffer" variable nil nil [24106 24255])
            ("edit-tab-stops" function (:user-visible-flag t) nil [24257 25280])
            ("edit-tab-stops-note-changes" function (:user-visible-flag t) nil [25282 25682])
            ("indent-next-tab-stop" function (:arguments ("column" "prev")) nil [25684 26683])
            ("indent-accumulate-tab-stops" function (:arguments ("limit")) nil [26685 26925])
            ("tab-to-tab-stop" function (:user-visible-flag t) nil [26927 27356])
            ("move-to-tab-stop" function (:user-visible-flag t) nil [27358 28218])
            ("define-key" code nil nil [28220 28272])
            ("define-key" code nil nil [28273 28316])
            ("define-key" code nil nil [28317 28360])
            ("define-key" code nil nil [28361 28402]))          
      :file "indent.el.gz"
      :pointmax 28428
      :fsize 7906
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "info-look.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("info" include nil nil [1493 1508])
            ("info-lookup" customgroup (:user-visible-flag t) nil [1510 1606])
            ("info-lookup-mode" variable nil nil [1608 1814])
            ("make-variable-buffer-local" code nil nil [1815 1861])
            ("info-lookup-other-window-flag" variable (:default-value t) nil [1863 2003])
            ("info-lookup-highlight-face" variable (:default-value (quote match)) nil [2005 2184])
            ("info-lookup-highlight-overlay" variable nil nil [2186 2270])
            ("info-lookup-file-name-alist" variable (:default-value (quote (("\\`ac\\(local\\|site\\|include\\)\\.m4\\'" . autoconf-mode)))) nil [2272 2672])
            ("info-lookup-history" variable nil nil [2674 2743])
            ("info-lookup-alist" variable nil nil [2745 4280])
            ("info-lookup->topic-value" function (:arguments ("topic")) nil [4282 4365])
            ("info-lookup->mode-value" function (:arguments ("topic" "mode")) nil [4367 4462])
            ("info-lookup->regexp" function (:arguments ("topic" "mode")) nil [4464 4554])
            ("info-lookup->ignore-case" function (:arguments ("topic" "mode")) nil [4556 4651])
            ("info-lookup->doc-spec" function (:arguments ("topic" "mode")) nil [4653 4745])
            ("info-lookup->parse-rule" function (:arguments ("topic" "mode")) nil [4747 4841])
            ("info-lookup->other-modes" function (:arguments ("topic" "mode")) nil [4843 4938])
            ("info-lookup-add-help" function (:arguments ("arg")) nil [4940 5498])
            ("info-lookup-maybe-add-help" function (:arguments ("arg")) nil [5500 5713])
            ("info-lookup-add-help*" function (:arguments ("maybe" "arg")) nil [5715 7125])
            ("info-lookup-cache" variable nil nil [7127 7645])
            ("info-lookup->cache" function (:arguments ("topic")) nil [7647 7814])
            ("info-lookup->topic-cache" function (:arguments ("topic")) nil [7816 7891])
            ("info-lookup->mode-cache" function (:arguments ("topic" "mode")) nil [7893 7985])
            ("info-lookup->initialized" function (:arguments ("topic" "mode")) nil [7987 8079])
            ("info-lookup->completions" function (:arguments ("topic" "mode")) nil [8081 8260])
            ("info-lookup->refer-modes" function (:arguments ("topic" "mode")) nil [8262 8441])
            ("info-lookup->all-modes" function (:arguments ("topic" "mode")) nil [8443 8538])
            ("info-lookup-quick-all-modes" function (:arguments ("topic" "mode")) nil [8540 8640])
            ("info-lookup-reset" function (:user-visible-flag t) nil [8657 8922])
            ("info-lookup-symbol" function
               (:user-visible-flag t
                :arguments ("symbol" "mode"))
                nil [8999 9535])
            ("info-lookup-file" function
               (:user-visible-flag t
                :arguments ("file" "mode"))
                nil [9610 10098])
            ("info-lookup-interactive-arguments" function (:arguments ("topic" "query")) nil [10100 10960])
            ("info-lookup-select-mode" function nil nil [10962 12214])
            ("info-lookup-change-mode" function (:arguments ("topic")) nil [12216 12722])
            ("info-lookup" function (:arguments ("topic" "item" "mode")) nil [12724 16907])
            ("info-lookup-setup-mode" function (:arguments ("topic" "mode")) nil [16909 18197])
            ("info-lookup-make-completions" function (:arguments ("topic" "mode")) nil [18199 20171])
            ("info-lookup-guess-default" function (:arguments ("topic" "mode")) nil [20173 20816])
            ("info-lookup-guess-default*" function (:arguments ("topic" "mode")) nil [20818 21739])
            ("info-lookup-guess-c-symbol" function nil nil [21741 22708])
            ("info-lookup-guess-custom-symbol" function nil nil [22710 24081])
            ("info-complete-symbol" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [24098 24389])
            ("info-complete-file" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [24406 24687])
            ("info-lookup-completions-at-point" function (:arguments ("topic" "mode")) nil [24689 25883])
            ("info-complete" function (:arguments ("topic" "mode")) nil [25885 26207])
            ("info-lookup-maybe-add-help" code nil nil [26246 27089])
            ("info-lookup-maybe-add-help" code nil nil [27091 27211])
            ("info-lookup-maybe-add-help" code nil nil [27213 27461])
            ("info-lookup-maybe-add-help" code nil nil [27463 27687])
            ("info-lookup-maybe-add-help" code nil nil [27689 28902])
            ("info-lookup-maybe-add-help" code nil nil [28904 29249])
            ("info-lookup-maybe-add-help" code nil nil [29251 29392])
            ("info-lookup-maybe-add-help" code nil nil [29394 31514])
            ("info-lookup-maybe-add-help" code nil nil [31516 32186])
            ("info-lookup-maybe-add-help" code nil nil [32188 33047])
            ("info-lookup-maybe-add-help" code nil nil [33049 33193])
            ("info-lookup-maybe-add-help" code nil nil [33195 33470])
            ("info-lookup-maybe-add-help" code nil nil [33472 34428])
            ("info-lookup-maybe-add-help" code nil nil [34506 34651])
            ("info-lookup-maybe-add-help" code nil nil [34653 34795])
            ("info-lookup-maybe-add-help" code nil nil [34797 34925])
            ("info-lookup-maybe-add-help" code nil nil [34927 35167])
            ("info-lookup-maybe-add-help" code nil nil [35169 35786])
            ("info-lookup-maybe-add-help" code nil nil [35788 35987])
            ("info-lookup-maybe-add-help" code nil nil [35989 36101])
            ("info-lookup-maybe-add-help" code nil nil [36820 38903])
            ("info-lookup-maybe-add-help" code nil nil [39091 39515])
            ("info-lookup-maybe-add-help" code nil nil [39517 39691])
            ("info-lookup-maybe-add-help" code nil nil [39693 39803])
            ("info-look" package nil nil [39806 39826]))          
      :file "info-look.el.gz"
      :pointmax 39855
      :fsize 11494
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "info-xref.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("info" include nil nil [1600 1615])
            ("cl-lib" include nil nil [1635 1652])
            ("info-xref" customgroup (:user-visible-flag t) nil [1673 1767])
            ("info-xref-case-fold" variable nil nil [1849 2357])
            ("info-xref-lock-file-p" function (:arguments ("filename")) nil [2460 2654])
            ("info-xref-subfile-p" function (:arguments ("filename")) nil [2656 3152])
            ("info-xref-with-file" function (:arguments ("filename" "body")) nil [3154 4218])
            ("info-xref-output-buffer" variable
               (:constant-flag t
                :default-value "*info-xref results*")
                nil [4319 4421])
            ("info-xref-good" variable nil nil [4423 4513])
            ("info-xref-bad" variable nil nil [4514 4602])
            ("info-xref-unavail" variable nil nil [4603 4703])
            ("info-xref-output-heading" variable nil nil [4705 4850])
            ("info-xref-filename" variable nil nil [4852 5046])
            ("info-xref-xfile-alist" variable nil nil [5048 5369])
            ("info-xref-in-progress" variable nil nil [5371 5405])
            ("info-xref-with-output" function (:arguments ("body")) nil [5406 6519])
            ("info-xref-output" function (:arguments ("fmt" "args")) nil [6521 7026])
            ("put" code nil nil [7027 7078])
            ("info-xref-output-error" function (:arguments ("fmt" "args")) nil [7080 7500])
            ("put" code nil nil [7501 7558])
            ("info-xref-goto-node-p" function (:arguments ("node")) nil [8159 8809])
            ("info-xref-check-node" function (:arguments ("node")) nil [8811 10332])
            ("info-xref-check" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [10431 12464])
            ("info-xref-check-all" function (:user-visible-flag t) nil [12481 13114])
            ("info-xref-all-info-files" function nil nil [13478 14646])
            ("info-xref-check-list" function (:arguments ("filename-list")) nil [14648 15707])
            ("info-xref-node-re" variable
               (:constant-flag t
                :default-value "\\(?1:\\(([^)]*)\\)[^.,]+\\)")
                nil [15709 15816])
            ("info-xref-note-re" variable
               (:constant-flag t
                :default-value (concat "\\*[Nn]ote[ 
	]+\\(?:" "[^:]*:[ 
	]+" info-xref-node-re "\\|" info-xref-node-re "::\\)[.,]"))
                nil [16032 16229])
            ("info-xref-check-buffer" function nil nil [16231 16613])
            ("viper-mode" variable nil nil [16615 16634])
            ("gnus-registry-install" variable nil nil [16664 16694])
            ("info-xref-check-all-custom" function (:user-visible-flag t) nil [16711 19861])
            ("info-xref-docstrings" function
               (:user-visible-flag t
                :arguments ("filename-list"))
                nil [19878 22467])
            ("info-xref" package nil nil [22470 22490]))          
      :file "info-xref.el.gz"
      :pointmax 22519
      :fsize 7292
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1652 . 1653) (symbol 1617 . 1634) (open-paren 1616 . 1617)))
    (semanticdb-table "thingatpt.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("thingatpt" package nil nil [1992 2012])
            ("forward-thing" function (:arguments ("thing" "n")) nil [2048 2563])
            ("bounds-of-thing-at-point" function (:arguments ("thing")) nil [2601 4635])
            ("thing-at-point" function (:arguments ("thing" "no-properties")) nil [4652 5496])
            ("beginning-of-thing" function (:arguments ("thing")) nil [5522 5788])
            ("end-of-thing" function (:arguments ("thing")) nil [5790 6044])
            ("put" code nil nil [6177 6269])
            ("in-string-p" function nil nil [6282 6502])
            ("end-of-sexp" function nil nil [6504 6775])
            ("put" code nil nil [6777 6809])
            ("beginning-of-sexp" function nil nil [6811 7101])
            ("put" code nil nil [7103 7147])
            ("put" code nil nil [7160 7237])
            ("thing-at-point-bounds-of-list-at-point" function nil nil [7239 7742])
            ("put" code nil nil [7755 7801])
            ("put" code nil nil [7802 7842])
            ("put" code nil nil [7843 7883])
            ("thing-at-point-file-name-chars" variable (:default-value "-~/[:alnum:]_.${}#%,:") nil [7900 8002])
            ("put" code nil nil [8004 8134])
            ("put" code nil nil [8135 8324])
            ("thing-at-point-beginning-of-url-regexp" variable nil nil [8336 8507])
            ("thing-at-point-url-path-regexp" variable (:default-value "[^]	
 \"'<>[^`{}]*[^]	
 \"'<>[^`{}.,;]+") nil [8509 8663])
            ("thing-at-point-short-url-regexp" variable (:default-value (concat "[-A-Za-z0-9]+\\.[-A-Za-z0-9.]+" thing-at-point-url-path-regexp)) nil [8665 8834])
            ("thing-at-point-uri-schemes" variable (:default-value (quote ("aaa://" "about:" "acap://" "apt:" "bzr://" "bzr+ssh://" "attachment:/" "chrome://" "cid:" "content://" "crid://" "cvs://" "data:" "dav:" "dict://" "doi:" "dns:" "dtn:" "feed:" "file:/" "finger://" "fish://" "ftp://" "geo:" "git://" "go:" "gopher://" "h323:" "http://" "https://" "im:" "imap://" "info:" "ipp:" "irc://" "irc6://" "ircs://" "iris.beep:" "jar:" "ldap://" "ldaps://" "mailto:" "mid:" "mtqp://" "mupdate://" "news:" "nfs://" "nntp://" "opaquelocktoken:" "pop://" "pres:" "resource://" "rmi://" "rsync://" "rtsp://" "rtspu://" "service:" "sftp://" "sip:" "sips:" "smb://" "sms:" "snmp://" "soap.beep://" "soap.beeps://" "ssh://" "svn://" "svn+ssh://" "tag:" "tel:" "telnet://" "tftp://" "tip://" "tn3270://" "udp://" "urn:" "uuid:" "vemmi://" "webcal://" "xri://" "xmlrpc.beep://" "xmlrpc.beeps://" "z39.50r://" "z39.50s://" "xmpp:" "fax:" "mms://" "mmsh://" "modem:" "prospero:" "snews:" "wais://"))) nil [8836 10173])
            ("thing-at-point-markedup-url-regexp" variable (:default-value "<URL:\\([^<>
]+\\)>") nil [10175 10460])
            ("thing-at-point-newsgroup-regexp" variable (:default-value "\\`[[:lower:]]+\\.[-+[:lower:]_0-9.]+\\'") nil [10462 10585])
            ("thing-at-point-newsgroup-heads" variable (:default-value (quote ("alt" "comp" "gnu" "misc" "news" "sci" "soc" "talk"))) nil [10587 10748])
            ("thing-at-point-default-mail-uri-scheme" variable (:default-value "mailto") nil [10750 10919])
            ("put" code nil nil [10921 10996])
            ("thing-at-point-bounds-of-url-at-point" function (:arguments ("lax")) nil [10998 12199])
            ("thing-at-point--bounds-of-markedup-url" function nil nil [12201 12710])
            ("thing-at-point--bounds-of-well-formed-url" function (:arguments ("beg" "end" "_pt")) nil [12712 13806])
            ("put" code nil nil [13808 13863])
            ("thing-at-point-url-at-point" function (:arguments ("lax" "bounds")) nil [13865 16299])
            ("thing-at-point-newsgroup-p" function (:arguments ("string")) nil [16301 17194])
            ("put" code nil nil [17196 17246])
            ("put" code nil nil [17248 17304])
            ("thing-at-point-looking-at" function (:arguments ("regexp" "distance")) nil [17709 18922])
            ("thing-at-point-email-regexp" variable (:default-value "<?[-+_.~a-zA-Z][-+_.~:a-zA-Z0-9]*@[-.a-zA-Z0-9]+>?") nil [18945 19190])
            ("put" code nil nil [19433 19726])
            ("put" code nil nil [19728 19966])
            ("put" code nil nil [19980 20037])
            ("put" code nil nil [20038 20101])
            ("word-at-point" function nil nil [20116 20218])
            ("sentence-at-point" function nil nil [20220 20334])
            ("read-from-whole-string" function (:arguments ("str")) nil [20336 20789])
            ("form-at-point" function (:arguments ("thing" "pred")) nil [20791 20979])
            ("sexp-at-point" function nil nil [20996 21099])
            ("symbol-at-point" function nil nil [21115 21271])
            ("number-at-point" function nil nil [21287 21403])
            ("put" code nil nil [21404 21450])
            ("list-at-point" function nil nil [21466 21581]))          
      :file "thingatpt.el.gz"
      :pointmax 21610
      :fsize 7025
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "abbrev.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1049 1066])
            ("abbrev-mode" customgroup (:user-visible-flag t) nil [1069 1183])
            ("abbrev-file-name" variable (:default-value (locate-user-emacs-file "abbrev_defs" ".abbrev_defs")) nil [1185 1375])
            ("only-global-abbrevs" variable nil nil [1377 1628])
            ("define-minor-mode" code nil nil [1630 2058])
            ("put" code nil nil [2060 2109])
            ("edit-abbrevs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote abbrev-edit-save-buffer)) (define-key map "" (quote abbrev-edit-save-to-file)) (define-key map "" (quote edit-abbrevs-redefine)) map)) nil [2113 2393])
            ("define-obsolete-variable-alias" code nil nil [2394 2476])
            ("kill-all-abbrevs" function (:user-visible-flag t) nil [2478 2649])
            ("copy-abbrev-table" function (:arguments ("table")) nil [2651 2986])
            ("insert-abbrevs" function (:user-visible-flag t) nil [2988 3274])
            ("list-abbrevs" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [3276 3574])
            ("abbrev-table-name" function (:arguments ("table")) nil [3576 3862])
            ("prepare-abbrev-list-buffer" function (:arguments ("local")) nil [3864 4750])
            ("edit-abbrevs" function (:user-visible-flag t) nil [4752 5695])
            ("edit-abbrevs-redefine" function (:user-visible-flag t) nil [5697 5892])
            ("define-abbrevs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5894 6892])
            ("read-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "quietly"))
                nil [6894 7411])
            ("quietly-read-abbrev-file" function (:arguments ("file")) nil [7413 7738])
            ("write-abbrev-file" function
               (:user-visible-flag t
                :arguments ("file" "verbose"))
                nil [7740 9499])
            ("abbrev-edit-save-to-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [9501 9821])
            ("abbrev-edit-save-buffer" function (:user-visible-flag t) nil [9823 10056])
            ("add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10060 10600])
            ("add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10602 11092])
            ("add-abbrev" function (:arguments ("table" "type" "arg")) nil [11094 11687])
            ("inverse-add-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11689 12120])
            ("inverse-add-global-abbrev" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12122 12465])
            ("inverse-add-abbrev" function (:arguments ("table" "type" "arg")) nil [12467 13078])
            ("abbrev-prefix-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13080 13741])
            ("expand-region-abbrevs" function
               (:user-visible-flag t
                :arguments ("start" "end" "noquery"))
                nil [13743 14430])
            ("abbrev-table-get" function (:arguments ("table" "prop")) nil [14456 14609])
            ("abbrev-table-put" function (:arguments ("table" "prop" "val")) nil [14611 14836])
            ("defalias" code nil nil [14838 14927])
            ("defalias" code nil nil [14929 15099])
            ("abbrev-table-name-list" variable (:default-value (quote (fundamental-mode-abbrev-table global-abbrev-table))) nil [15155 15296])
            ("make-abbrev-table" function (:arguments ("props")) nil [15298 16089])
            ("abbrev-table-p" function (:arguments ("object")) nil [16091 16260])
            ("abbrev-table-empty-p" function (:arguments ("object" "ignore-system")) nil [16262 16726])
            ("global-abbrev-table" variable (:default-value (make-abbrev-table)) nil [16728 16975])
            ("abbrev-minor-mode-table-alist" variable nil nil [16977 17232])
            ("fundamental-mode-abbrev-table" variable (:default-value (let ((table (make-abbrev-table))) (setq-default local-abbrev-table table) table)) nil [17234 17509])
            ("abbrevs-changed" variable nil nil [17511 17659])
            ("abbrev-all-caps" variable nil nil [17661 17802])
            ("abbrev-start-location" variable nil nil [17804 18006])
            ("abbrev-start-location-buffer" variable nil nil [18008 18186])
            ("last-abbrev" variable nil nil [18188 18285])
            ("last-abbrev-text" variable nil nil [18287 18417])
            ("last-abbrev-location" variable nil nil [18419 18509])
            ("pre-abbrev-expand-hook" variable nil nil [18686 18961])
            ("make-obsolete-variable" code nil nil [18962 19041])
            ("clear-abbrev-table" function (:arguments ("table")) nil [19043 19665])
            ("define-abbrev" function (:arguments ("table" "name" "expansion" "hook" "props")) nil [19667 22678])
            ("abbrev--check-chars" function (:arguments ("abbrev" "global")) nil [22680 23423])
            ("define-global-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23425 23783])
            ("define-mode-abbrev" function
               (:user-visible-flag t
                :arguments ("abbrev" "expansion"))
                nil [23785 24207])
            ("abbrev--active-tables" function (:arguments ("tables")) nil [24209 25256])
            ("abbrev--symbol" function (:arguments ("abbrev" "table")) nil [25259 26207])
            ("abbrev-symbol" function (:arguments ("abbrev" "table")) nil [26209 26903])
            ("abbrev-expansion" function (:arguments ("abbrev" "table")) nil [26906 27166])
            ("abbrev--before-point" function nil nil [27169 29753])
            ("abbrev-insert" function (:arguments ("abbrev" "name" "wordstart" "wordend")) nil [29755 32799])
            ("abbrev-expand-functions" variable nil nil [32801 32887])
            ("make-obsolete-variable" code nil nil [32888 32968])
            ("abbrev-expand-function" variable (:default-value (function abbrev--default-expand)) nil [32970 33173])
            ("expand-abbrev" function (:user-visible-flag t) nil [33175 33640])
            ("abbrev--default-expand" function nil nil [33642 35069])
            ("unexpand-abbrev" function (:user-visible-flag t) nil [35071 35969])
            ("abbrev--write" function (:arguments ("sym")) nil [35971 36426])
            ("abbrev--describe" function (:arguments ("sym")) nil [36428 36822])
            ("insert-abbrev-table-description" function (:arguments ("name" "readable")) nil [36824 37865])
            ("put" code nil nil [37867 37911])
            ("define-abbrev-table" function (:arguments ("tablename" "definitions" "docstring" "props")) nil [37912 39916])
            ("abbrev-table-menu" function (:arguments ("table" "prompt" "sortfun")) nil [39918 40734])
            ("define-derived-mode" code nil nil [40829 40959])
            ("abbrev" package nil nil [40961 40978]))          
      :file "abbrev.el.gz"
      :pointmax 41004
      :fsize 11960
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1066 . 1067) (symbol 1031 . 1048) (open-paren 1030 . 1031)))
    (semanticdb-table "image.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("image" customgroup (:user-visible-flag t) nil [865 924])
            ("defalias" code nil nil [926 964])
            ("image-type-header-regexps" variable
               (:constant-flag t
                :default-value (\` (("\\`/[	
 ]*\\*.*XPM.\\*/" . xpm) ("\\`P[1-6]\\(?:\\(?:\\(?:#[^
]*[
]\\)?[[:space:]]\\)+\\(?:\\(?:#[^
]*[
]\\)?[0-9]\\)+\\)\\{2\\}" . pbm) ("\\`GIF8[79]a" . gif) ("\\`\211PNG

" . png) ("\\`[	
 ]*#define \\([a-z0-9_]+\\)_width [0-9]+
#define \\1_height [0-9]+
\\(#define \\1_x_hot [0-9]+
#define \\1_y_hot [0-9]+
\\)?static \\(unsigned \\)?char \\1_bits" . xbm) ("\\`\\(?:MM \\*\\|II\\* \\)" . tiff) ("\\`[	
 ]*%!PS" . postscript) ("\\`\377\330" . jpeg) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Ss][Vv][Gg]"))) . svg))))
                nil [966 2290])
            ("image-type-file-name-regexps" variable (:default-value (quote (("\\.png\\'" . png) ("\\.gif\\'" . gif) ("\\.jpe?g\\'" . jpeg) ("\\.bmp\\'" . bmp) ("\\.xpm\\'" . xpm) ("\\.pbm\\'" . pbm) ("\\.xbm\\'" . xbm) ("\\.ps\\'" . postscript) ("\\.tiff?\\'" . tiff) ("\\.svgz?\\'" . svg)))) nil [2292 2751])
            ("image-type-auto-detectable" variable (:default-value (quote ((pbm . t) (xbm) (bmp . maybe) (gif . maybe) (png . maybe) (xpm) (jpeg . maybe) (tiff . maybe) (svg . maybe) (postscript)))) nil [2928 3431])
            ("image-format-suffixes" variable (:default-value (quote ((image/x-icon "ico")))) nil [3433 3948])
            ("image-load-path" variable (:default-value (list (file-name-as-directory (expand-file-name "images" data-directory)) (quote data-directory) (quote load-path))) nil [3950 4569])
            ("image-load-path-for-library" function (:arguments ("library" "image" "path" "no-error")) nil [4572 8616])
            ("image-jpeg-p" function (:arguments ("data")) nil [8712 9500])
            ("image-type-from-data" function (:arguments ("data")) nil [9518 10091])
            ("image-type-from-buffer" function nil nil [10109 10955])
            ("image-type-from-file-header" function (:arguments ("file")) nil [10973 11460])
            ("image-type-from-file-name" function (:arguments ("file")) nil [11478 11986])
            ("image-type" function (:arguments ("source" "type" "data-p")) nil [12003 12876])
            ("if" code nil nil [12879 13029])
            ("define-obsolete-variable-alias" code nil nil [13031 13122])
            ("image-type-available-p" function (:arguments ("type")) nil [13139 13345])
            ("image-type-auto-detected-p" function nil nil [13363 14008])
            ("create-image" function (:arguments ("file-or-data" "type" "data-p" "props")) nil [14026 15124])
            ("put-image" function (:arguments ("image" "pos" "string" "area")) nil [15142 16425])
            ("insert-image" function (:arguments ("image" "string" "area" "slice")) nil [16443 18248])
            ("insert-sliced-image" function (:arguments ("image" "string" "area" "rows" "cols")) nil [18266 19920])
            ("remove-images" function (:arguments ("start" "end" "buffer")) nil [19939 20426])
            ("image-search-load-path" function (:arguments ("file" "path")) nil [20428 21134])
            ("find-image" function (:arguments ("specs")) nil [21151 22464])
            ("defimage" function (:arguments ("symbol" "specs" "doc")) nil [22482 23350])
            ("image-default-frame-delay" variable (:default-value 0.1) nil [23378 23536])
            ("image-multi-frame-p" function (:arguments ("image")) nil [23538 24234])
            ("image-animated-p" function (:arguments ("image")) nil [24236 24416])
            ("make-obsolete" code nil nil [24418 24479])
            ("image-animate" function (:arguments ("image" "index" "limit")) nil [24501 25221])
            ("image-animate-timer" function (:arguments ("image")) nil [25223 25606])
            ("image-minimum-frame-delay" variable
               (:constant-flag t
                :default-value 0.01)
                nil [25608 25718])
            ("image-current-frame" function (:arguments ("image")) nil [25720 25850])
            ("image-show-frame" function (:arguments ("image" "n" "nocheck")) nil [25852 26234])
            ("image-animate-get-speed" function (:arguments ("image")) nil [26236 26364])
            ("image-animate-set-speed" function (:arguments ("image" "value" "multiply")) nil [26366 26700])
            ("image-animate-timeout" function (:arguments ("image" "n" "count" "time-elapsed" "limit")) nil [26909 28462])
            ("imagemagick-types-inhibit" variable nil nil [28466 28500])
            ("imagemagick-enabled-types" variable nil nil [28501 28535])
            ("imagemagick-filter-types" function nil nil [28537 29354])
            ("imagemagick--file-regexp" variable nil nil [29356 29573])
            ("imagemagick-register-types" function nil nil [29590 31082])
            ("imagemagick-types-inhibit" variable (:default-value (quote (C HTML HTM INFO M TXT PDF))) nil [31084 31961])
            ("imagemagick-enabled-types" variable (:default-value (quote (3FR ART ARW AVS BMP BMP2 BMP3 CAL CALS CMYK CMYKA CR2 CRW CUR CUT DCM DCR DCX DDS DJVU DNG DPX EXR FAX FITS GBR GIF GIF87 GRB HRZ ICB ICO ICON J2C JNG JP2 JPC JPEG JPG JPX K25 KDC MIFF MNG MRW MSL MSVG MTV NEF ORF OTB PBM PCD PCDS PCL PCT PCX PDB PEF PGM PICT PIX PJPEG PNG PNG24 PNG32 PNG8 PNM PPM PSD PTIF PWP RAF RAS RBG RGB RGBA RGBO RLA RLE SCR SCT SFW SGI SR2 SRF SUN SVG SVGZ TGA TIFF TIFF64 TILE TIM TTF UYVY VDA VICAR VID VIFF VST WBMP WPG X3F XBM XC XCF XPM XV XWD YCbCr YCbCrA YUV))) nil [31963 33521])
            ("imagemagick-register-types" code nil nil [33523 33551])
            ("image" package nil nil [33553 33569]))          
      :file "image.el.gz"
      :pointmax 33594
      :fsize 10247
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "info.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("info" customgroup (:user-visible-flag t) nil [1270 1339])
            ("Info-history" variable nil nil [1342 1476])
            ("Info-history-forward" variable nil nil [1478 1653])
            ("Info-history-list" variable nil nil [1655 1786])
            ("Info-history-skip-intermediate-nodes" variable (:default-value t) nil [1788 2120])
            ("Info-enable-active-nodes" variable nil nil [2122 2280])
            ("put" code nil nil [2281 2336])
            ("info-node" variable
               (:default-value (quote ((((class color) (background light)) :foreground "brown" :weight bold :slant italic) (((class color) (background dark)) :foreground "white" :weight bold :slant italic) (t :weight bold :slant italic)))
                :type "face")
                nil [2338 2613])
            ("info-title-1" variable
               (:default-value (quote ((((type tty pc) (class color) (background light)) :foreground "green" :weight bold) (((type tty pc) (class color) (background dark)) :foreground "yellow" :weight bold) (t :height 1.2 :inherit info-title-2)))
                :type "face")
                nil [2615 2918])
            ("define-obsolete-face-alias" code nil nil [2919 2987])
            ("info-title-2" variable
               (:default-value (quote ((((type tty pc) (class color)) :foreground "lightblue" :weight bold) (t :height 1.2 :inherit info-title-3)))
                :type "face")
                nil [2989 3179])
            ("define-obsolete-face-alias" code nil nil [3180 3248])
            ("info-title-3" variable
               (:default-value (quote ((((type tty pc) (class color)) :weight bold) (t :height 1.2 :inherit info-title-4)))
                :type "face")
                nil [3250 3416])
            ("define-obsolete-face-alias" code nil nil [3417 3485])
            ("info-title-4" variable
               (:default-value (quote ((((type tty pc) (class color)) :weight bold) (t :weight bold :inherit variable-pitch)))
                :type "face")
                nil [3487 3656])
            ("define-obsolete-face-alias" code nil nil [3657 3725])
            ("info-menu-header" variable
               (:default-value (quote ((((type tty pc)) :underline t :weight bold) (t :inherit variable-pitch :weight bold)))
                :type "face")
                nil [3727 3918])
            ("info-menu-star" variable
               (:default-value (quote ((((class color)) :foreground "red1") (t :underline t)))
                :type "face")
                nil [3920 4068])
            ("define-obsolete-face-alias" code nil nil [4069 4133])
            ("info-xref" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [4135 4238])
            ("info-xref-visited" variable
               (:default-value (quote ((t :inherit (link-visited info-xref))))
                :type "face")
                nil [4240 4387])
            ("Info-fontify-visited-nodes" variable (:default-value t) nil [4389 4559])
            ("Info-fontify-maximum-menu-size" variable (:default-value 100000) nil [4561 4752])
            ("Info-use-header-line" variable (:default-value t) nil [4754 4957])
            ("info-header-xref" variable
               (:default-value (quote ((t :inherit info-xref)))
                :type "face")
                nil [4959 5081])
            ("info-header-node" variable
               (:default-value (quote ((t :inherit info-node)))
                :type "face")
                nil [5083 5194])
            ("info-index-match" variable
               (:default-value (quote ((t :inherit match)))
                :type "face")
                nil [5196 5333])
            ("progn" code nil nil [5681 8838])
            ("Info-directory-list" variable nil nil [8840 10389])
            ("Info-additional-directory-list" variable nil nil [10391 10624])
            ("Info-scroll-prefer-subnodes" variable nil nil [10626 11258])
            ("Info-hide-note-references" variable (:default-value t) nil [11260 12036])
            ("Info-refill-paragraphs" variable nil nil [12038 12403])
            ("Info-breadcrumbs-depth" variable (:default-value 4) nil [12405 12564])
            ("Info-search-whitespace-regexp" variable (:default-value "\\s-+") nil [12566 12960])
            ("Info-isearch-search" variable (:default-value t) nil [12962 13655])
            ("Info-isearch-initial-node" variable nil nil [13657 13695])
            ("Info-isearch-initial-history" variable nil nil [13696 13737])
            ("Info-isearch-initial-history-list" variable nil nil [13738 13784])
            ("Info-mode-hook" variable (:default-value (unless (and (boundp (quote Info-fontify)) (null Info-fontify)) (quote (turn-on-font-lock)))) nil [13786 14017])
            ("Info-selection-hook" variable nil nil [14019 14132])
            ("Info-edit-mode-hook" variable nil nil [14134 14213])
            ("make-obsolete-variable" code nil nil [14215 14319])
            ("Info-current-file" variable nil nil [14321 14547])
            ("Info-current-subfile" variable nil nil [14549 14701])
            ("Info-current-node" variable nil nil [14703 14787])
            ("Info-tag-table-marker" variable nil nil [14789 14938])
            ("Info-tag-table-buffer" variable nil nil [14940 15015])
            ("Info-current-file-completions" variable nil nil [15017 15109])
            ("Info-file-completions" variable nil nil [15111 15246])
            ("Info-file-supports-index-cookies" variable nil nil [15248 15350])
            ("Info-file-supports-index-cookies-list" variable nil nil [15352 15593])
            ("Info-index-alternatives" variable nil nil [15595 15691])
            ("Info-point-loc" variable nil nil [15693 15943])
            ("Info-standalone" variable nil nil [15945 16033])
            ("Info-file-attributes" variable nil nil [16035 16175])
            ("Info-toc-nodes" variable nil nil [16177 16541])
            ("Info-index-nodes" variable nil nil [16543 16693])
            ("Info-virtual-files" variable nil nil [16695 17216])
            ("Info-virtual-nodes" variable nil nil [17218 17713])
            ("Info-current-node-virtual" variable nil nil [17715 17802])
            ("Info-virtual-file-p" function (:arguments ("filename")) nil [17804 17931])
            ("Info-virtual-fun" function (:arguments ("op" "filename" "nodename")) nil [17933 18629])
            ("Info-virtual-call" function (:arguments ("virtual-fun" "args")) nil [18631 18814])
            ("Info-suffix-list" variable (:default-value (if (eq system-type (quote ms-dos)) (quote ((".gz" . "gunzip") (".z" . "gunzip") (".bz2" "bzip2" "-dc") (".inz" . "gunzip") (".igz" . "gunzip") (".info.Z" . "gunzip") (".info.gz" . "gunzip") ("-info.Z" . "gunzip") ("-info.gz" . "gunzip") ("/index.gz" . "gunzip") ("/index.z" . "gunzip") (".inf") (".info") ("-info") ("/index") (""))) (quote ((".info.Z" . "uncompress") (".info.Y" . "unyabba") (".info.gz" . "gunzip") (".info.z" . "gunzip") (".info.bz2" "bzip2" "-dc") (".info.xz" . "unxz") (".info") ("-info.Z" . "uncompress") ("-info.Y" . "unyabba") ("-info.gz" . "gunzip") ("-info.bz2" "bzip2" "-dc") ("-info.z" . "gunzip") ("-info.xz" . "unxz") ("-info") ("/index.Z" . "uncompress") ("/index.Y" . "unyabba") ("/index.gz" . "gunzip") ("/index.z" . "gunzip") ("/index.bz2" "bzip2" "-dc") ("/index.xz" . "unxz") ("/index") (".Z" . "uncompress") (".Y" . "unyabba") (".gz" . "gunzip") (".z" . "gunzip") (".bz2" "bzip2" "-dc") (".xz" . "unxz") (""))))) nil [18818 20793])
            ("info-insert-file-contents-1" function (:arguments ("filename" "suffix" "lfn")) nil [20976 21893])
            ("info-file-exists-p" function (:arguments ("filename")) nil [21895 22006])
            ("info-insert-file-contents" function (:arguments ("filename" "visit")) nil [22008 25136])
            ("Info-file-supports-index-cookies" function (:arguments ("file")) nil [25138 26293])
            ("Info-default-dirs" function nil nil [26297 27880])
            ("info-initialize" function nil nil [27889 28948])
            ("info-other-window" function
               (:user-visible-flag t
                :arguments ("file-or-node" "buffer"))
                nil [28965 29395])
            ("info" function
               (:user-visible-flag t
                :arguments ("file-or-node" "buffer"))
                nil [29469 30760])
            ("info-setup" function (:arguments ("file-or-node" "buffer")) nil [30762 31504])
            ("info-emacs-manual" function (:user-visible-flag t) nil [31521 31625])
            ("info-emacs-bug" function (:user-visible-flag t) nil [31642 31783])
            ("info-standalone" function nil nil [31800 32402])
            ("Info-node-at-bob-matching" function (:arguments ("regexp")) nil [32984 33302])
            ("Info-find-file" function (:arguments ("filename" "noerror")) nil [33304 35680])
            ("Info-find-node" function (:arguments ("filename" "nodename" "no-going-back" "strict-case")) nil [35682 36533])
            ("Info-on-current-buffer" function
               (:user-visible-flag t
                :arguments ("nodename"))
                nil [36550 37189])
            ("Info-revert-find-node" function (:arguments ("filename" "nodename")) nil [37191 38557])
            ("Info-revert-buffer-function" function (:arguments ("_ignore-auto" "noconfirm")) nil [38559 38787])
            ("Info-find-in-tag-table-1" function (:arguments ("marker" "regexp" "case-fold")) nil [38789 39666])
            ("Info-find-in-tag-table" function (:arguments ("marker" "regexp" "strict-case")) nil [39668 40491])
            ("Info-find-node-in-buffer-1" function (:arguments ("regexp" "case-fold")) nil [40493 41264])
            ("Info-find-node-in-buffer" function (:arguments ("regexp" "strict-case")) nil [41266 41836])
            ("Info-find-node-2" function (:arguments ("filename" "nodename" "no-going-back" "strict-case")) nil [41838 48484])
            ("Info-dir-contents" variable nil nil [48615 48645])
            ("Info-dir-contents-directory" variable nil nil [48745 48785])
            ("Info-dir-file-attributes" variable nil nil [48882 48919])
            ("Info-dir-file-name" variable nil nil [48921 48952])
            ("Info-insert-dir" function nil nil [49156 55360])
            ("Info-streamline-headings" variable (:default-value (quote (("Emacs" . "Emacs") ("Programming" . "Programming") ("Libraries" . "Libraries") ("World Wide Web\\|Net Utilities" . "Net Utilities")))) nil [55362 55617])
            ("Info-dir-remove-duplicates" function nil nil [55619 57849])
            ("Info-read-subfile" function (:arguments ("nodepos")) nil [57965 59734])
            ("Info-unescape-quotes" function (:arguments ("value")) nil [59736 60037])
            ("Info-split-parameter-string" function (:arguments ("parameter-string")) nil [60173 60948])
            ("Info-display-images-node" function nil nil [60950 62611])
            ("Info-hide-cookies-node" function nil nil [62793 63305])
            ("Info-select-node" function nil nil [63307 64837])
            ("Info-mode-line-node-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote Info-mouse-scroll-up)) (define-key map [mode-line mouse-3] (quote Info-mouse-scroll-down)) map)) nil [64839 65105])
            ("Info-set-mode-line" function nil nil [65107 65778])
            ("Info-goto-node" function
               (:user-visible-flag t
                :arguments ("nodename" "fork" "strict-case"))
                nil [66024 67718])
            ("Info-read-node-completion-table" variable nil nil [67720 67760])
            ("Info-read-node-name-2" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [67762 69806])
            ("Info-read-node-name-1" function (:arguments ("string" "predicate" "code")) nil [69808 71147])
            ("Info-read-node-name" function (:arguments ("prompt")) nil [71223 71790])
            ("Info-build-node-completions" function (:arguments ("filename")) nil [71792 72233])
            ("Info-build-node-completions-1" function nil nil [72235 73471])
            ("Info-restore-point" function (:arguments ("hl")) nil [73475 73884])
            ("Info-search-history" variable nil nil [73887 73959])
            ("Info-search-case-fold" variable nil nil [73961 74068])
            ("Info--search-loop" function (:arguments ("regexp" "bound" "backward")) nil [74070 75004])
            ("Info-search" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "_noerror" "_count" "direction"))
                nil [75006 79277])
            ("Info-search-case-sensitively" function (:user-visible-flag t) nil [79279 79447])
            ("Info-search-next" function (:user-visible-flag t) nil [79449 79726])
            ("Info-search-backward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [79728 80228])
            ("Info-isearch-search" function nil nil [80230 81027])
            ("Info-isearch-wrap" function nil nil [81029 81395])
            ("Info-isearch-push-state" function nil nil [81397 81523])
            ("Info-isearch-pop-state" function (:arguments ("_cmd" "file" "node")) nil [81525 81711])
            ("Info-isearch-start" function nil nil [81713 82115])
            ("Info-isearch-end" function nil nil [82117 82735])
            ("Info-isearch-filter" function (:arguments ("beg-found" "found")) nil [82737 83622])
            ("Info-extract-pointer" function (:arguments ("name" "errorname")) nil [83626 84263])
            ("Info-following-node-name-re" function (:arguments ("allowedchars")) nil [84265 84971])
            ("Info-following-node-name" function nil nil [85062 85186])
            ("Info-next" function (:user-visible-flag t) nil [85188 85454])
            ("Info-prev" function (:user-visible-flag t) nil [85456 85744])
            ("Info-up" function
               (:user-visible-flag t
                :arguments ("same-file"))
                nil [85746 86782])
            ("Info-history-back" function (:user-visible-flag t) nil [86784 87454])
            ("defalias" code nil nil [87456 87496])
            ("Info-history-forward" function (:user-visible-flag t) nil [87498 88049])
            ("add-to-list" code nil nil [88052 88256])
            ("Info-directory-toc-nodes" function (:arguments ("filename")) nil [88258 88399])
            ("Info-directory-find-file" function (:arguments ("filename" "_noerror")) nil [88401 88533])
            ("Info-directory-find-node" function (:arguments ("_filename" "_nodename" "_no-going-back")) nil [88535 88695])
            ("Info-directory" function (:user-visible-flag t) nil [88712 88819])
            ("add-to-list" code nil nil [88822 89030])
            ("Info-history-toc-nodes" function (:arguments ("filename")) nil [89032 89169])
            ("Info-history-find-file" function (:arguments ("filename" "_noerror")) nil [89171 89299])
            ("Info-history-find-node" function (:arguments ("filename" "nodename" "_no-going-back")) nil [89301 89993])
            ("Info-history" function (:user-visible-flag t) nil [89995 90166])
            ("add-to-list" code nil nil [90169 90279])
            ("Info-toc-find-node" function (:arguments ("filename" "nodename" "_no-going-back")) nil [90281 91220])
            ("Info-toc" function (:user-visible-flag t) nil [91222 91655])
            ("Info-toc-insert" function (:arguments ("nodes" "node-list" "level" "curr-file")) nil [91657 92164])
            ("Info-toc-build" function (:arguments ("file")) nil [92166 95670])
            ("Info-toc-nodes" function (:arguments ("filename")) nil [95672 96556])
            ("Info-follow-reference" function
               (:user-visible-flag t
                :arguments ("footnotename" "fork"))
                nil [96560 100556])
            ("Info-menu-entry-name-re" variable
               (:constant-flag t
                :default-value "\\(?:[^:]\\|:[^:,.;() 	
]\\)*")
                nil [100558 100945])
            ("Info-extract-menu-node-name" function (:arguments ("multi-line" "index-node")) nil [100947 102262])
            ("Info-complete-menu-buffer" variable nil nil [102403 102437])
            ("Info-complete-next-re" variable nil nil [102438 102472])
            ("Info-complete-nodes" variable nil nil [102473 102505])
            ("Info-complete-cache" variable nil nil [102506 102538])
            ("Info-node-spec-re" variable
               (:constant-flag t
                :default-value (concat (Info-following-node-name-re "^.,:") "[,:.]"))
                nil [102540 102690])
            ("Info-complete-menu-item" function (:arguments ("string" "predicate" "action")) nil [102692 106119])
            ("Info-menu" function
               (:user-visible-flag t
                :arguments ("menu-item" "fork"))
                nil [106122 107996])
            ("Info-extract-menu-item" function (:arguments ("menu-item")) nil [107998 108536])
            ("Info-extract-menu-counting" function (:arguments ("count" "no-detail")) nil [108589 109190])
            ("Info-nth-menu-item" function (:user-visible-flag t) nil [109192 109454])
            ("Info-top-node" function (:user-visible-flag t) nil [109456 109558])
            ("Info-final-node" function (:user-visible-flag t) nil [109560 110308])
            ("Info-forward-node" function
               (:user-visible-flag t
                :arguments ("not-down" "not-up" "no-error"))
                nil [110310 111589])
            ("Info-backward-node" function (:user-visible-flag t) nil [111591 112568])
            ("Info-exit" function (:user-visible-flag t) nil [112570 112725])
            ("Info-next-menu-item" function (:user-visible-flag t) nil [112727 113140])
            ("Info-last-menu-item" function (:user-visible-flag t) nil [113142 113654])
            ("Info-no-error" function (:arguments ("body")) nil [113656 113746])
            ("Info-next-preorder" function (:user-visible-flag t) nil [113748 114437])
            ("Info-last-preorder" function (:user-visible-flag t) nil [114439 115896])
            ("Info-scroll-up" function (:user-visible-flag t) nil [115898 117256])
            ("Info-mouse-scroll-up" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [117258 117504])
            ("Info-scroll-down" function (:user-visible-flag t) nil [117506 118358])
            ("Info-mouse-scroll-down" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [118360 118613])
            ("Info-next-reference-or-link" function (:arguments ("pat" "prop")) nil [118615 119544])
            ("Info-prev-reference-or-link" function (:arguments ("pat" "prop")) nil [119546 120501])
            ("Info-next-reference" function
               (:user-visible-flag t
                :arguments ("recur" "count"))
                nil [120503 121463])
            ("Info-prev-reference" function
               (:user-visible-flag t
                :arguments ("recur" "count"))
                nil [121465 122399])
            ("Info-index-nodes" function (:arguments ("file")) nil [122402 125455])
            ("Info-index-node" function (:arguments ("node" "file")) nil [125457 126399])
            ("Info-goto-index" function nil nil [126401 126560])
            ("Info-index" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [126577 129379])
            ("Info-index-next" function
               (:user-visible-flag t
                :arguments ("num"))
                nil [129381 130611])
            ("Info-find-index-name" function (:arguments ("name")) nil [130613 131580])
            ("add-to-list" code nil nil [131583 131726])
            ("Info-virtual-index-nodes" variable nil nil [131728 132036])
            ("Info-virtual-index-find-node" function (:arguments ("filename" "nodename" "_no-going-back")) nil [132038 133733])
            ("Info-virtual-index" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [133735 135153])
            ("add-to-list" code nil nil [135156 135383])
            ("Info-apropos-file" variable (:default-value "*Apropos*") nil [135385 135495])
            ("Info-apropos-nodes" variable nil nil [135497 135818])
            ("Info-apropos-toc-nodes" function (:arguments ("filename")) nil [135820 136087])
            ("Info-apropos-find-file" function (:arguments ("filename" "_noerror")) nil [136089 136217])
            ("Info-apropos-find-node" function (:arguments ("_filename" "nodename" "_no-going-back")) nil [136219 137576])
            ("Info-apropos-matches" function (:arguments ("string")) nil [137578 140130])
            ("info-apropos" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [140147 140788])
            ("add-to-list" code nil nil [140791 140953])
            ("Info-finder-file" variable (:default-value "*Finder*") nil [140955 141053])
            ("Info-finder-find-file" function (:arguments ("filename" "_noerror")) nil [141055 141181])
            ("finder-known-keywords" variable nil nil [141183 141213])
            ("declare-function" code nil nil [141214 141272])
            ("declare-function" code nil nil [141273 141327])
            ("declare-function" code nil nil [141328 141388])
            ("finder-keywords-hash" variable nil nil [141389 141418])
            ("package--builtins" variable nil nil [141419 141445])
            ("Info-finder-find-node" function (:arguments ("_filename" "nodename" "_no-going-back")) nil [141474 145139])
            ("info-finder" function
               (:user-visible-flag t
                :arguments ("keywords"))
                nil [145156 145896])
            ("Info-undefined" function (:user-visible-flag t) nil [145900 145989])
            ("Info-help" function (:user-visible-flag t) nil [145991 146180])
            ("Info-summary" function (:user-visible-flag t) nil [146182 146810])
            ("Info-get-token" function (:arguments ("pos" "start" "all" "errorstring")) nil [146813 148307])
            ("Info-mouse-follow-nearest-node" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [148309 148771])
            ("Info-follow-nearest-node" function
               (:user-visible-flag t
                :arguments ("fork"))
                nil [148773 149863])
            ("Info-try-follow-nearest-node" function (:arguments ("fork")) nil [149887 151831])
            ("Info-mouse-follow-link" function
               (:user-visible-flag t
                :arguments ("click"))
                nil [151833 152494])
            ("Info-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map "." (quote beginning-of-buffer)) (define-key map " " (quote Info-scroll-up)) (define-key map [33554464] (quote Info-scroll-down)) (define-key map "" (quote Info-follow-nearest-node)) (define-key map "	" (quote Info-next-reference)) (define-key map "	" (quote Info-prev-reference)) (define-key map [backtab] (quote Info-prev-reference)) (define-key map "1" (quote Info-nth-menu-item)) (define-key map "2" (quote Info-nth-menu-item)) (define-key map "3" (quote Info-nth-menu-item)) (define-key map "4" (quote Info-nth-menu-item)) (define-key map "5" (quote Info-nth-menu-item)) (define-key map "6" (quote Info-nth-menu-item)) (define-key map "7" (quote Info-nth-menu-item)) (define-key map "8" (quote Info-nth-menu-item)) (define-key map "9" (quote Info-nth-menu-item)) (define-key map "0" (quote undefined)) (define-key map "?" (quote Info-summary)) (define-key map "]" (quote Info-forward-node)) (define-key map "[" (quote Info-backward-node)) (define-key map "<" (quote Info-top-node)) (define-key map ">" (quote Info-final-node)) (define-key map "b" (quote beginning-of-buffer)) (put (quote beginning-of-buffer) :advertised-binding "b") (define-key map "d" (quote Info-directory)) (define-key map "e" (quote end-of-buffer)) (define-key map "f" (quote Info-follow-reference)) (define-key map "g" (quote Info-goto-node)) (define-key map "h" (quote Info-help)) (define-key map "H" (quote describe-mode)) (define-key map "i" (quote Info-index)) (define-key map "I" (quote Info-virtual-index)) (define-key map "l" (quote Info-history-back)) (define-key map "L" (quote Info-history)) (define-key map "m" (quote Info-menu)) (define-key map "n" (quote Info-next)) (define-key map "p" (quote Info-prev)) (define-key map "q" (quote Info-exit)) (define-key map "r" (quote Info-history-forward)) (define-key map "s" (quote Info-search)) (define-key map "S" (quote Info-search-case-sensitively)) (define-key map "\356" (quote clone-buffer)) (define-key map "t" (quote Info-top-node)) (define-key map "T" (quote Info-toc)) (define-key map "u" (quote Info-up)) (define-key map "w" (quote Info-copy-current-node-name)) (define-key map "c" (quote Info-copy-current-node-name)) (define-key map "^" (quote Info-up)) (define-key map "," (quote Info-index-next)) (define-key map "" (quote Info-scroll-down)) (define-key map [mouse-2] (quote Info-mouse-follow-nearest-node)) (define-key map [down-mouse-2] (quote ignore)) (define-key map [follow-link] (quote mouse-face)) (define-key map [XF86Back] (quote Info-history-back)) (define-key map [XF86Forward] (quote Info-history-forward)) map)) nil [152498 155383])
            ("Info-check-pointer" function (:arguments ("item")) nil [155386 155537])
            ("easy-menu-define" code nil nil [155539 157862])
            ("info-tool-bar-map" variable (:default-value (let ((map (make-sparse-keymap))) (tool-bar-local-item-from-menu (quote Info-history-back) "left-arrow" map Info-mode-map :rtl "right-arrow" :label "Back" :vert-only t) (tool-bar-local-item-from-menu (quote Info-history-forward) "right-arrow" map Info-mode-map :rtl "left-arrow" :label "Forward" :vert-only t) (define-key-after map [separator-1] menu-bar-separator) (tool-bar-local-item-from-menu (quote Info-prev) "prev-node" map Info-mode-map :rtl "next-node") (tool-bar-local-item-from-menu (quote Info-next) "next-node" map Info-mode-map :rtl "prev-node") (tool-bar-local-item-from-menu (quote Info-up) "up-node" map Info-mode-map :vert-only t) (define-key-after map [separator-2] menu-bar-separator) (tool-bar-local-item-from-menu (quote Info-top-node) "home" map Info-mode-map :vert-only t) (tool-bar-local-item-from-menu (quote Info-goto-node) "jump-to" map Info-mode-map) (define-key-after map [separator-3] menu-bar-separator) (tool-bar-local-item-from-menu (quote Info-index) "index" map Info-mode-map :label "Index") (tool-bar-local-item-from-menu (quote Info-search) "search" map Info-mode-map :vert-only t) (tool-bar-local-item-from-menu (quote Info-exit) "exit" map Info-mode-map :vert-only t) map)) nil [157865 159183])
            ("Info-menu-last-node" variable nil nil [159185 159217])
            ("Info-menu-update" function nil nil [159301 161380])
            ("Info-copy-current-node-name" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [161384 162183])
            ("put" code nil nil [162247 162284])
            ("put" code nil nil [162285 162322])
            ("tool-bar-map" variable nil nil [162324 162345])
            ("bookmark-make-record-function" variable nil nil [162346 162384])
            ("Info-mode-syntax-table" variable (:default-value (let ((st (copy-syntax-table text-mode-syntax-table))) (modify-syntax-entry 39 "." st) st)) nil [162386 162672])
            ("define-derived-mode" code nil nil [162729 168303])
            ("Info-kill-buffer" function nil nil [168394 168529])
            ("Info-clone-buffer" function nil nil [168565 168996])
            ("define-obsolete-variable-alias" code nil nil [168998 169072])
            ("Info-edit-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map text-mode-map) (define-key map "" (quote Info-cease-edit)) map)) nil [169073 169359])
            ("make-obsolete-variable" code nil nil [169361 169462])
            ("put" code nil nil [169529 169571])
            ("define-derived-mode" code nil nil [169573 169898])
            ("make-obsolete" code nil nil [169900 169995])
            ("Info-edit" function (:user-visible-flag t) nil [169997 170210])
            ("put" code nil nil [170212 170327])
            ("make-obsolete" code nil nil [170329 170419])
            ("Info-cease-edit" function (:user-visible-flag t) nil [170421 170861])
            ("make-obsolete" code nil nil [170863 170959])
            ("Info-file-list-for-emacs" variable (:default-value (quote ("ediff" "eudc" "forms" "gnus" "info" ("Info" . "info") ("mh" . "mh-e") "sc" "message" ("dired" . "dired-x") "viper" "vip" "idlwave" ("c" . "ccmode") ("c++" . "ccmode") ("objc" . "ccmode") ("java" . "ccmode") ("idl" . "ccmode") ("pike" . "ccmode") ("skeleton" . "autotype") ("auto-insert" . "autotype") ("copyright" . "autotype") ("executable" . "autotype") ("time-stamp" . "autotype") ("quickurl" . "autotype") ("tempo" . "autotype") ("hippie-expand" . "autotype") ("cvs" . "pcl-cvs") ("ada" . "ada-mode") "calc" ("calcAlg" . "calc") ("calcDigit" . "calc") ("calcVar" . "calc") "ebrowse" "eshell" "cl" "reftex" "speedbar" "widget" "woman" ("mail-header" . "emacs-mime") ("mail-content" . "emacs-mime") ("mail-encode" . "emacs-mime") ("mail-decode" . "emacs-mime") ("rfc2045" . "emacs-mime") ("rfc2231" . "emacs-mime") ("rfc2047" . "emacs-mime") ("rfc2045" . "emacs-mime") ("rfc1843" . "emacs-mime") ("ietf-drums" . "emacs-mime") ("quoted-printable" . "emacs-mime") ("binhex" . "emacs-mime") ("uudecode" . "emacs-mime") ("mailcap" . "emacs-mime") ("mm" . "emacs-mime") ("mml" . "emacs-mime") "tramp" "dbus"))) nil [170962 172450])
            ("Info-find-emacs-command-nodes" function (:arguments ("command")) nil [172452 174695])
            ("Info-goto-emacs-command-node" function
               (:user-visible-flag t
                :arguments ("command"))
                nil [174793 176542])
            ("Info-goto-emacs-key-command-node" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [176644 177433])
            ("Info-link-keymap" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap [header-line down-mouse-1] (quote mouse-drag-header-line)) (define-key keymap [header-line mouse-1] (quote mouse-select-window)) (define-key keymap [header-line mouse-2] (quote Info-mouse-follow-link)) (define-key keymap [mouse-2] (quote Info-mouse-follow-link)) (define-key keymap [follow-link] (quote mouse-face)) keymap)) nil [177436 177983])
            ("Info-breadcrumbs" function nil nil [177985 179704])
            ("Info-fontify-node" function nil nil [179706 198434])
            ("speedbar" include nil nil [198564 198583])
            ("declare-function" code nil nil [198615 198683])
            ("declare-function" code nil nil [198684 198747])
            ("declare-function" code nil nil [198748 198819])
            ("declare-function" code nil nil [198820 198902])
            ("declare-function" code nil nil [198903 198966])
            ("declare-function" code nil nil [198967 199032])
            ("declare-function" code nil nil [199033 199280])
            ("Info-speedbar-key-map" variable nil nil [199282 199363])
            ("Info-install-speedbar-variables" function nil nil [199365 200002])
            ("Info-speedbar-menu-items" variable (:default-value (quote (["Browse Node" speedbar-edit-line t] ["Expand Node" speedbar-expand-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.\\+. "))] ["Contract Node" speedbar-contract-line (save-excursion (beginning-of-line) (looking-at "[0-9]+: *.-. "))]))) nil [200004 200380])
            ("if" code nil nil [200437 200566])
            ("Info-speedbar-browser" function (:user-visible-flag t) nil [200617 200954])
            ("declare-function" code nil nil [200993 201067])
            ("declare-function" code nil nil [201068 201147])
            ("Info-speedbar-hierarchy-buttons" function (:arguments ("_directory" "depth" "node")) nil [201149 202362])
            ("Info-speedbar-goto-node" function (:arguments ("_text" "node" "_indent")) nil [202364 203393])
            ("Info-speedbar-expand-node" function (:arguments ("text" "token" "indent")) nil [203395 204199])
            ("Info-speedbar-fetch-file-nodes" function (:arguments ("nodespec")) nil [204201 205478])
            ("Info-speedbar-buttons" function (:arguments ("_buffer")) nil [205570 205916])
            ("add-to-list" code nil nil [205947 205997])
            ("Info-desktop-buffer-misc-data" function (:arguments ("_desktop-dirname")) nil [206022 206392])
            ("Info-restore-desktop-buffer" function (:arguments ("_desktop-buffer-file-name" "desktop-buffer-name" "desktop-buffer-misc")) nil [206394 207088])
            ("add-to-list" code nil nil [207090 207182])
            ("declare-function" code nil nil [207206 207318])
            ("declare-function" code nil nil [207319 207382])
            ("declare-function" code nil nil [207383 207443])
            ("declare-function" code nil nil [207444 207508])
            ("Info-bookmark-make-record" function nil nil [207510 208150])
            ("Info-bookmark-jump" function (:arguments ("bmk")) nil [208167 208796])
            ("info-display-manual" function
               (:user-visible-flag t
                :arguments ("manual"))
                nil [208815 209641])
            ("info--manual-names" function nil nil [209643 210170])
            ("info" package nil nil [210172 210187]))          
      :file "info.el.gz"
      :pointmax 210211
      :fsize 52999
      :lastmodtime '(22978 50428 0 0)
      :unmatched-syntax '((close-paren 198583 . 198584) (symbol 198546 . 198563) (open-paren 198545 . 198546)))
    (semanticdb-table "startup.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1131 1167])
            ("command-line-processed" variable nil nil [1169 1254])
            ("initialization" customgroup (:user-visible-flag t) nil [1256 1337])
            ("initial-buffer-choice" variable nil nil [1339 2235])
            ("inhibit-startup-screen" variable nil nil [2237 2490])
            ("defvaralias" code nil nil [2492 2552])
            ("defvaralias" code nil nil [2553 2615])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2617 2667])
            ("inhibit-startup-echo-area-message" variable nil nil [2789 3474])
            ("inhibit-default-init" variable nil nil [3476 3606])
            ("inhibit-startup-buffer-menu" variable nil nil [3608 3772])
            ("command-switch-alist" variable nil nil [3774 4042])
            ("command-line-args-left" variable nil nil [4044 4128])
            ("defvaralias" code nil nil [4130 4366])
            ("internal-make-var-non-special" code nil nil [4367 4404])
            ("argi" variable nil nil [4406 4458])
            ("internal-make-var-non-special" code nil nil [4459 4496])
            ("command-line-functions" variable nil nil [4498 4952])
            ("command-line-default-directory" variable nil nil [4954 5122])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [5230 8414])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [8416 11368])
            ("before-init-hook" variable nil nil [11371 11481])
            ("after-init-hook" variable nil nil [11483 11899])
            ("emacs-startup-hook" variable nil nil [11901 12008])
            ("term-setup-hook" variable nil nil [12010 12325])
            ("make-obsolete-variable" code nil nil [12327 12443])
            ("inhibit-startup-hooks" variable nil nil [12445 12586])
            ("keyboard-type" variable nil nil [12588 12809])
            ("window-setup-hook" variable nil nil [12811 13258])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [13260 13429])
            ("init-file-user" variable nil nil [13431 14078])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [14080 15350])
            ("mail-host-address" variable nil nil [15352 15581])
            ("user-mail-address" variable (:default-value (if command-line-processed (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name)))) "")) nil [15583 16072])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [16074 16827])
            ("emacs-basic-display" variable nil nil [16829 16861])
            ("init-file-debug" variable nil nil [16863 16891])
            ("init-file-had-error" variable nil nil [16893 16989])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [16991 17043])
            ("no-blinking-cursor" variable nil nil [17045 17076])
            ("pure-space-overflow" variable nil nil [17078 17163])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [17165 17341])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [17343 17578])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [17580 17957])
            ("package--description-file" function (:arguments ("dir")) nil [17959 18290])
            ("debian-emacs-flavor" variable
               (:constant-flag t
                :default-value (quote emacs24))
                nil [18292 18445])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [18447 20187])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [20189 20958])
            ("normal-top-level" function nil nil [20960 30332])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [30440 30666])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [30668 30758])
            ("tool-bar-originally-present" variable nil nil [30760 30879])
            ("handle-args-function-alist" variable (:default-value (quote ((nil . tty-handle-args)))) nil [30881 31243])
            ("window-system-initialization-alist" variable (:default-value (quote ((nil . ignore)))) nil [31245 31611])
            ("tty-handle-args" function (:arguments ("args")) nil [31613 34360])
            ("declare-function" code nil nil [34362 34456])
            ("declare-function" code nil nil [34457 34516])
            ("declare-function" code nil nil [34517 34561])
            ("server-name" variable nil nil [34563 34583])
            ("server-process" variable nil nil [34584 34607])
            ("command-line" function nil nil [34609 56372])
            ("x-apply-session-resources" function nil nil [56374 57401])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with C-x C-f,
;; then enter the text in that file's own buffer.

")) nil [57403 57845])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [58020 60737])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (view-file (expand-file-name "CONTRIBUTE" data-directory)) (goto-char (point-min))))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [60739 63959])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [63962 64081])
            ("fancy-splash-image" variable nil nil [64083 64280])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [64283 64655])
            ("fancy-splash-insert" function (:arguments ("args")) nil [64726 66122])
            ("declare-function" code nil nil [66124 66193])
            ("fancy-splash-image-file" function nil nil [66195 66674])
            ("fancy-splash-head" function nil nil [66676 67692])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [67694 70833])
            ("exit-splash-screen" function (:user-visible-flag t) nil [70835 70944])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [70946 72377])
            ("fancy-about-screen" function nil nil [72379 73137])
            ("fancy-splash-frame" function nil nil [73139 73735])
            ("use-fancy-splash-screens-p" function nil nil [73737 74427])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [74430 76939])
            ("normal-mouse-startup-screen" function nil nil [76941 78718])
            ("normal-no-mouse-startup-screen" function nil nil [78720 82823])
            ("normal-about-screen" function nil nil [82825 84350])
            ("startup-echo-area-message" function nil nil [84352 84549])
            ("display-startup-echo-area-message" function nil nil [84551 85815])
            ("display-startup-screen" function (:arguments ("concise")) nil [85817 86269])
            ("display-about-screen" function (:user-visible-flag t) nil [86271 86517])
            ("defalias" code nil nil [86519 86564])
            ("defalias" code nil nil [86565 86622])
            ("command-line-1" function (:arguments ("args-left")) nil [86624 97964])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [97966 98698]))          
      :file "startup.el.gz"
      :pointmax 98725
      :fsize 27498
      :lastmodtime '(22978 50428 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "register.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1199 1216])
            ("cl-defstruct" code nil nil [1230 1562])
            ("cl-defun" code nil nil [1564 2185])
            ("register-alist" variable nil nil [2187 2900])
            ("register" customgroup (:user-visible-flag t) nil [2902 2988])
            ("register-separator" variable nil nil [2990 3386])
            ("register-preview-delay" variable (:default-value 1) nil [3388 3714])
            ("get-register" function (:arguments ("register")) nil [3716 3856])
            ("set-register" function (:arguments ("register" "value")) nil [3858 4190])
            ("register-describe-oneline" function (:arguments ("c")) nil [4192 4511])
            ("register-preview-default" function (:arguments ("r")) nil [4513 4713])
            ("register-preview-function" variable (:default-value (function register-preview-default)) nil [4715 4919])
            ("register-preview" function (:arguments ("buffer" "show-empty")) nil [4921 5529])
            ("register-read-with-preview" function (:arguments ("prompt")) nil [5531 6791])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [6793 7480])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [7482 8126])
            ("set-advertised-calling-convention" code nil nil [8188 8283])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [8285 8917])
            ("set-advertised-calling-convention" code nil nil [8979 9073])
            ("make-obsolete" code nil nil [9075 9153])
            ("defalias" code nil nil [9155 9202])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [9203 11103])
            ("register-swap-out" function nil nil [11105 11458])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [11460 12161])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [12163 13016])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [13018 13497])
            ("list-registers" function (:user-visible-flag t) nil [13499 13876])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [13878 16079])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [16081 17265])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag" "region"))
                nil [17267 18238])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [18240 19241])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [19243 20248])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [20250 21186])
            ("register" package nil nil [21188 21207]))          
      :file "register.el.gz"
      :pointmax 21234
      :fsize 5864
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1216 . 1217) (symbol 1181 . 1198) (open-paren 1180 . 1181)))
    (semanticdb-table "newcomment.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [2941 2987])
            ("defalias" code nil nil [3003 3053])
            ("defalias" code nil nil [3069 3107])
            ("defalias" code nil nil [3123 3183])
            ("comment" customgroup (:user-visible-flag t) nil [3185 3300])
            ("comment-use-syntax" variable (:default-value (quote undecided)) nil [3387 3715])
            ("comment-fill-column" variable nil nil [3717 3884])
            ("comment-column" variable (:default-value 32) nil [3901 4298])
            ("make-variable-buffer-local" code nil nil [4299 4343])
            ("put" code nil nil [4359 4411])
            ("comment-start" variable nil nil [4428 4528])
            ("put" code nil nil [4544 4603])
            ("comment-start-skip" variable nil nil [4620 4889])
            ("put" code nil nil [4905 4960])
            ("comment-end-skip" variable nil nil [4977 5081])
            ("put" code nil nil [5097 5150])
            ("comment-end" variable (:default-value (purecopy "")) nil [5167 5313])
            ("put" code nil nil [5329 5377])
            ("comment-indent-function" variable (:default-value (quote comment-indent-default)) nil [5394 5750])
            ("comment-insert-comment-function" variable nil nil [5767 6017])
            ("comment-region-function" variable (:default-value (quote comment-region-default)) nil [6019 6370])
            ("uncomment-region-function" variable (:default-value (quote uncomment-region-default)) nil [6372 6731])
            ("block-comment-start" variable nil nil [6749 6781])
            ("block-comment-end" variable nil nil [6782 6812])
            ("comment-quote-nested" variable (:default-value t) nil [6814 6951])
            ("comment-continue" variable nil nil [6953 7428])
            ("comment-add" variable nil nil [7430 7788])
            ("comment-styles" variable
               (:constant-flag t
                :default-value (quote ((plain nil nil nil nil "Start in column 0 (do not indent), as in Emacs-20") (indent-or-triple nil nil nil multi-char "Start in column 0, but only for single-char starters") (indent nil nil nil t "Full comment per line, ends not aligned") (aligned nil t nil t "Full comment per line, ends aligned") (box nil t t t "Full comment per line, ends aligned, + top and bottom") (extra-line t nil t t "One comment for all lines, end on a line by itself") (multi-line t nil nil t "One comment for all lines, end on last commented line") (box-multi t t t t "One comment for all lines, + top and bottom"))))
                nil [7805 10008])
            ("comment-style" variable (:default-value (quote indent)) nil [10025 10451])
            ("comment-padding" variable (:default-value (purecopy " ")) nil [10468 10892])
            ("comment-inline-offset" variable (:default-value 1) nil [10894 11337])
            ("comment-multi-line" variable nil nil [11354 11771])
            ("comment-empty-lines" variable nil nil [11773 12157])
            ("comment-string-strip" function (:arguments ("str" "beforep" "afterp")) nil [12183 12436])
            ("comment-string-reverse" function (:arguments ("s")) nil [12438 12611])
            ("comment-normalize-vars" function (:arguments ("noerror")) nil [12628 15859])
            ("comment-quote-re" function (:arguments ("str" "unp")) nil [15861 16004])
            ("comment-quote-nested" function (:arguments ("cs" "ce" "unp")) nil [16006 17100])
            ("comment-use-global-state" variable (:default-value t) nil [17129 17583])
            ("make-obsolete-variable" code nil nil [17585 17662])
            ("comment-search-forward" function (:arguments ("limit" "noerror")) nil [17664 19252])
            ("comment-search-backward" function (:arguments ("limit" "noerror")) nil [19254 20466])
            ("comment-beginning" function nil nil [20468 22354])
            ("comment-forward" function (:arguments ("n")) nil [22356 22859])
            ("comment-enter-backward" function nil nil [22861 24425])
            ("comment-indent-default" function nil nil [24467 24814])
            ("comment-choose-indent" function (:arguments ("indent")) nil [24816 27400])
            ("comment-indent" function
               (:user-visible-flag t
                :arguments ("continue"))
                nil [27417 30383])
            ("comment-set-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [30400 31231])
            ("comment-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31248 31815])
            ("comment-padright" function (:arguments ("str" "n")) nil [31817 33562])
            ("comment-padleft" function (:arguments ("str" "n")) nil [33589 35276])
            ("uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [35293 35905])
            ("uncomment-region-default" function (:arguments ("beg" "end" "arg")) nil [35907 39805])
            ("comment-make-extra-lines" function (:arguments ("cs" "ce" "ccs" "cce" "min-indent" "max-indent" "block")) nil [39807 41323])
            ("comment-with-narrowing" function (:arguments ("beg" "end" "body")) nil [41325 42381])
            ("comment-add" function (:arguments ("arg")) nil [42383 42782])
            ("comment-region-internal" function (:arguments ("beg" "end" "cs" "ce" "ccs" "cce" "block" "lines" "indent")) nil [42784 46175])
            ("comment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [46192 47192])
            ("comment-region-default" function (:arguments ("beg" "end" "arg")) nil [47194 49693])
            ("comment-box" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [49710 50172])
            ("comment-only-p" function (:arguments ("beg" "end")) nil [50174 50368])
            ("comment-or-uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [50385 50777])
            ("comment-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [50794 52419])
            ("comment-auto-fill-only-comments" variable nil nil [52436 52636])
            ("comment-valid-prefix-p" function (:arguments ("prefix" "compos")) nil [52638 54730])
            ("comment-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [54748 58634])
            ("newcomment" package nil nil [58636 58657]))          
      :file "newcomment.el.gz"
      :pointmax 58687
      :fsize 16623
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "macros.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("name-last-kbd-macro" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [1198 1895])
            ("insert-kbd-macro" function
               (:user-visible-flag t
                :arguments ("macroname" "keys"))
                nil [1912 5332])
            ("kbd-macro-query" function
               (:user-visible-flag t
                :arguments ("flag"))
                nil [5349 7615])
            ("apply-macro-to-region-lines" function
               (:user-visible-flag t
                :arguments ("top" "bottom" "macro"))
                nil [7632 9732])
            ("macros" package nil nil [9794 9811]))          
      :file "macros.el.gz"
      :pointmax 9837
      :fsize 3401
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "button.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("button" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [2216 2310])
            ("button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(control 109)] (quote push-button)) (define-key map [mouse-2] (quote push-button)) (define-key map [mode-line mouse-2] (quote push-button)) (define-key map [header-line mouse-2] (quote push-button)) map)) nil [2312 2923])
            ("button-buffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [9] (quote forward-button)) (define-key map "	" (quote backward-button)) (define-key map [backtab] (quote backward-button)) map)) nil [2925 3249])
            ("put" code nil nil [3285 3320])
            ("put" code nil nil [3321 3365])
            ("put" code nil nil [3366 3406])
            ("put" code nil nil [3407 3442])
            ("put" code nil nil [3508 3545])
            ("put" code nil nil [3546 3622])
            ("put" code nil nil [3692 3726])
            ("put" code nil nil [3822 3861])
            ("put" code nil nil [3923 3976])
            ("button-category-symbol" function (:arguments ("type")) nil [4537 4807])
            ("define-button-type" function (:arguments ("name" "properties")) nil [4809 6447])
            ("button-type-put" function (:arguments ("type" "prop" "val")) nil [6449 6588])
            ("button-type-get" function (:arguments ("type" "prop")) nil [6590 6721])
            ("button-type-subtype-p" function (:arguments ("type" "supertype")) nil [6723 6951])
            ("button-start" function (:arguments ("button")) nil [6998 7244])
            ("button-end" function (:arguments ("button")) nil [7246 7477])
            ("button-get" function (:arguments ("button" "prop")) nil [7479 7808])
            ("button-put" function (:arguments ("button" "prop" "val")) nil [7810 8779])
            ("button-activate" function (:arguments ("button" "use-mouse-action")) nil [8781 9611])
            ("button-label" function (:arguments ("button")) nil [9613 9867])
            ("button-type" function (:arguments ("button")) nil [9869 9961])
            ("button-has-type-p" function (:arguments ("button" "type")) nil [9963 10131])
            ("button--area-button-p" function (:arguments ("b")) nil [10133 10312])
            ("defalias" code nil nil [10314 10405])
            ("make-button" function (:arguments ("beg" "end" "properties")) nil [10437 11365])
            ("insert-button" function (:arguments ("label" "properties")) nil [11367 11834])
            ("make-text-button" function (:arguments ("beg" "end" "properties")) nil [11873 14084])
            ("insert-text-button" function (:arguments ("label" "properties")) nil [14086 14771])
            ("button-at" function (:arguments ("pos")) nil [14807 15197])
            ("next-button" function (:arguments ("pos" "count-current")) nil [15199 15765])
            ("previous-button" function (:arguments ("pos" "count-current")) nil [15767 16774])
            ("push-button" function
               (:user-visible-flag t
                :arguments ("pos" "use-mouse-action"))
                nil [16796 18128])
            ("forward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [18130 19649])
            ("backward-button" function
               (:user-visible-flag t
                :arguments ("n" "wrap" "display-message"))
                nil [19651 20155])
            ("button" package nil nil [20158 20175]))          
      :file "button.el.gz"
      :pointmax 20201
      :fsize 6041
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "image-file.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("image" include nil nil [1256 1272])
            ("image-file-name-extensions" variable (:default-value (purecopy (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm" "pnm" "svg")))) nil [1290 2068])
            ("image-file-name-regexps" variable nil nil [2085 2796])
            ("image-file-name-regexp" function nil nil [2814 3317])
            ("insert-image-file" function (:arguments ("file" "visit" "beg" "end" "replace")) nil [3335 4866])
            ("image-file-yank-handler" function (:arguments ("string")) nil [5033 5581])
            ("put" code nil nil [5583 5622])
            ("image-file-handler" function (:arguments ("operation" "args")) nil [5623 6060])
            ("image-file-call-underlying" function (:arguments ("function" "operation" "args")) nil [6062 6486])
            ("define-minor-mode" code nil nil [6504 7317])
            ("image-file" package nil nil [7320 7341]))          
      :file "image-file.el.gz"
      :pointmax 7371
      :fsize 2711
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "frame.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [948 965])
            ("frame-creation-function-alist" variable (:default-value (list (cons nil (if (fboundp (quote tty-create-frame-with-faces)) (quote tty-create-frame-with-faces) (lambda (_parameters) (error "Can't create multiple frames without a window system")))))) nil [968 1450])
            ("window-system-default-frame-alist" variable nil nil [1452 1895])
            ("display-format-alist" variable nil nil [1897 2149])
            ("initial-frame-alist" variable nil nil [2341 3571])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [3573 4275])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4277 4746])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [4748 5044])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5046 5306])
            ("frame-initial-frame" variable nil nil [6084 6116])
            ("frame-initial-frame-alist" variable nil nil [6195 6229])
            ("frame-initial-geometry-arguments" variable nil nil [6231 6276])
            ("frame-initialize" function nil nil [6465 8178])
            ("frame-notice-user-settings" variable (:default-value t) nil [8180 8289])
            ("declare-function" code nil nil [8291 8350])
            ("defalias" code nil nil [8352 8402])
            ("frame-notice-user-settings" function nil nil [8599 19900])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [19902 20103])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20170 21345])
            ("get-other-frame" function nil nil [21347 21605])
            ("next-multiframe-window" function (:user-visible-flag t) nil [21607 21865])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [21867 22131])
            ("window-system-for-display" function (:arguments ("display")) nil [22133 22608])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [22610 22879])
            ("declare-function" code nil nil [22881 22938])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [22940 24292])
            ("make-frame-command" function (:user-visible-flag t) nil [24294 24557])
            ("before-make-frame-hook" variable nil nil [24559 24642])
            ("after-make-frame-functions" variable nil nil [24644 24791])
            ("after-setting-font-hook" variable nil nil [24793 24889])
            ("define-obsolete-function-alias" code nil nil [24919 24981])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [24983 25101])
            ("x-display-name" variable nil nil [25103 25126])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25128 28771])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [28773 29072])
            ("minibuffer-frame-list" function nil nil [29074 29267])
            ("get-device-terminal" function (:arguments ("device")) nil [29319 30072])
            ("frames-on-display-list" function (:arguments ("device")) nil [30074 30516])
            ("framep-on-display" function (:arguments ("terminal")) nil [30518 30957])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [30959 31820])
            ("declare-function" code nil nil [31822 31872])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [31874 32984])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32986 33965])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [33967 34197])
            ("suspend-frame" function (:user-visible-flag t) nil [34199 34676])
            ("make-frame-names-alist" function nil nil [34678 35084])
            ("frame-name-history" variable nil nil [35086 35117])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [35118 35809])
            ("frame-background-mode" variable nil nil [35836 36509])
            ("declare-function" code nil nil [36511 36605])
            ("declare-function" code nil nil [36650 36720])
            ("inhibit-frame-set-background-mode" variable nil nil [36722 36768])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [36770 39668])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [39670 40186])
            ("current-frame-configuration" function nil nil [40217 40813])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [40815 42820])
            ("frame-height" function (:arguments ("frame")) nil [42915 43581])
            ("frame-width" function (:arguments ("frame")) nil [43583 43788])
            ("declare-function" code nil nil [43790 43895])
            ("define-obsolete-function-alias" code nil nil [43897 43970])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [43972 47288])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [47290 47541])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47543 48288])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [48290 49035])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49037 49523])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49525 49991])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49993 50375])
            ("define-minor-mode" code nil nil [50377 51257])
            ("define-minor-mode" code nil nil [51259 52100])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [52102 52478])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [52480 53007])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [53009 53699])
            ("declare-function" code nil nil [53737 53780])
            ("display-mouse-p" function (:arguments ("display")) nil [53782 54573])
            ("display-popup-menus-p" function (:arguments ("display")) nil [54575 54861])
            ("display-graphic-p" function (:arguments ("display")) nil [54863 55320])
            ("display-images-p" function (:arguments ("display")) nil [55322 55600])
            ("defalias" code nil nil [55602 55654])
            ("defalias" code nil nil [55655 55706])
            ("display-selections-p" function (:arguments ("display")) nil [55708 56339])
            ("declare-function" code nil nil [56341 56407])
            ("display-screens" function (:arguments ("display")) nil [56409 56798])
            ("declare-function" code nil nil [56800 56871])
            ("display-pixel-height" function (:arguments ("display")) nil [56873 57606])
            ("declare-function" code nil nil [57608 57678])
            ("display-pixel-width" function (:arguments ("display")) nil [57680 58408])
            ("display-mm-dimensions-alist" variable nil nil [58410 59028])
            ("declare-function" code nil nil [59030 59098])
            ("display-mm-height" function (:arguments ("display")) nil [59100 59979])
            ("declare-function" code nil nil [59981 60048])
            ("display-mm-width" function (:arguments ("display")) nil [60050 60925])
            ("declare-function" code nil nil [60927 60999])
            ("display-backing-store" function (:arguments ("display")) nil [61104 61622])
            ("declare-function" code nil nil [61624 61693])
            ("display-save-under" function (:arguments ("display")) nil [61695 62092])
            ("declare-function" code nil nil [62094 62159])
            ("display-planes" function (:arguments ("display")) nil [62161 62602])
            ("declare-function" code nil nil [62604 62674])
            ("display-color-cells" function (:arguments ("display")) nil [62676 63121])
            ("declare-function" code nil nil [63123 63194])
            ("display-visual-class" function (:arguments ("display")) nil [63196 63786])
            ("declare-function" code nil nil [63788 63874])
            ("declare-function" code nil nil [63875 63964])
            ("declare-function" code nil nil [63965 64053])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [64055 66580])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [66612 68482])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [68484 69743])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [69747 70799])
            ("define-obsolete-variable-alias" code nil nil [70844 70930])
            ("cursor" customgroup (:user-visible-flag t) nil [70954 71039])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [71041 71169])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [71171 71289])
            ("blink-cursor-blinks" variable (:default-value 10) nil [71291 71501])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [71503 71616])
            ("blink-cursor-idle-timer" variable nil nil [71618 71793])
            ("blink-cursor-timer" variable nil nil [71795 71957])
            ("blink-cursor-start" function nil nil [71959 72658])
            ("blink-cursor-timer-function" function nil nil [72660 73316])
            ("blink-cursor-end" function nil nil [73319 73714])
            ("blink-cursor-suspend" function nil nil [73716 74071])
            ("blink-cursor-check" function nil nil [74073 74558])
            ("define-obsolete-variable-alias" code nil nil [74560 74632])
            ("define-minor-mode" code nil nil [74634 75901])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [75939 76893])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [76895 77859])
            ("define-key" code nil nil [77882 77930])
            ("define-key" code nil nil [77931 77980])
            ("define-key" code nil nil [77981 78023])
            ("define-key" code nil nil [78024 78065])
            ("define-key" code nil nil [78066 78120])
            ("define-key" code nil nil [78121 78181])
            ("define-key" code nil nil [78182 78242])
            ("define-obsolete-variable-alias" code nil nil [78292 78374])
            ("make-variable-buffer-local" code nil nil [78376 78430])
            ("make-obsolete-variable" code nil nil [78457 78551])
            ("frame" package nil nil [78553 78569]))          
      :file "frame.el.gz"
      :pointmax 78594
      :fsize 20427
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 965 . 966) (symbol 930 . 947) (open-paren 929 . 930)))
    (semanticdb-table "rect.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("operate-on-rectangle" function (:arguments ("function" "start" "end" "coerce-tabs")) nil [1206 2980])
            ("apply-on-rectangle" function (:arguments ("function" "start" "end" "args")) nil [2982 3992])
            ("delete-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [3994 4200])
            ("delete-extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines" "fill")) nil [4202 4598])
            ("extract-rectangle-line" function (:arguments ("startcol" "endcol" "lines")) nil [4767 5731])
            ("spaces-strings" variable
               (:constant-flag t
                :default-value (quote ["" " " "  " "   " "    " "     " "      " "       " "        "]))
                nil [5733 5826])
            ("spaces-string" function (:arguments ("n")) nil [5828 5952])
            ("delete-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [5969 6460])
            ("delete-extract-rectangle" function (:arguments ("start" "end" "fill")) nil [6477 6961])
            ("extract-rectangle" function (:arguments ("start" "end")) nil [6978 7276])
            ("killed-rectangle" variable nil nil [7278 7353])
            ("kill-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [7370 8417])
            ("copy-rectangle-as-kill" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [8434 8753])
            ("yank-rectangle" function (:user-visible-flag t) nil [8770 8921])
            ("insert-rectangle" function (:arguments ("rectangle")) nil [8938 9595])
            ("open-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [9612 10127])
            ("open-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [10129 10332])
            ("delete-whitespace-rectangle-line" function (:arguments ("startcol" "_endcol" "fill")) nil [10334 10578])
            ("defalias" code nil nil [10595 10651])
            ("delete-whitespace-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [10680 11245])
            ("string-rectangle-history" variable nil nil [11247 11284])
            ("string-rectangle-line" function (:arguments ("startcol" "endcol" "string" "delete")) nil [11285 11458])
            ("string-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [11475 12061])
            ("defalias" code nil nil [12078 12125])
            ("string-insert-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "string"))
                nil [12142 12814])
            ("clear-rectangle" function
               (:user-visible-flag t
                :arguments ("start" "end" "fill"))
                nil [12831 13237])
            ("clear-rectangle-line" function (:arguments ("startcol" "endcol" "fill")) nil [13239 13652])
            ("rectangle-number-line-counter" variable nil nil [13708 13746])
            ("rectangle-number-line-callback" function (:arguments ("start" "_end" "format-string")) nil [13748 13979])
            ("rectange--default-line-number-format" function (:arguments ("start" "end" "start-at")) nil [13981 14159])
            ("rectangle-number-lines" function
               (:user-visible-flag t
                :arguments ("start" "end" "start-at" "format"))
                nil [14176 15132])
            ("add-function" code nil nil [15335 15444])
            ("add-function" code nil nil [15445 15558])
            ("add-function" code nil nil [15559 15647])
            ("rectangle-mark-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [15] (quote open-rectangle)) (define-key map [20] (quote string-rectangle)) map)) nil [15649 15994])
            ("define-minor-mode" code nil nil [16011 16411])
            ("rectangle--extract-region" function (:arguments ("orig" "delete")) nil [16413 17160])
            ("rectangle--insert-for-yank" function (:arguments ("strs")) nil [17162 17559])
            ("rectangle--highlight-for-redisplay" function (:arguments ("orig" "start" "end" "window" "rol")) nil [17561 21865])
            ("rectangle--unhighlight-for-redisplay" function (:arguments ("orig" "rol")) nil [21867 22061])
            ("rect" package nil nil [22063 22078]))          
      :file "rect.el.gz"
      :pointmax 22102
      :fsize 5758
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "faces.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [874 1326])
            ("declare-function" code nil nil [1328 1400])
            ("help-xref-stack-item" variable nil nil [1402 1431])
            ("face-name-history" variable nil nil [1433 1614])
            ("font-selection" customgroup (:user-visible-flag t) nil [1785 1867])
            ("face-font-selection-order" variable (:default-value (quote (:width :height :weight :slant))) nil [1870 2652])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (quote (("Monospace" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))) nil [2826 3508])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (if (featurep (quote w32)) (quote (("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))) (quote (("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))) nil [3554 4618])
            ("face-list" function nil nil [4793 4894])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face" "no-init-from-resources"))
                nil [4896 5820])
            ("set-advertised-calling-convention" code nil nil [6010 6071])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [6073 6335])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [6337 7588])
            ("facep" function (:arguments ("face")) nil [7768 7917])
            ("check-face" function (:arguments ("face")) nil [7920 8074])
            ("face-id" function (:arguments ("face" "_frame")) nil [8255 8597])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [8599 9016])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [9019 9732])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [9735 10079])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) (quote ((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))) nil [10277 12169])
            ("declare-function" code nil nil [12172 12267])
            ("declare-function" code nil nil [12269 12383])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [12385 13094])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [13097 13460])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [13463 14059])
            ("face-name" function (:arguments ("face")) nil [14243 14335])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [14338 14804])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [14806 16620])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [16622 17211])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [17214 17495])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [17497 18553])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [18555 19611])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [19613 20633])
            ("defalias" code nil nil [20636 20684])
            ("face-underline-p" function (:arguments ("face" "frame" "inherit")) nil [20687 21140])
            ("face-inverse-video-p" function (:arguments ("face" "frame" "inherit")) nil [21143 21577])
            ("face-bold-p" function (:arguments ("face" "frame" "inherit")) nil [21580 22099])
            ("face-italic-p" function (:arguments ("face" "frame" "inherit")) nil [22102 22606])
            ("face-documentation" function (:arguments ("face")) nil [22782 23204])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [23207 23395])
            ("defalias" code nil nil [23398 23445])
            ("defalias" code nil nil [23446 23501])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [23682 31016])
            ("make-face-bold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31018 31469])
            ("make-face-unbold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31472 31872])
            ("make-face-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [31875 32332])
            ("make-face-unitalic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [32335 32740])
            ("make-face-bold-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [32743 33240])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [33243 33669])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [33875 34344])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [34347 34816])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [34819 35424])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [35427 36196])
            ("define-obsolete-function-alias" code nil nil [36198 36311])
            ("set-face-inverse-video" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [36314 36887])
            ("define-obsolete-function-alias" code nil nil [36889 37010])
            ("set-face-bold" function (:arguments ("face" "bold-p" "frame")) nil [37012 37428])
            ("define-obsolete-function-alias" code nil nil [37430 37501])
            ("set-face-italic" function (:arguments ("face" "italic-p" "frame")) nil [37504 37940])
            ("define-obsolete-function-alias" code nil nil [37942 38017])
            ("defalias" code nil nil [38020 38076])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [38079 38879])
            ("crm-separator" variable nil nil [39065 39087])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [39103 41604])
            ("x-bitmap-file-path" variable nil nil [41663 41690])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [41692 44381])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value (quote ((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance"))))
                nil [44384 45154])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [45157 45304])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [45307 46234])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [46237 46854])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [47015 49356])
            ("declare-function" code nil nil [49358 49404])
            ("declare-function" code nil nil [49405 49496])
            ("read-face-font" function (:arguments ("face" "frame")) nil [49498 49840])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [49843 50271])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [50273 51218])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [51220 52009])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [52180 52343])
            ("help-xref-stack" variable nil nil [52472 52496])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [52497 55532])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [55535 59245])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [59523 60113])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [60116 61918])
            ("face-spec-choose" function (:arguments ("spec" "frame" "no-match-retval")) nil [61921 63342])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [63345 64483])
            ("face-spec-set" function (:arguments ("face" "spec" "spec-type")) nil [64485 66439])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [66441 68106])
            ("face-spec-set-2" function (:arguments ("face" "frame" "spec")) nil [68108 68435])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [68437 69511])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [69513 69708])
            ("face-default-spec" function (:arguments ("face")) nil [69710 69898])
            ("face-user-default-spec" function (:arguments ("face")) nil [69900 70183])
            ("defined-colors" function (:arguments ("frame")) nil [70441 70899])
            ("defalias" code nil nil [70900 70944])
            ("declare-function" code nil nil [70946 71016])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [71018 71685])
            ("defalias" code nil nil [71686 71732])
            ("declare-function" code nil nil [71734 71801])
            ("color-values" function (:arguments ("color" "frame")) nil [71803 72722])
            ("defalias" code nil nil [72724 72764])
            ("declare-function" code nil nil [72766 72833])
            ("display-color-p" function (:arguments ("display")) nil [72835 73237])
            ("defalias" code nil nil [73238 73284])
            ("declare-function" code nil nil [73286 73356])
            ("display-grayscale-p" function (:arguments ("display")) nil [73358 73791])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [73793 76497])
            ("face-at-point" function (:arguments ("thing" "multiple")) nil [76499 77740])
            ("foreground-color-at-point" function nil nil [77742 78471])
            ("background-color-at-point" function nil nil [78497 79226])
            ("declare-function" code nil nil [79421 79466])
            ("declare-function" code nil nil [79467 79560])
            ("declare-function" code nil nil [79561 79655])
            ("declare-function" code nil nil [79656 79710])
            ("x-display-name" variable nil nil [79711 79734])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [79736 80631])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [80634 81640])
            ("declare-function" code nil nil [81642 81692])
            ("declare-function" code nil nil [81693 81759])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [81761 82962])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [82964 84433])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [84435 85111])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [85114 85873])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [85875 86440])
            ("tty-setup-hook" variable nil nil [86442 86674])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type" "run-hook")) nil [86676 88023])
            ("tty-set-up-initial-frame-faces" function nil nil [88129 88286])
            ("basic-faces" customgroup (:user-visible-flag t) nil [88457 88532])
            ("default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [88534 88666])
            ("bold" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [88668 88747])
            ("italic" variable
               (:default-value (quote ((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic)))
                :type "face")
                nil [88749 89114])
            ("bold-italic" variable
               (:default-value (quote ((t :weight bold :slant italic)))
                :type "face")
                nil [89116 89223])
            ("underline" variable
               (:default-value (quote ((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t)))
                :type "face")
                nil [89225 89415])
            ("fixed-pitch" variable
               (:default-value (quote ((t :family "Monospace")))
                :type "face")
                nil [89417 89521])
            ("variable-pitch" variable
               (:default-value (quote ((t :family "Sans Serif")))
                :type "face")
                nil [89523 89634])
            ("shadow" variable
               (:default-value (quote ((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow")))
                :type "face")
                nil [89636 90074])
            ("link" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline)))
                :type "face")
                nil [90076 90543])
            ("link-visited" variable
               (:default-value (quote ((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [90545 90795])
            ("highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [90797 91339])
            ("region" variable
               (:default-value (quote ((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :distant-foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :distant-foreground "ns_selection_fg_color" :background "ns_selection_bg_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [91501 92427])
            ("secondary-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [92429 92977])
            ("trailing-whitespace" variable
               (:default-value (quote ((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t)))
                :type "face")
                nil [92979 93256])
            ("escape-glyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [93258 93688])
            ("nobreak-space" variable
               (:default-value (quote ((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [93690 93950])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [93952 94069])
            ("mode-line" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [94071 94367])
            ("mode-line-inactive" variable
               (:default-value (quote ((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30")))
                :type "face")
                nil [94369 94907])
            ("define-obsolete-face-alias" code nil nil [94908 94982])
            ("mode-line-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight)))
                :type "face")
                nil [94984 95258])
            ("define-obsolete-face-alias" code nil nil [95259 95335])
            ("mode-line-emphasis" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [95337 95580])
            ("mode-line-buffer-id" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [95582 95765])
            ("define-obsolete-face-alias" code nil nil [95766 95842])
            ("header-line" variable
               (:default-value (quote ((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t)))
                :type "face")
                nil [95844 97180])
            ("vertical-border" variable
               (:default-value (quote ((((type tty)) :inherit mode-line-inactive)))
                :type "face")
                nil [97182 97347])
            ("window-divider" variable
               (:default-value (quote ((t :foreground "gray60")))
                :type "face")
                nil [97349 97809])
            ("window-divider-first-pixel" variable
               (:default-value (quote ((t :foreground "gray80")))
                :type "face")
                nil [97811 98220])
            ("window-divider-last-pixel" variable
               (:default-value (quote ((t :foreground "gray40")))
                :type "face")
                nil [98222 98627])
            ("minibuffer-prompt" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue")))
                :type "face")
                nil [98629 99124])
            ("setq" code nil nil [99126 99237])
            ("fringe" variable
               (:default-value (quote ((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray")))
                :type "face")
                nil [99239 99551])
            ("scroll-bar" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [99553 99691])
            ("border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [99693 99822])
            ("cursor" variable
               (:default-value (quote ((((background light)) :background "black") (((background dark)) :background "white")))
                :type "face")
                nil [99824 100274])
            ("put" code nil nil [100276 100308])
            ("mouse" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [100310 100436])
            ("tool-bar" variable
               (:default-value (quote ((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey")))
                :type "face")
                nil [100438 100728])
            ("menu" variable
               (:default-value (quote ((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t)))
                :type "face")
                nil [100730 100974])
            ("help-argument-name" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [100976 101098])
            ("glyphless-char" variable
               (:default-value (quote ((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6)))
                :type "face")
                nil [101100 101374])
            ("error" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t)))
                :type "face")
                nil [101376 101906])
            ("warning" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow")))
                :type "face")
                nil [101908 102142])
            ("success" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green")))
                :type "face")
                nil [102144 102563])
            ("tty-menu-enabled-face" variable
               (:default-value (quote ((t :foreground "yellow" :background "blue" :weight bold)))
                :type "face")
                nil [102589 102761])
            ("tty-menu-disabled-face" variable
               (:default-value (quote ((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (t :foreground "white" :background "blue")))
                :type "face")
                nil [102763 103009])
            ("tty-menu-selected-face" variable
               (:default-value (quote ((t :background "red")))
                :type "face")
                nil [103011 103158])
            ("paren-showing-faces" customgroup (:user-visible-flag t) nil [103160 103295])
            ("show-paren-match" variable
               (:default-value (quote ((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark)) :background "grey50") (t :background "gray")))
                :type "face")
                nil [103297 103682])
            ("show-paren-mismatch" variable
               (:default-value (quote ((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t))))
                :type "face")
                nil [103684 103875])
            ("x-font-regexp" variable nil nil [104251 104277])
            ("x-font-regexp-head" variable nil nil [104278 104309])
            ("x-font-regexp-weight" variable nil nil [104310 104343])
            ("x-font-regexp-slant" variable nil nil [104344 104376])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [104378 104418])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [104419 104458])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [104459 104499])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [104500 104541])
            ("let" code nil nil [104624 105842])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [105845 106959])
            ("font-list-limit" variable (:default-value 100) nil [106961 107076])
            ("make-obsolete-variable" code nil nil [107077 107129])
            ("faces" package nil nil [107131 107147]))          
      :file "faces.el.gz"
      :pointmax 107172
      :fsize 26972
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "bs.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("bs" customgroup (:user-visible-flag t) nil [5394 5607])
            ("bs-appearance" customgroup (:user-visible-flag t) nil [5609 5713])
            ("bs-attributes-list" variable (:default-value (quote (("" 1 1 left bs--get-marked-string) ("M" 1 1 left bs--get-modified-string) ("R" 2 2 left bs--get-readonly-string) ("Buffer" bs--get-name-length 10 left bs--get-name) ("" 1 1 left " ") ("Size" 8 8 right bs--get-size-string) ("" 1 1 left " ") ("Mode" 12 12 right bs--get-mode-name) ("" 2 2 left "  ") ("File" 12 12 left bs--get-file-name) ("" 2 2 left "  ")))) nil [5715 7174])
            ("bs--make-header-match-string" function nil nil [7176 7363])
            ("bs-mode-font-lock-keywords" variable (:default-value (list (list (bs--make-header-match-string) (quote (1 font-lock-type-face append)) (quote (1 (quote bold) append))) (list "^\\(.*\\*.*\\*.*\\)$" 1 (if (facep (quote font-lock-constant-face)) (quote font-lock-constant-face) (quote font-lock-comment-face))) (quote ("^..\\(.*Dired .*\\)$" 1 font-lock-function-name-face)) (quote ("^.\\(\\*\\) +[^\\*]" 1 font-lock-comment-face)))) nil [7387 8010])
            ("bs-max-window-height" variable (:default-value 20) nil [8012 8140])
            ("bs-dont-show-regexp" variable nil nil [8142 8328])
            ("bs-must-show-regexp" variable nil nil [8330 8720])
            ("bs-must-always-show-regexp" variable nil nil [8722 9026])
            ("bs-dont-show-function" variable nil nil [9028 9264])
            ("bs-must-show-function" variable nil nil [9266 9410])
            ("bs-buffer-sort-function" variable nil nil [9412 9656])
            ("bs-maximal-buffer-name-column" variable (:default-value 45) nil [9658 10019])
            ("bs-minimal-buffer-name-column" variable (:default-value 15) nil [10021 10382])
            ("bs-header-lines-length" variable
               (:constant-flag t
                :default-value 2)
                nil [10384 10477])
            ("bs-configurations" variable (:default-value (quote (("all" nil nil nil nil nil) ("files" nil nil nil bs-visits-non-file bs-sort-buffer-interns-are-last) ("files-and-scratch" "^\\*scratch\\*$" nil nil bs-visits-non-file bs-sort-buffer-interns-are-last) ("all-intern-last" nil nil nil nil bs-sort-buffer-interns-are-last)))) nil [10479 11411])
            ("bs-default-configuration" variable (:default-value "files") nil [11413 11704])
            ("bs-alternative-configuration" variable (:default-value "all") nil [11706 11954])
            ("bs-current-configuration" variable (:default-value bs-default-configuration) nil [11956 12122])
            ("bs-cycle-configuration-name" variable nil nil [12124 12474])
            ("bs-string-show-always" variable (:default-value "+") nil [12476 12624])
            ("bs-string-show-never" variable (:default-value "-") nil [12626 12772])
            ("bs-string-current" variable (:default-value ".") nil [12774 12907])
            ("bs-string-current-marked" variable (:default-value "#") nil [12909 13067])
            ("bs-string-marked" variable (:default-value ">") nil [13069 13198])
            ("bs-string-show-normally" variable (:default-value " ") nil [13200 13340])
            ("bs--name-entry-length" variable (:default-value 20) nil [13342 13448])
            ("defvar-local" code nil nil [13619 13919])
            ("unless" code nil nil [13960 14047])
            ("bs--sort-by-name" function (:arguments ("b1" "b2")) nil [14049 14177])
            ("bs--sort-by-filename" function (:arguments ("b1" "b2")) nil [14179 14335])
            ("bs--sort-by-mode" function (:arguments ("b1" "b2")) nil [14337 14585])
            ("bs--sort-by-size" function (:arguments ("b1" "b2")) nil [14587 14705])
            ("bs-sort-functions" variable (:default-value (quote (("by name" bs--sort-by-name "Buffer" region) ("by size" bs--sort-by-size "Size" region) ("by mode" bs--sort-by-mode "Mode" region) ("by filename" bs--sort-by-filename "File" region) ("by nothing" nil nil nil)))) nil [14707 15637])
            ("bs-define-sort-function" function (:arguments ("name" "fun" "regexp-for-sorting" "face")) nil [15639 16447])
            ("bs--current-sort-function" variable nil nil [16449 16599])
            ("bs-default-sort-name" variable (:default-value "by nothing") nil [16601 16984])
            ("bs--buffer-coming-from" variable nil nil [16986 17097])
            ("bs--show-all" variable nil nil [17099 17318])
            ("bs--window-config-coming-from" variable nil nil [17320 17426])
            ("bs--intern-show-never" variable (:default-value "^ \\|\\*buffer-selection\\*") nil [17428 17646])
            ("bs-current-list" variable nil nil [17648 17751])
            ("bs--marked-buffers" variable nil nil [17753 17839])
            ("bs-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " (quote bs-select)) (define-key map "f" (quote bs-select)) (define-key map "v" (quote bs-view)) (define-key map "!" (quote bs-select-in-one-window)) (define-key map [mouse-2] (quote bs-mouse-select)) (define-key map [button2] (quote bs-mouse-select)) (define-key map "F" (quote bs-select-other-frame)) (let ((key 49)) (while (<= key 57) (define-key map (char-to-string key) (quote digit-argument)) (setq key (1+ key)))) (define-key map "-" (quote negative-argument)) (define-key map "-" (quote negative-argument)) (define-key map "o" (quote bs-select-other-window)) (define-key map "" (quote bs-tmp-select-other-window)) (define-key map [mouse-3] (quote bs-mouse-select-other-frame)) (define-key map [button3] (quote bs-mouse-select-other-frame)) (define-key map [up] (quote bs-up)) (define-key map "n" (quote bs-down)) (define-key map "p" (quote bs-up)) (define-key map [down] (quote bs-down)) (define-key map "" (quote bs-select)) (define-key map "b" (quote bs-bury-buffer)) (define-key map "s" (quote bs-save)) (define-key map "S" (quote bs-show-sorted)) (define-key map "a" (quote bs-toggle-show-all)) (define-key map "d" (quote bs-delete)) (define-key map "" (quote bs-delete-backward)) (define-key map "k" (quote bs-delete)) (define-key map "g" (quote bs-refresh)) (define-key map "C" (quote bs-set-configuration-and-refresh)) (define-key map "c" (quote bs-select-next-configuration)) (define-key map "q" (quote bs-kill)) (define-key map "" (quote bs-kill)) (define-key map "" (quote bs-abort)) (define-key map "" (quote bs-abort)) (define-key map "%" (quote bs-toggle-readonly)) (define-key map "~" (quote bs-clear-modified)) (define-key map "M" (quote bs-toggle-current-to-show)) (define-key map "+" (quote bs-set-current-buffer-to-show-always)) (define-key map "t" (quote bs-visit-tags-table)) (define-key map "m" (quote bs-mark-current)) (define-key map "u" (quote bs-unmark-current)) (define-key map ">" (quote scroll-right)) (define-key map "<" (quote scroll-left)) (define-key map "?" (quote bs-help)) map)) nil [17841 20258])
            ("bs-buffer-list" function (:arguments ("list" "sort-description")) nil [20422 22737])
            ("bs-buffer-sort" function (:arguments ("buffer-list")) nil [22739 22943])
            ("bs--redisplay" function (:arguments ("keep-line-p" "sort-description")) nil [22945 23374])
            ("bs--goto-current-buffer" function nil nil [23376 23858])
            ("bs--current-config-message" function nil nil [23860 24088])
            ("bs--track-window-changes" function (:arguments ("frame")) nil [24090 24361])
            ("bs--remove-hooks" function nil nil [24363 24654])
            ("put" code nil nil [24656 24691])
            ("define-derived-mode" code nil nil [24693 27098])
            ("bs--restore-window-config" function nil nil [27100 27418])
            ("bs-kill" function (:user-visible-flag t) nil [27420 27574])
            ("bs-abort" function (:user-visible-flag t) nil [27576 27694])
            ("bs-set-configuration-and-refresh" function (:user-visible-flag t) nil [27696 27924])
            ("bs-refresh" function
               (:user-visible-flag t
                :arguments ("_ignored"))
                nil [27926 28083])
            ("bs--set-window-height" function nil nil [28085 28289])
            ("bs--current-buffer" function nil nil [28291 28585])
            ("bs--update-current-line" function nil nil [28587 28878])
            ("bs-view" function (:user-visible-flag t) nil [28880 29025])
            ("bs-select" function (:user-visible-flag t) nil [29027 29891])
            ("bs-select-other-window" function (:user-visible-flag t) nil [29893 30347])
            ("bs-tmp-select-other-window" function (:user-visible-flag t) nil [30349 30562])
            ("bs-select-other-frame" function (:user-visible-flag t) nil [30564 30845])
            ("bs-mouse-select-other-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [30847 31075])
            ("bs-mouse-select" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31077 31238])
            ("bs-select-in-one-window" function (:user-visible-flag t) nil [31240 31431])
            ("bs-bury-buffer" function (:user-visible-flag t) nil [31433 31564])
            ("bs-save" function (:user-visible-flag t) nil [31566 31724])
            ("bs-visit-tags-table" function (:user-visible-flag t) nil [31726 31990])
            ("bs-toggle-current-to-show" function (:user-visible-flag t) nil [31992 32496])
            ("bs-set-current-buffer-to-show-always" function
               (:user-visible-flag t
                :arguments ("not-to-show-p"))
                nil [32498 32914])
            ("bs-set-current-buffer-to-show-never" function (:user-visible-flag t) nil [32916 33087])
            ("bs--set-toggle-to-show" function (:arguments ("buffer" "what")) nil [33089 33439])
            ("bs--mark-unmark" function (:arguments ("count" "fun")) nil [33441 33732])
            ("bs-mark-current" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [33734 33975])
            ("bs-unmark-current" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [33977 34242])
            ("bs--show-config-message" function (:arguments ("what")) nil [34244 34570])
            ("bs-delete" function (:user-visible-flag t) nil [34572 35092])
            ("bs-delete-backward" function (:user-visible-flag t) nil [35094 35323])
            ("bs-show-sorted" function (:user-visible-flag t) nil [35325 35646])
            ("bs-apply-sort-faces" function (:arguments ("sort-description")) nil [35648 36267])
            ("bs-toggle-show-all" function (:user-visible-flag t) nil [36269 36533])
            ("bs-toggle-readonly" function (:user-visible-flag t) nil [36535 36770])
            ("bs-clear-modified" function (:user-visible-flag t) nil [36772 36978])
            ("bs--nth-wrapper" function (:arguments ("count" "fun" "args")) nil [36980 37132])
            ("bs-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [37134 37356])
            ("bs--up" function nil nil [37358 37609])
            ("bs-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [37611 37837])
            ("bs--down" function nil nil [37839 38086])
            ("bs-visits-non-file" function (:arguments ("buffer")) nil [38088 38292])
            ("bs-sort-buffer-interns-are-last" function (:arguments ("_b1" "b2")) nil [38294 38454])
            ("bs-config-clear" function nil nil [38624 38992])
            ("bs-config--only-files" function nil nil [38994 39317])
            ("bs-config--files-and-scratch" function nil nil [39319 39724])
            ("bs-config--all" function nil nil [39726 39875])
            ("bs-config--all-intern-last" function nil nil [39877 40139])
            ("bs-set-configuration" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [40141 40943])
            ("bs-help" function (:user-visible-flag t) nil [40945 41034])
            ("bs-next-config-aux" function (:arguments ("start-name" "list")) nil [41036 41476])
            ("bs-next-config" function (:arguments ("name")) nil [41478 41629])
            ("bs-select-next-configuration" function
               (:user-visible-flag t
                :arguments ("start-name"))
                nil [41631 42158])
            ("bs-show-in-buffer" function (:arguments ("list")) nil [42160 43186])
            ("bs-next-buffer" function (:arguments ("buffer-list" "sorting-p")) nil [43188 43802])
            ("bs-previous-buffer" function (:arguments ("buffer-list" "sorting-p")) nil [43804 44384])
            ("bs-message-without-log" function (:arguments ("args")) nil [44386 44601])
            ("bs--cycle-list" variable nil nil [44603 44672])
            ("bs-cycle-next" function (:user-visible-flag t) nil [44689 45894])
            ("bs-cycle-previous" function (:user-visible-flag t) nil [45911 47027])
            ("bs--get-value" function (:arguments ("fun" "args")) nil [47029 47269])
            ("bs--get-marked-string" function (:arguments ("start-buffer" "_all-buffers")) nil [47271 48346])
            ("bs--get-modified-string" function (:arguments ("_start-buffer" "_all-buffers")) nil [48348 48648])
            ("bs--get-readonly-string" function (:arguments ("_start-buffer" "_all-buffers")) nil [48650 48948])
            ("bs--get-size-string" function (:arguments ("_start-buffer" "_all-buffers")) nil [48950 49235])
            ("bs--get-name" function (:arguments ("_start-buffer" "_all-buffers")) nil [49237 49716])
            ("bs--get-mode-name" function (:arguments ("start-buffer" "_all-buffers")) nil [49718 50029])
            ("bs--get-file-name" function (:arguments ("_start-buffer" "_all-buffers")) nil [50031 50623])
            ("bs--insert-one-entry" function (:arguments ("buffer")) nil [50625 51439])
            ("bs--format-aux" function (:arguments ("string" "align" "len")) nil [51441 51850])
            ("bs--show-header" function nil nil [51852 52089])
            ("bs--get-name-length" function nil nil [52091 52190])
            ("bs--create-header-line" function (:arguments ("col")) nil [52192 52592])
            ("bs--show-with-configuration" function (:arguments ("name" "arg")) nil [52594 54144])
            ("bs--configuration-name-for-prefix-arg" function (:arguments ("prefix")) nil [54146 54799])
            ("bs-customize" function (:user-visible-flag t) nil [55007 55128])
            ("bs-show" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [55145 55880])
            ("bs-unload-function" function nil nil [56042 56327])
            ("bs" package nil nil [56355 56368]))          
      :file "bs.el.gz"
      :pointmax 56390
      :fsize 13831
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "custom.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1248 1265])
            ("custom-define-hook" variable nil nil [1267 1416])
            ("custom-dont-initialize" variable nil nil [1418 1601])
            ("custom-current-group-alist" variable nil nil [1603 1716])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1746 2209])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2211 2786])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2788 3555])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3557 4335])
            ("custom-delayed-init-variables" variable nil nil [4337 4434])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4436 5560])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5562 8161])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8163 14297])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14325 17265])
            ("custom-current-group" function nil nil [17294 17383])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17385 18446])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18448 19608])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19610 19956])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [19958 20360])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20379 20969])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [20971 21682])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21684 22437])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22439 22890])
            ("defalias" code nil nil [22891 22947])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [22949 23185])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23187 23337])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23339 23513])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23515 23811])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23813 24099])
            ("custom-variable-p" function (:arguments ("variable")) nil [24101 24534])
            ("define-obsolete-function-alias" code nil nil [24536 24611])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24613 24908])
            ("custom-load-recursion" variable nil nil [25051 25127])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25129 26388])
            ("custom-local-buffer" variable nil nil [26391 26711])
            ("put" code nil nil [26712 26757])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26759 27140])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27142 27566])
            ("custom-quote" function (:arguments ("sexp")) nil [27568 27906])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [27908 29071])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29073 30228])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30230 30702])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [32529 32917])
            ("custom-theme-p" function (:arguments ("theme")) nil [32919 33028])
            ("custom-check-theme" function (:arguments ("theme")) nil [33030 33208])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [33210 35406])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [35408 36178])
            ("custom-set-variables" function (:arguments ("args")) nil [36181 36792])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [36794 39469])
            ("custom--sort-vars-table" variable nil nil [39471 39503])
            ("custom--sort-vars-result" variable nil nil [39504 39537])
            ("custom--sort-vars" function (:arguments ("vars")) nil [39539 41071])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41073 41657])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [42253 42874])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [42876 43364])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [43366 43871])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [43895 44242])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [44244 45045])
            ("custom--inhibit-theme-enable" variable nil nil [45047 45333])
            ("provide-theme" function (:arguments ("theme")) nil [45335 45733])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [45735 46355])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [46357 49233])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [49235 49985])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [49987 50252])
            ("custom-available-themes" function nil nil [50254 51134])
            ("custom-theme--load-path" function nil nil [51136 51455])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [51502 52738])
            ("custom-enabled-themes" variable nil nil [52740 54050])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54052 54170])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [54172 55771])
            ("declare-function" code nil nil [55813 55907])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [55909 56269])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [56271 56664])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [56666 57121])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [57123 57543])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [57760 58131])
            ("custom-reset-variables" function (:arguments ("args")) nil [58133 58474])
            ("custom" package nil nil [58490 58507]))          
      :file "custom.el.gz"
      :pointmax 58533
      :fsize 17003
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!24.5!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
