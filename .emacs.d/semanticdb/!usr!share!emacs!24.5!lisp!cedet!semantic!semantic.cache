;; Object semantic/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semantic/"
  :tables
  (list
    (semanticdb-table "idle.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1508 1527])
            ("semantic/ctxt" include nil nil [1528 1552])
            ("semantic/format" include nil nil [1553 1579])
            ("semantic/tag" include nil nil [1580 1603])
            ("timer" include nil nil [1604 1620])
            ("semantic/find" include nil nil [1707 1731])
            ("eldoc-last-message" variable nil nil [1734 1761])
            ("declare-function" code nil nil [1762 1802])
            ("declare-function" code nil nil [1803 1873])
            ("declare-function" code nil nil [1874 1945])
            ("declare-function" code nil nil [1946 2022])
            ("declare-function" code nil nil [2023 2094])
            ("declare-function" code nil nil [2095 2155])
            ("declare-function" code nil nil [2156 2238])
            ("declare-function" code nil nil [2239 2330])
            ("declare-function" code nil nil [2331 2390])
            ("declare-function" code nil nil [2391 2451])
            ("declare-function" code nil nil [2452 2526])
            ("semantic-idle-scheduler-timer" variable nil nil [2570 2659])
            ("semantic-idle-scheduler-work-timer" variable nil nil [2661 2777])
            ("semantic-idle-scheduler-verbose-flag" variable nil nil [2779 2983])
            ("semantic-idle-scheduler-idle-time" variable (:default-value 1) nil [2985 3492])
            ("semantic-idle-scheduler-work-idle-time" variable (:default-value 60) nil [3494 4040])
            ("semantic-idle-scheduler-setup-timers" function nil nil [4042 4652])
            ("semantic-idle-scheduler-kill-timer" function nil nil [4654 4875])
            ("semantic-idle-scheduler-mode-hook" variable nil nil [5025 5179])
            ("semantic-idle-scheduler-mode" variable nil nil [5181 5347])
            ("make-variable-buffer-local" code nil nil [5348 5406])
            ("semantic-idle-scheduler-max-buffer-size" variable (:user-visible-flag t) nil [5408 5676])
            ("semantic-idle-scheduler-enabled-p" function nil nil [5678 6516])
            ("define-minor-mode" code nil nil [6533 7526])
            ("semantic-add-minor-mode" code nil nil [7528 7614])
            ("semantic-idle-scheduler-queue" variable nil nil [7695 7977])
            ("semantic-idle-scheduler-add" function (:arguments ("function")) nil [7979 8130])
            ("semantic-idle-scheduler-remove" function (:arguments ("function")) nil [8132 8320])
            ("semantic-idle-core-handler" function nil nil [8343 11128])
            ("semantic-debug-idle-function" function (:user-visible-flag t) nil [11130 11313])
            ("semantic-idle-scheduler-function" function nil nil [11315 11676])
            ("semantic-idle-work-parse-neighboring-files-flag" variable (:user-visible-flag t) nil [11806 12037])
            ("semantic-idle-work-update-headers-flag" variable (:user-visible-flag t) nil [12039 12306])
            ("semantic-idle-work-for-one-buffer" function (:arguments ("buffer")) nil [12308 13336])
            ("semantic-idle-work-core-handler" function nil nil [13338 15424])
            ("semantic-debug-idle-work-function" function (:user-visible-flag t) nil [15426 15624])
            ("semantic-idle-scheduler-work-function" function nil nil [15626 16182])
            ("semantic-idle-scheduler-work-parse-neighboring-files" function nil nil [16184 17210])
            ("semantic-before-idle-scheduler-reparse-hook" variable nil nil [17353 17595])
            ("semantic-after-idle-scheduler-reparse-hook" variable nil nil [17597 17833])
            ("semantic-varalias-obsolete" code nil nil [17835 17968])
            ("semantic-varalias-obsolete" code nil nil [17969 18100])
            ("semantic-idle-scheduler-refresh-tags" function nil nil [18102 20950])
            ("define-semantic-idle-service" function (:arguments ("name" "doc" "forms")) nil [21329 23421])
            ("put" code nil nil [23422 23481])
            ("add-hook" code nil nil [23482 23624])
            ("semantic-idle-truncate-long-summaries" variable (:default-value t) nil [23689 23894])
            ("semantic-idle-summary-function" variable (:default-value (quote semantic-format-tag-summarize-with-file)) nil [23896 24272])
            ("semantic-idle-summary-find-current-symbol-tag" function (:arguments ("sym")) nil [24274 24725])
            ("semantic-idle-summary-current-symbol-info-brutish" function nil nil [24727 25106])
            ("semantic-idle-summary-current-symbol-keyword" function nil nil [25108 25434])
            ("semantic-idle-summary-current-symbol-info-context" function nil nil [25436 25829])
            ("semantic-idle-summary-current-symbol-info-default" function nil nil [25831 26329])
            ("semantic-idle-summary-out-of-context-faces" variable (:default-value (quote (font-lock-comment-face font-lock-string-face font-lock-doc-string-face font-lock-doc-face))) nil [26331 27165])
            ("semantic-idle-summary-useful-context-p" function nil nil [27167 27549])
            ("semantic-idle-summary-current-symbol-info" function (:overloadable t) nil [27551 27686])
            ("make-obsolete-overload" code nil nil [27688 27846])
            ("semantic-idle-summary-mode-hook" variable nil nil [27848 27980])
            ("semantic-idle-summary-idle-function" function nil nil [27982 29190])
            ("define-minor-mode" code nil nil [29192 30153])
            ("semantic-idle-summary-refresh-echo-area" function nil nil [30155 30526])
            ("semantic-add-minor-mode" code nil nil [30528 30584])
            ("define-minor-mode" code nil nil [30586 31058])
            ("semantic-idle-symbol-highlight" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [31273 31409])
            ("semantic-idle-symbol-highlight-face" variable (:default-value (quote semantic-idle-symbol-highlight)) nil [31410 31532])
            ("make-obsolete-variable" code nil nil [31533 31672])
            ("semantic-idle-symbol-maybe-highlight" function (:arguments ("tag")) nil [31674 33570])
            ("define-semantic-idle-service" code nil nil [33572 34883])
            ("define-minor-mode" code nil nil [34902 35650])
            ("semantic-idle-completions-end-of-symbol-p" function nil nil [35897 36133])
            ("semantic-idle-completion-list-default" function nil nil [36135 36837])
            ("define-semantic-idle-service" code nil nil [36839 37728])
            ("semantic-idle-breadcrumbs-display-function" variable (:default-value (function semantic-idle-breadcrumbs--display-in-header-line)) nil [37895 38612])
            ("semantic-idle-breadcrumbs-format-tag-list-function" variable (:default-value (function semantic-idle-breadcrumbs--format-linear)) nil [38614 39557])
            ("semantic-idle-breadcrumbs-format-tag-function" variable (:default-value (function semantic-format-tag-abbreviate)) nil [39559 39929])
            ("semantic-idle-breadcrumbs-separator" variable (:default-value (quote mode-specific)) nil [39931 40329])
            ("semantic-idle-breadcrumbs-header-line-prefix" variable (:default-value semantic-stickyfunc-indent-string) nil [40331 40601])
            ("semantic-idle-breadcrumbs-popup-menu" variable nil nil [40603 40735])
            ("semantic-idle-breadcrumbs--popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [40737 41157])
            ("semantic-idle-breadcrumbs--tag-function" function (:arguments ("function")) nil [41159 41702])
            ("semantic-idle-breadcrumbs-popup-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [header-line mouse-1] (semantic-idle-breadcrumbs--tag-function semantic-go-to-tag)) (define-key map [header-line mouse-3] (quote semantic-idle-breadcrumbs--popup-menu)) map)) nil [41747 42183])
            ("easy-menu-define" code nil nil [42185 44104])
            ("define-semantic-idle-service" code nil nil [44106 44648])
            ("semantic-idle-breadcrumbs--display-in-header-line" function (:arguments ("tag-list")) nil [44650 45506])
            ("semantic-idle-breadcrumbs--display-in-mode-line" function (:arguments ("tag-list")) nil [45508 46049])
            ("semantic-idle-breadcrumbs--format-tag-list" function (:arguments ("tag-list" "max-length")) nil [46051 46766])
            ("semantic-idle-breadcrumbs--format-linear" function (:arguments ("tag-list" "max-length")) nil [46768 47544])
            ("semantic-idle-breadcrumbs--format-innermost-first" function (:arguments ("tag-list" "max-length")) nil [47546 48839])
            ("semantic-idle-breadcrumbs--format-tag" function (:arguments ("tag" "format-function")) nil [48841 49569])
            ("semantic/idle" package nil nil [49572 49596]))          
      :file "idle.el.gz"
      :pointmax 49749
      :fsize 13518
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1731 . 1732) (symbol 1689 . 1706) (open-paren 1688 . 1689)))
    (semanticdb-table "complete.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [4338 4351])
            ("semantic" include nil nil [4353 4372])
            ("eieio-opt" include nil nil [4373 4393])
            ("semantic/analyze" include nil nil [4394 4421])
            ("semantic/ctxt" include nil nil [4422 4446])
            ("semantic/decorate" include nil nil [4447 4475])
            ("semantic/format" include nil nil [4476 4502])
            ("semantic/idle" include nil nil [4503 4527])
            ("semantic/find" include nil nil [4604 4628])
            ("semantic-complete-inline-overlay" variable nil nil [4642 4745])
            ("semantic-completion-inline-active-p" function nil nil [4747 5102])
            ("semantic-completion-text" function nil nil [5203 5542])
            ("semantic-completion-delete-text" function nil nil [5544 5823])
            ("semantic-completion-message" function (:arguments ("fmt" "args")) nil [5825 6090])
            ("semantic-completion-collector-engine" variable nil nil [6203 6394])
            ("semantic-completion-display-engine" variable nil nil [6396 6536])
            ("semantic-complete-key-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km " " (quote semantic-complete-complete-space)) (define-key km "	" (quote semantic-complete-complete-tab)) (define-key km "" (quote semantic-complete-done)) (define-key km "" (quote abort-recursive-edit)) (define-key km "\356" (quote next-history-element)) (define-key km "\360" (quote previous-history-element)) (define-key km "" (quote next-history-element)) (define-key km "" (quote previous-history-element)) km)) nil [6538 7120])
            ("semantic-completion-default-history" variable nil nil [7122 7262])
            ("semantic-complete-read-tag-engine" function (:arguments ("collector" "displayor" "prompt" "default-tag" "initial-input" "history")) nil [7265 9489])
            ("semantic-complete-active-default" variable nil nil [9535 9636])
            ("semantic-complete-default-to-tag" function (:arguments ("default")) nil [9638 11196])
            ("semantic-complete-current-matched-tag" variable nil nil [11548 11662])
            ("declare-function" code nil nil [11799 11887])
            ("semantic-complete-current-match" function nil nil [11889 14598])
            ("semantic-complete-done" function (:user-visible-flag t) nil [14705 14937])
            ("semantic-complete-complete-space" function (:user-visible-flag t) nil [14939 15086])
            ("semantic-complete-complete-tab" function (:user-visible-flag t) nil [15088 15250])
            ("semantic-complete-hack-word-boundaries" function (:arguments ("original" "new")) nil [15355 16042])
            ("semantic-complete-try-completion" function (:arguments ("partial")) nil [16044 17825])
            ("semantic-complete-do-completion" function (:arguments ("partial" "inline")) nil [17827 19744])
            ("semantic-complete-inline-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "	" (quote semantic-complete-inline-TAB)) (define-key km "\360" (quote semantic-complete-inline-up)) (define-key km "\356" (quote semantic-complete-inline-down)) (define-key km "" (quote semantic-complete-inline-done)) (define-key km "\203" (quote semantic-complete-inline-exit)) (define-key km "" (quote semantic-complete-inline-quit)) (define-key km "?" (lambda nil (interactive) (describe-variable (quote semantic-complete-inline-map)))) km)) nil [20101 20697])
            ("semantic-complete-inline-face" variable
               (:user-visible-flag t
                :default-value (quote ((((class color) (background dark)) (:underline "yellow")) (((class color) (background light)) (:underline "brown"))))
                :type "face")
                nil [20699 21015])
            ("semantic-complete-inline-text" function nil nil [21017 21375])
            ("semantic-complete-inline-delete-text" function nil nil [21377 21631])
            ("semantic-complete-inline-done" function (:user-visible-flag t) nil [21633 22365])
            ("semantic-complete-inline-quit" function (:user-visible-flag t) nil [22367 22500])
            ("semantic-complete-inline-exit" function (:user-visible-flag t) nil [22502 23798])
            ("semantic-complete-pre-command-hook" function nil nil [23800 24384])
            ("semantic-complete-post-command-hook" function nil nil [24386 26244])
            ("semantic-complete-inline-force-display" function nil nil [26246 27005])
            ("semantic-complete-inline-tag-engine" function (:arguments ("collector" "displayor" "buffer" "start" "end")) nil [27007 28587])
            ("semantic-complete-inline-TAB" function (:user-visible-flag t) nil [28631 28929])
            ("semantic-complete-inline-down" function (:user-visible-flag t) nil [28931 29188])
            ("semantic-complete-inline-up" function (:user-visible-flag t) nil [29190 29449])
            ("semantic-complete-next-action" function (:arguments ("partial")) nil [29692 31166])
            ("semantic-collector-per-buffer-list" variable nil nil [31722 31815])
            ("make-variable-buffer-local" code nil nil [31816 31880])
            ("semantic-collector-list" variable nil nil [31882 31969])
            ("semantic-collector-abstract" type
               (:members 
                  ( ("buffer" variable
                       (:documentation "Originating buffer for this collector.
Some collectors use a given buffer as a starting place while looking up
tags."
                        :type "buffer")
                        nil nil)
                    ("cache" variable
                       (:documentation "Cache of tags.
These tags are re-used during a completion session.
Sometimes these tags are cached between completion sessions."
                        :default-value "nil"
                        :type "(or null semanticdb-find-result-with-nil)")
                        nil nil)
                    ("last-all-completions" variable
                       (:documentation "Last result of `all-completions'.
This result can be used for refined completions as `last-prefix' gets
closer to a specific result."
                        :type "semanticdb-find-result-with-nil")
                        nil nil)
                    ("last-prefix" variable
                       (:documentation "The last queried prefix.
This prefix can be used to cache intermediate completion offers.
making the action of homing in on a token faster."
                        :protection ":protected"
                        :type "string")
                        nil nil)
                    ("last-completion" variable
                       (:documentation "The last calculated completion.
This completion is calculated and saved for future use."
                        :type "(or null string)")
                        nil nil)
                    ("last-whitespace-completion" variable
                       (:documentation "The last whitespace completion.
For partial completion, SPC will disambiguate over whitespace type
characters.  This is the last calculated version."
                        :type "(or null string)")
                        nil nil)
                    ("current-exact-match" variable
                       (:documentation "The list of matched tags.
When tokens are matched, they are added to this list."
                        :protection ":protected"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [31971 33621])
            ("semantic-collector-analyze-completions" type
               (:superclasses "semantic-collector-abstract"
                :members 
                  ( ("context" variable
                       (:documentation "An analysis context.
Specifies some context location from whence completion lists will be drawn."
                        :type "semantic-analyze-context")
                        nil nil)
                    ("first-pass-completions" variable
                       (:documentation "List of valid completion tags.
This list of tags is generated when completion starts.  All searches
derive from this list."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [33654 34298])
            ("semantic-collector-calculate-completions-raw" function
               (:parent "semantic-collector-analyze-completions"
                :arguments ("obj" "prefix" "completionlist"))
                nil [34300 34991])
            ("semantic-collector-cleanup" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [34993 35120])
            ("semantic-collector-next-action" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "partial"))
                nil [35122 36100])
            ("semantic-collector-last-prefix=" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "last-prefix"))
                nil [36102 36344])
            ("semantic-collector-get-cache" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [36346 36579])
            ("semantic-collector-calculate-completions-raw" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "prefix" "completionlist"))
                nil [36581 37306])
            ("semantic-collector-calculate-completions" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "prefix" "partial"))
                nil [37308 40070])
            ("semantic-collector-try-completion-whitespace" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "prefix"))
                nil [40072 41402])
            ("semantic-collector-current-exact-match" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [41405 41787])
            ("semantic-collector-current-whitespace-completion" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [41789 42033])
            ("semantic-collector-get-match" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [42035 42448])
            ("semantic-collector-all-completions" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "prefix"))
                nil [42450 42751])
            ("semantic-collector-try-completion" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj" "prefix"))
                nil [42753 43144])
            ("semantic-collector-calculate-cache" function
               (:parent "semantic-collector-abstract"
                :arguments ("obj"))
                nil [43146 43283])
            ("semantic-collector-flush" function
               (:parent "semantic-collector-abstract"
                :arguments ("this"))
                nil [43285 43627])
            ("semantic-collector-buffer-abstract" type
               (:superclasses "semantic-collector-abstract"
                :type "class")
                nil [43647 43848])
            ("constructor" function
               (:parent "semantic-collector-buffer-abstract"
                :arguments ("this" "newname" "fields"))
                nil [43850 44445])
            ("semantic-collector-buffer-flush" function (:arguments ("newcache")) nil [44501 44814])
            ("add-hook" code nil nil [44816 44905])
            ("semantic-collector-buffer-deep" type
               (:superclasses "semantic-collector-buffer-abstract"
                :type "class")
                nil [44946 45190])
            ("semantic-collector-calculate-cache" function
               (:parent "semantic-collector-buffer-deep"
                :arguments ("obj"))
                nil [45192 45557])
            ("semantic-collector-project-abstract" type
               (:superclasses "semantic-collector-abstract"
                :members 
                  ( ("path" variable
                       (:documentation "List of database tables to search.
At creation time, it can be anything accepted by
`semanticdb-find-translate-path' as a PATH argument."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [45594 46001])
            ("semantic-collector-project" type
               (:superclasses "semantic-collector-project-abstract"
                :type "class")
                nil [46022 46147])
            ("semantic-collector-calculate-completions-raw" function
               (:parent "semantic-collector-project"
                :arguments ("obj" "prefix" "completionlist"))
                nil [46150 46390])
            ("semantic-collector-project-brutish" type
               (:superclasses "semantic-collector-project-abstract"
                :type "class")
                nil [46419 46552])
            ("declare-function" code nil nil [46554 46642])
            ("semantic-collector-calculate-completions-raw" function
               (:parent "semantic-collector-project-brutish"
                :arguments ("obj" "prefix" "completionlist"))
                nil [46644 46933])
            ("semantic-collector-local-members" type
               (:superclasses "semantic-collector-project-abstract"
                :members 
                  ( ("scope" variable
                       (:documentation "The scope the local members are being completed from."
                        :default-value "nil"
                        :type "(or null semantic-scope-cache)")
                        nil nil))                  
                :type "class")
                nil [46971 47240])
            ("semantic-collector-calculate-completions-raw" function
               (:parent "semantic-collector-local-members"
                :arguments ("obj" "prefix" "completionlist"))
                nil [47242 47659])
            ("semantic-displayor-abstract" type
               (:members 
                  ( ("table" variable
                       (:documentation "List of tags this displayor is showing."
                        :protection ":protected"
                        :default-value "nil"
                        :type "(or null semanticdb-find-result-with-nil)")
                        nil nil)
                    ("last-prefix" variable
                       (:documentation "Prefix associated with slot `table'"
                        :protection ":protected"
                        :type "string")
                        nil nil))                  
                :type "class")
                nil [48631 49164])
            ("semantic-displayor-cleanup" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [49166 49293])
            ("semantic-displayor-next-action" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [49295 49678])
            ("semantic-displayor-set-completions" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj" "table" "prefix"))
                nil [49680 49900])
            ("semantic-displayor-show-request" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [49902 50036])
            ("semantic-displayor-focus-request" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [50038 50191])
            ("semantic-displayor-scroll-request" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [50193 50376])
            ("semantic-displayor-focus-previous" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [50378 50513])
            ("semantic-displayor-focus-next" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [50515 50642])
            ("semantic-displayor-current-focus" function
               (:parent "semantic-displayor-abstract"
                :arguments ("obj"))
                nil [50644 50844])
            ("semantic-completion-displayor-format-tag-function" variable
               (:user-visible-flag t
                :default-value (function semantic-format-tag-name))
                nil [50871 51080])
            ("semantic-displayor-traditional" type
               (:superclasses "semantic-displayor-abstract"
                :type "class")
                nil [51082 51380])
            ("semantic-displayor-show-request" function
               (:parent "semantic-displayor-traditional"
                :arguments ("obj"))
                nil [51382 51787])
            ("semantic-displayor-focus-abstract" type
               (:superclasses "semantic-displayor-abstract"
                :members 
                  ( ("focus" variable
                       (:documentation "A tag index from `table' which has focus.
Multiple calls to the display function can choose to focus on a
given tag, by highlighting its location."
                        :protection ":protected"
                        :type "number")
                        nil nil)
                    ("find-file-focus" variable
                       (:documentation "Non-nil if focusing requires a tag's buffer be in memory."
                        :static-flag t
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [51851 52490])
            ("semantic-displayor-next-action" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj"))
                nil [52492 53051])
            ("semantic-displayor-set-completions" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj" "table" "prefix"))
                nil [53053 53275])
            ("semantic-displayor-focus-previous" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj"))
                nil [53277 53717])
            ("semantic-displayor-focus-next" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj"))
                nil [53719 54167])
            ("semantic-displayor-focus-tag" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj"))
                nil [54169 54440])
            ("semantic-displayor-current-focus" function
               (:parent "semantic-displayor-focus-abstract"
                :arguments ("obj"))
                nil [54442 55203])
            ("semantic-displayor-traditional-with-focus-highlight" type
               (:interfaces ("semantic-displayor-traditional")
                :superclasses "semantic-displayor-focus-abstract"
                :members 
                  ( ("find-file-focus" variable (:default-value "t") nil nil))                  
                :type "class")
                nil [55312 55801])
            ("semantic-displayor-focus-request" function
               (:parent "semantic-displayor-traditional-with-focus-highlight"
                :arguments ("obj"))
                nil [55803 57957])
            ("semantic-displayor-tooltip-mode" variable (:default-value (quote standard)) nil [58210 58968])
            ("semantic-displayor-tooltip-initial-max-tags" variable (:default-value 5) nil [58985 59215])
            ("semantic-displayor-tooltip-max-tags" variable (:default-value 25) nil [59217 59891])
            ("semantic-displayor-tooltip" type
               (:superclasses "semantic-displayor-traditional"
                :members 
                  ( ("mode" variable
                       (:documentation "See `semantic-displayor-tooltip-mode'."
                        :default-value "(symbol-value (quote semantic-displayor-tooltip-mode))")
                        nil nil)
                    ("max-tags-initial" variable
                       (:documentation "See `semantic-displayor-tooltip-initial-max-tags'."
                        :default-value "(symbol-value (quote semantic-displayor-tooltip-initial-max-tags))")
                        nil nil)
                    ("typing-count" variable
                       (:documentation "Counter holding how many times the user types space or tab continuously before showing tags."
                        :default-value "0"
                        :type "integer")
                        nil nil)
                    ("shown" variable
                       (:documentation "Flag representing whether tooltip has been shown yet."
                        :default-value "nil"
                        :type "boolean")
                        nil nil))                  
                :type "class")
                nil [59894 60733])
            ("initialize-instance" function
               (:parent "semantic-displayor-tooltip"
                :arguments ("obj" "args"))
                nil [60735 60927])
            ("tooltip-mode" variable nil nil [60929 60950])
            ("semantic-displayor-show-request" function
               (:parent "semantic-displayor-tooltip"
                :arguments ("obj"))
                nil [60952 63875])
            ("if" code nil nil [63918 64143])
            ("semantic-displayor-point-position" function nil nil [64146 64873])
            ("tooltip-frame-parameters" variable nil nil [64876 64909])
            ("declare-function" code nil nil [64910 64982])
            ("semantic-displayor-tooltip-show" function (:arguments ("text")) nil [64984 65433])
            ("semantic-displayor-scroll-request" function
               (:parent "semantic-displayor-tooltip"
                :arguments ("obj"))
                nil [65435 65703])
            ("semantic-displayor-ghost" type
               (:superclasses "semantic-displayor-focus-abstract"
                :members 
                  ( ("ghostoverlay" variable
                       (:documentation "The overlay the ghost text is displayed in."
                        :type "overlay")
                        nil nil)
                    ("first-show" variable
                       (:documentation "Non nil if we have not seen our first show request."
                        :default-value "t")
                        nil nil))                  
                :type "class")
                nil [65794 66297])
            ("semantic-displayor-next-action" function
               (:parent "semantic-displayor-ghost"
                :arguments ("obj"))
                nil [66299 66669])
            ("semantic-displayor-cleanup" function
               (:parent "semantic-displayor-ghost"
                :arguments ("obj"))
                nil [66671 66887])
            ("semantic-displayor-set-completions" function
               (:parent "semantic-displayor-ghost"
                :arguments ("obj" "table" "prefix"))
                nil [66889 67109])
            ("semantic-displayor-show-request" function
               (:parent "semantic-displayor-ghost"
                :arguments ("obj"))
                nil [67112 67568])
            ("semantic-displayor-focus-request" function
               (:parent "semantic-displayor-ghost"
                :arguments ("obj"))
                nil [67570 68956])
            ("semantic-complete-inline-custom-type" variable (:default-value (append (quote (radio)) (mapcar (lambda (class) (let* ((C (intern (car class))) (doc (documentation-property C (quote variable-documentation))) (doc1 (car (split-string doc "
")))) (list (quote const) :tag doc1 C))) (eieio-build-class-alist semantic-displayor-abstract t)))) nil [69049 69502])
            ("semantic-complete-inline-analyzer-displayor-class" variable
               (:user-visible-flag t
                :default-value (quote semantic-displayor-traditional))
                nil [69504 69722])
            ("semantic-complete-read-tag-buffer-deep" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [69724 70586])
            ("semantic-complete-read-tag-local-members" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [70588 71428])
            ("semantic-complete-read-tag-project" function (:arguments ("prompt" "default-tag" "initial-input" "history")) nil [71430 72300])
            ("semantic-complete-inline-tag-project" function nil nil [72302 74123])
            ("semantic-complete-read-tag-analyzer" function (:arguments ("prompt" "context" "history")) nil [74125 75474])
            ("semantic-complete-inline-analyzer" function (:arguments ("context")) nil [75476 77460])
            ("semantic-complete-inline-analyzer-idle-displayor-class" variable
               (:user-visible-flag t
                :default-value (quote semantic-displayor-ghost))
                nil [77462 77692])
            ("semantic-complete-inline-analyzer-idle" function (:arguments ("context")) nil [77694 78375])
            ("semantic-complete-jump-local" function (:user-visible-flag t) nil [78394 78823])
            ("semantic-complete-jump" function (:user-visible-flag t) nil [78840 79284])
            ("semantic-complete-jump-local-members" function (:user-visible-flag t) nil [79301 79861])
            ("semantic-complete-analyze-and-replace" function (:user-visible-flag t) nil [79878 80564])
            ("semantic-complete-analyze-inline" function (:user-visible-flag t) nil [80581 81534])
            ("semantic-complete-analyze-inline-idle" function (:user-visible-flag t) nil [81551 82372])
            ("semantic-complete-self-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82389 83329])
            ("semantic-complete-inline-project" function (:user-visible-flag t) nil [83346 84009])
            ("semantic/complete" package nil nil [84011 84039]))          
      :file "complete.el.gz"
      :pointmax 84200
      :fsize 21144
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 64143 . 64144) (symbol 63899 . 63915) (open-paren 63898 . 63899) (close-paren 4628 . 4629) (symbol 4530 . 4547) (open-paren 4529 . 4530) (close-paren 4351 . 4352) (symbol 4320 . 4337) (open-paren 4319 . 4320)))
    (semanticdb-table "lex.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/fw" include nil nil [7518 7540])
            ("semantic-lex-map-symbols" function (:arguments ("fun" "table" "property")) nil [7590 8001])
            ("semantic-flex-keywords-obarray" variable nil nil [8180 8357])
            ("make-variable-buffer-local" code nil nil [8358 8418])
            ("semantic-lex-keyword-invalid" function (:arguments ("name")) nil [8420 8580])
            ("semantic-lex-keyword-symbol" function (:arguments ("name")) nil [8582 8811])
            ("semantic-lex-keyword-p" function (:arguments ("name")) nil [8813 9028])
            ("semantic-lex-keyword-set" function (:arguments ("name" "value")) nil [9030 9199])
            ("semantic-lex-keyword-value" function (:arguments ("name")) nil [9201 9484])
            ("semantic-lex-keyword-put" function (:arguments ("name" "property" "value")) nil [9486 9748])
            ("semantic-lex-keyword-get" function (:arguments ("name" "property")) nil [9750 10000])
            ("semantic-lex-make-keyword-table" function (:arguments ("specs" "propspecs")) nil [10002 10937])
            ("semantic-lex-map-keywords" function (:arguments ("fun" "property")) nil [10939 11260])
            ("semantic-lex-keywords" function (:arguments ("property")) nil [11262 11574])
            ("semantic-lex-unterminated-syntax-end-function" variable nil nil [11599 11653])
            ("semantic-lex-analysis-bounds" variable nil nil [11654 11691])
            ("semantic-lex-end-point" variable nil nil [11692 11723])
            ("semantic-lex-token-bounds" function (:arguments ("token")) nil [11725 11945])
            ("semantic-lex-token-start" function (:arguments ("token")) nil [11947 12133])
            ("semantic-lex-token-end" function (:arguments ("token")) nil [12135 12317])
            ("semantic-lex-unterminated-syntax-detected" function (:arguments ("syntax")) nil [12319 12848])
            ("semantic-lex-types-obarray" variable nil nil [13104 13200])
            ("make-variable-buffer-local" code nil nil [13201 13257])
            ("semantic-lex-type-invalid" function (:arguments ("type")) nil [13259 13418])
            ("semantic-lex-type-symbol" function (:arguments ("type")) nil [13420 13630])
            ("semantic-lex-type-p" function (:arguments ("type")) nil [13632 13802])
            ("semantic-lex-type-set" function (:arguments ("type" "value")) nil [13804 13970])
            ("semantic-lex-type-value" function (:arguments ("type" "noerror")) nil [13972 14348])
            ("semantic-lex-type-put" function (:arguments ("type" "property" "value" "add")) nil [14350 14836])
            ("semantic-lex-type-get" function (:arguments ("type" "property" "noerror")) nil [14838 15236])
            ("semantic-lex-preset-default-types" function nil nil [15238 16105])
            ("semantic-lex-make-type-table" function (:arguments ("specs" "propspecs")) nil [16107 17873])
            ("semantic-lex-map-types" function (:arguments ("fun" "property")) nil [17875 18186])
            ("semantic-lex-types" function (:arguments ("property")) nil [18188 18488])
            ("semantic-lex-analyzer" variable (:default-value (quote semantic-flex)) nil [18535 18736])
            ("make-variable-buffer-local" code nil nil [18737 18788])
            ("semantic-lex-tokens" variable (:default-value (quote ((bol) (charquote) (close-paren) (comment) (newline) (open-paren) (punctuation) (semantic-list) (string) (symbol) (whitespace)))) nil [18790 22131])
            ("semantic-lex-syntax-modifications" variable nil nil [22133 22504])
            ("make-variable-buffer-local" code nil nil [22505 22568])
            ("semantic-lex-syntax-table" variable nil nil [22570 22697])
            ("make-variable-buffer-local" code nil nil [22698 22753])
            ("semantic-lex-comment-regex" variable nil nil [22755 22997])
            ("make-variable-buffer-local" code nil nil [22998 23054])
            ("semantic-lex-number-expression" variable (:default-value (eval-when-compile (concat "\\(" "\\<[0-9]+[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[.][eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<[0-9]+[.][fFdD]\\>" "\\|" "\\<[0-9]+[.]" "\\|" "[.][0-9]+\\([eE][-+]?[0-9]+\\)?[fFdD]?\\>" "\\|" "\\<[0-9]+[eE][-+]?[0-9]+[fFdD]?\\>" "\\|" "\\<0[xX][0-9a-fA-F]+[lL]?\\>" "\\|" "\\<[0-9]+[lLfFdD]?\\>" "\\)"))) nil [23056 24330])
            ("make-variable-buffer-local" code nil nil [24331 24391])
            ("semantic-lex-depth" variable nil nil [24393 24499])
            ("make-variable-buffer-local" code nil nil [24500 24548])
            ("semantic-lex-unterminated-syntax-end-function" variable (:default-value (lambda (syntax syntax-start lex-end) lex-end)) nil [24550 25122])
            ("declare-function" code nil nil [25158 25209])
            ("semantic-lex-test" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25211 25747])
            ("semantic-lex-debug" variable nil nil [25749 25832])
            ("semantic-lex-debug" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25834 26313])
            ("semantic-lex-highlight-token" function (:arguments ("token")) nil [26315 26628])
            ("semantic-lex-one-token" function (:arguments ("analyzers")) nil [27016 27272])
            ("semantic-lex-end-point" variable nil nil [27274 27365])
            ("semantic-lex-current-depth" variable nil nil [27367 27466])
            ("semantic-lex-maximum-depth" variable nil nil [27468 27582])
            ("semantic-lex-token-stream" variable nil nil [27584 27670])
            ("semantic-lex-analysis-bounds" variable nil nil [27672 27753])
            ("semantic-lex-block-streams" variable nil nil [27755 27985])
            ("define-obsolete-variable-alias" code nil nil [27987 28084])
            ("semantic-lex-reset-functions" variable nil nil [28085 28333])
            ("semantic-lex-block-stack" variable nil nil [28362 28399])
            ("semantic-lex-debug-break" function (:arguments ("token")) nil [28489 28887])
            ("define-lex" function (:arguments ("name" "doc" "analyzers")) nil [28889 32364])
            ("semantic-lex-token" function (:arguments ("symbol" "start" "end" "str")) nil [32564 33314])
            ("semantic-lex-token-p" function (:arguments ("thing")) nil [33316 33662])
            ("semantic-lex-token-with-text-p" function (:arguments ("thing")) nil [33664 33976])
            ("semantic-lex-token-without-text-p" function (:arguments ("thing")) nil [33978 34262])
            ("semantic-lex-expand-block-specs" function (:arguments ("specs")) nil [34283 35475])
            ("semantic-lex-push-token" function (:arguments ("token" "blockspecs")) nil [35479 36313])
            ("semantic-lex-token-class" function (:arguments ("token")) nil [36315 36464])
            ("semantic-lex-token-text" function (:arguments ("token")) nil [36466 36784])
            ("semantic-lex-init" function nil nil [36786 37273])
            ("semantic-lex" function
               (:overloadable t
                :arguments ("start" "end" "depth" "length"))
                nil [37290 38125])
            ("semantic-lex-buffer" function (:arguments ("depth")) nil [38127 38307])
            ("semantic-lex-list" function (:arguments ("semlist" "depth")) nil [38309 38516])
            ("semantic-lex-start-block" function (:arguments ("syntax")) nil [38574 38957])
            ("semantic-lex-end-block" function (:arguments ("syntax")) nil [38959 41312])
            ("semantic-lex-debug-analyzers" variable nil nil [41597 41790])
            ("semantic-lex-unterminated-syntax-protection" function (:arguments ("syntax" "forms")) nil [41792 42519])
            ("put" code nil nil [42520 42599])
            ("define-lex-analyzer" function (:arguments ("name" "doc" "condition" "forms")) nil [42601 44769])
            ("define-lex-regex-analyzer" function (:arguments ("name" "doc" "regexp" "forms")) nil [44771 45092])
            ("define-lex-simple-regex-analyzer" function (:arguments ("name" "doc" "regexp" "toksym" "index" "forms")) nil [45094 45872])
            ("define-lex-block-analyzer" function (:arguments ("name" "doc" "spec1" "specs")) nil [45874 48108])
            ("define-lex-analyzer" code nil nil [48164 48371])
            ("define-lex-analyzer" code nil nil [48373 48913])
            ("define-lex-simple-regex-analyzer" code nil nil [48915 49045])
            ("define-lex-regex-analyzer" code nil nil [49047 49835])
            ("define-lex-regex-analyzer" code nil nil [49837 50105])
            ("define-lex-regex-analyzer" code nil nil [50107 50845])
            ("define-lex-regex-analyzer" code nil nil [50847 51109])
            ("define-lex-simple-regex-analyzer" code nil nil [51111 51333])
            ("define-lex-regex-analyzer" code nil nil [51335 51614])
            ("define-lex-simple-regex-analyzer" code nil nil [51616 51789])
            ("define-lex-simple-regex-analyzer" code nil nil [51791 51934])
            ("define-lex-analyzer" code nil nil [51936 53184])
            ("define-lex-regex-analyzer" code nil nil [53186 53880])
            ("define-lex-simple-regex-analyzer" code nil nil [53882 54079])
            ("define-lex-simple-regex-analyzer" code nil nil [54081 54279])
            ("define-lex-regex-analyzer" code nil nil [54281 54600])
            ("define-lex-regex-analyzer" code nil nil [54602 55256])
            ("define-lex-regex-analyzer" code nil nil [55258 55944])
            ("define-lex-regex-analyzer" code nil nil [55946 56622])
            ("semantic-comment-lexer" function (:lexical-analyzer-flag t) nil [56725 57075])
            ("semantic-simple-lexer" function (:lexical-analyzer-flag t) nil [57095 57598])
            ("define-lex-keyword-type-analyzer" function (:arguments ("name" "doc" "syntax")) nil [57760 58296])
            ("define-lex-sexp-type-analyzer" function (:arguments ("name" "doc" "syntax" "token")) nil [58298 58818])
            ("define-lex-regex-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches" "default")) nil [58820 60076])
            ("define-lex-string-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches" "default")) nil [60078 61655])
            ("define-lex-block-type-analyzer" function (:arguments ("name" "doc" "syntax" "matches")) nil [61657 65453])
            ("semantic-lex-catch-errors" function (:arguments ("symbol" "forms")) nil [65693 67309])
            ("put" code nil nil [67310 67366])
            ("add-hook" code nil nil [67401 68061])
            ("semantic-alias-obsolete" code nil nil [68155 68234])
            ("semantic-alias-obsolete" code nil nil [68235 68310])
            ("semantic-alias-obsolete" code nil nil [68311 68388])
            ("semantic-alias-obsolete" code nil nil [68389 68488])
            ("semantic-alias-obsolete" code nil nil [68489 68570])
            ("semantic-alias-obsolete" code nil nil [68571 68656])
            ("semantic-alias-obsolete" code nil nil [68657 68742])
            ("semantic-alias-obsolete" code nil nil [68743 68830])
            ("semantic-alias-obsolete" code nil nil [68831 68910])
            ("semantic-alias-obsolete" code nil nil [68911 68986])
            ("semantic-alias-obsolete" code nil nil [68987 69058])
            ("semantic-flex-tokens" variable (:default-value semantic-lex-tokens) nil [69281 69404])
            ("semantic-flex-unterminated-syntax-end-function" variable (:default-value (lambda (syntax syntax-start flex-end) flex-end)) nil [69406 69982])
            ("semantic-flex-extensions" variable nil nil [69984 70399])
            ("make-variable-buffer-local" code nil nil [70400 70454])
            ("semantic-flex-syntax-modifications" variable nil nil [70456 70828])
            ("make-variable-buffer-local" code nil nil [70829 70893])
            ("semantic-ignore-comments" variable (:default-value t) nil [70895 71066])
            ("make-variable-buffer-local" code nil nil [71067 71121])
            ("semantic-flex-enable-newlines" variable nil nil [71123 71341])
            ("make-variable-buffer-local" code nil nil [71342 71401])
            ("semantic-flex-enable-whitespace" variable nil nil [71403 71619])
            ("make-variable-buffer-local" code nil nil [71620 71681])
            ("semantic-flex-enable-bol" variable nil nil [71683 71902])
            ("make-variable-buffer-local" code nil nil [71903 71957])
            ("semantic-number-expression" variable (:default-value semantic-lex-number-expression) nil [71959 72076])
            ("make-variable-buffer-local" code nil nil [72077 72133])
            ("semantic-flex-depth" variable nil nil [72135 72243])
            ("make-variable-buffer-local" code nil nil [72244 72293])
            ("semantic-flex" function (:arguments ("start" "end" "depth" "length")) nil [72295 81517])
            ("semantic/lex" package nil nil [81519 81542]))          
      :file "lex.el.gz"
      :pointmax 81693
      :fsize 19916
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 35476 . 35477) (symbol 34265 . 34281) (open-paren 34264 . 34265)))
    (semanticdb-table "html.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1155 1174])
            ("semantic/format" include nil nil [1175 1201])
            ("sgml-mode" include nil nil [1202 1222])
            ("semantic-command-separation-character" variable nil nil [1224 1270])
            ("semantic-html-super-regex" variable (:default-value "<\\(h[1-9]\\|title\\|script\\|body\\|a +href\\)\\>") nil [1272 1431])
            ("semantic-html-section-list" variable (:default-value (quote (("title" 1) ("script" 1) ("body" 1) ("a" 11) ("h1" 2) ("h2" 3) ("h3" 4) ("h4" 5) ("h5" 6) ("h6" 7) ("h7" 8) ("h8" 9) ("h9" 10)))) nil [1433 1712])
            ("semantic-parse-region" function
               (:parent "html-mode"
                :override-function-flag t
                :arguments ("&rest" "ignore"))
                nil [1714 2065])
            ("semantic-parse-changes" function
               (:parent "html-mode"
                :override-function-flag t)
                nil [2067 2227])
            ("semantic-html-expand-tag" function (:arguments ("tag")) nil [2229 2494])
            ("semantic-html-components" function (:arguments ("tag")) nil [2496 2618])
            ("semantic-html-parse-headings" function nil nil [2620 3401])
            ("semantic-html-set-endpoint" function (:arguments ("metataglist" "pnt")) nil [3403 3927])
            ("semantic-html-new-section-tag" function (:arguments ("name" "members" "level" "start" "end")) nil [3929 4439])
            ("semantic-html-extract-section-name" function nil nil [4441 5116])
            ("semantic-html-recursive-combobulate-list" function (:arguments ("sectionlist" "level")) nil [5118 7068])
            ("semantic-sb-tag-children-to-expand" function
               (:parent "html-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [7070 7217])
            ("semantic-imenu-expandable-tag-classes" variable nil nil [7263 7309])
            ("semantic-imenu-bucketize-file" variable nil nil [7310 7348])
            ("semantic-imenu-bucketize-type-members" variable nil nil [7349 7395])
            ("semantic-default-html-setup" function nil nil [7412 8196])
            ("define-child-mode" code nil nil [8198 8315])
            ("semantic/html" package nil nil [8317 8341]))          
      :file "html.el.gz"
      :pointmax 8494
      :fsize 3306
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "senator.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [1160 1175])
            ("semantic" include nil nil [1176 1195])
            ("semantic/ctxt" include nil nil [1196 1220])
            ("semantic/decorate" include nil nil [1221 1249])
            ("semantic/format" include nil nil [1250 1276])
            ("semantic/find" include nil nil [1297 1321])
            ("declare-function" code nil nil [1370 1444])
            ("declare-function" code nil nil [1445 1514])
            ("declare-function" code nil nil [1515 1578])
            ("declare-function" code nil nil [1579 1646])
            ("declare-function" code nil nil [1647 1709])
            ("declare-function" code nil nil [1710 1754])
            ("senator" customgroup (:user-visible-flag t) nil [1774 1839])
            ("senator-step-at-tag-classes" variable nil nil [1856 2184])
            ("make-variable-buffer-local" code nil nil [2200 2257])
            ("senator-step-at-start-end-tag-classes" variable nil nil [2274 2967])
            ("make-variable-buffer-local" code nil nil [2983 3050])
            ("senator-highlight-found" variable nil nil [3052 3193])
            ("make-variable-buffer-local" code nil nil [3194 3247])
            ("senator-momentary-highlight-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray30")) (((class color) (background light)) (:background "gray70"))))
                :type "face")
                nil [3259 3509])
            ("senator-momentary-highlight-tag" function (:arguments ("tag")) nil [3533 3779])
            ("senator-step-at-start-end-p" function (:arguments ("tag")) nil [3781 4046])
            ("senator-skip-p" function (:arguments ("tag")) nil [4048 4251])
            ("senator-middle-of-tag-p" function (:arguments ("pos" "tag")) nil [4253 4434])
            ("senator-step-at-parent" function (:arguments ("tag")) nil [4436 5009])
            ("senator-previous-tag-or-parent" function (:arguments ("pos")) nil [5011 5818])
            ("senator-search-tag-name" function (:arguments ("tag")) nil [5842 6887])
            ("senator-search-ignore-tag-classes" variable (:default-value (quote (code block))) nil [6889 7089])
            ("senator-search-default-tag-filter" function (:arguments ("tag")) nil [7091 7336])
            ("senator-search-tag-filter-functions" variable (:default-value (quote (senator-search-default-tag-filter))) nil [7338 7578])
            ("senator-search" function (:arguments ("searcher" "text" "bound" "noerror" "count")) nil [7580 9322])
            ("senator-next-tag" function (:user-visible-flag t) nil [9364 10705])
            ("senator-previous-tag" function (:user-visible-flag t) nil [10722 12067])
            ("senator-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [12090 12471])
            ("senator-re-search-forward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [12473 12889])
            ("senator-word-search-forward" function
               (:user-visible-flag t
                :arguments ("word" "bound" "noerror" "count"))
                nil [12891 13286])
            ("senator-search-backward" function
               (:user-visible-flag t
                :arguments ("string" "bound" "noerror" "count"))
                nil [13288 13688])
            ("senator-re-search-backward" function
               (:user-visible-flag t
                :arguments ("regexp" "bound" "noerror" "count"))
                nil [13690 14125])
            ("senator-word-search-backward" function
               (:user-visible-flag t
                :arguments ("word" "bound" "noerror" "count"))
                nil [14127 14541])
            ("senator-last-search-type" variable nil nil [14595 14688])
            ("senator-nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [14690 15122])
            ("senator-nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [15124 15560])
            ("senator-nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [15562 15893])
            ("senator-nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [15895 16238])
            ("senator-nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [16240 16608])
            ("senator-nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [16610 16990])
            ("senator--search-filter" variable nil nil [16992 17027])
            ("senator-search-set-tag-class-filter" function
               (:user-visible-flag t
                :arguments ("classes"))
                nil [17029 18228])
            ("senator-fold-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [18375 18519])
            ("senator-unfold-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [18521 18669])
            ("senator-fold-tag-toggle" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [18671 18907])
            ("semantic-up-reference" function
               (:overloadable t
                :arguments ("tag"))
                nil [18959 19326])
            ("senator-go-to-up-reference" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [19343 20403])
            ("semantic-up-reference-default" function (:arguments ("tag")) nil [20405 22380])
            ("senator-isearch-semantic-mode" variable nil nil [22382 22502])
            ("make-variable-buffer-local" code nil nil [22503 22562])
            ("senator-beginning-of-defun" function (:arguments ("arg")) nil [22564 23150])
            ("senator-end-of-defun" function (:arguments ("arg")) nil [23152 23784])
            ("senator-narrow-to-defun" function (:user-visible-flag t) nil [23786 24161])
            ("senator-mark-defun" function (:user-visible-flag t) nil [24163 24709])
            ("senator-tag-ring" variable (:default-value (make-ring 20)) nil [25033 25118])
            ("senator-copy-tag" function (:user-visible-flag t) nil [25135 25574])
            ("senator-kill-tag" function (:user-visible-flag t) nil [25591 26103])
            ("senator-yank-tag" function (:user-visible-flag t) nil [26120 26615])
            ("senator-copy-tag-to-register" function
               (:user-visible-flag t
                :arguments ("register" "kill-flag"))
                nil [26632 27598])
            ("senator-transpose-tags-up" function (:user-visible-flag t) nil [27615 28825])
            ("senator-transpose-tags-down" function (:user-visible-flag t) nil [28842 29440])
            ("senator-lazy-highlight-update" function nil nil [29485 29682])
            ("senator-isearch-search-fun" function nil nil [29840 30300])
            ("senator-isearch-toggle-semantic-mode" function (:user-visible-flag t) nil [30302 30707])
            ("senator-old-isearch-search-fun" variable nil nil [30709 30810])
            ("senator-isearch-mode-hook" function nil nil [30812 31878])
            ("semantic/senator" package nil nil [32173 32200]))          
      :file "senator.el.gz"
      :pointmax 32359
      :fsize 7805
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1321 . 1322) (symbol 1279 . 1296) (open-paren 1278 . 1279)))
    (semanticdb-table "edit.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [2180 2199])
            ("semantic-after-partial-cache-change-hook" variable nil nil [2211 2663])
            ("define-obsolete-variable-alias" code nil nil [2665 2756])
            ("semantic-change-functions" variable (:default-value (quote (semantic-edits-change-function-handle-changes))) nil [2757 3009])
            ("semantic-reparse-needed-change-hook" variable nil nil [3011 3257])
            ("semantic-no-reparse-needed-change-hook" variable nil nil [3259 3580])
            ("define-obsolete-variable-alias" code nil nil [3582 3693])
            ("semantic-edits-new-change-functions" variable nil nil [3694 3865])
            ("define-obsolete-variable-alias" code nil nil [3867 3984])
            ("semantic-edits-delete-change-functions" variable nil nil [3985 4222])
            ("semantic-edits-move-change-hook" variable nil nil [4224 4479])
            ("define-obsolete-variable-alias" code nil nil [4481 4600])
            ("semantic-edits-reparse-change-functions" variable nil nil [4601 4799])
            ("semantic-edits-incremental-reparse-failed-hook" variable nil nil [4801 4976])
            ("semantic-varalias-obsolete" code nil nil [4978 5117])
            ("semantic-edits-verbose-flag" variable nil nil [5119 5321])
            ("semantic-change-function" function (:arguments ("start" "end" "length")) nil [5460 5828])
            ("semantic-changes-in-region" function (:arguments ("start" "end" "buffer")) nil [5830 6427])
            ("semantic-edits-change-function-handle-changes" function (:arguments ("start" "end" "length")) nil [6429 8293])
            ("semantic-edits-flush-change" function (:arguments ("change")) nil [8295 8525])
            ("semantic-edits-flush-changes" function nil nil [8527 8792])
            ("semantic-edits-change-in-one-tag-p" function (:arguments ("change" "hits")) nil [8794 9440])
            ("semantic-edits-os" function (:arguments ("change")) nil [9770 9964])
            ("semantic-edits-oe" function (:arguments ("change")) nil [9966 10155])
            ("semantic-edits-change-leaf-tag" function (:arguments ("change")) nil [10157 11549])
            ("semantic-edits-change-between-tags" function (:arguments ("change")) nil [11551 13757])
            ("semantic-edits-change-over-tags" function (:arguments ("change")) nil [13759 18412])
            ("semantic-parse-changes-failed" function (:arguments ("args")) nil [18523 18908])
            ("semantic-edits-incremental-fail" function nil nil [18910 19261])
            ("semantic-edits-incremental-parser" function nil nil [19278 20312])
            ("semantic-edits-assert-valid-region" function nil nil [20314 20591])
            ("semantic-edits-incremental-parser-1" function nil nil [20593 33904])
            ("defalias" code nil nil [33959 34038])
            ("semantic-edits-splice-remove" function (:arguments ("oldtags" "parent" "cachelist")) nil [34501 36761])
            ("semantic-edits-splice-insert" function (:arguments ("newtags" "parent" "cachelist")) nil [36763 38095])
            ("semantic-edits-splice-replace" function (:arguments ("oldtag" "newtag")) nil [38097 39346])
            ("add-hook" code nil nil [39348 39442])
            ("semantic/edit" package nil nil [39444 39468]))          
      :file "edit.el.gz"
      :pointmax 39621
      :fsize 11068
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "tag.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/fw" include nil nil [1789 1811])
            ("semantic/lex" include nil nil [1812 1835])
            ("declare-function" code nil nil [1837 1906])
            ("declare-function" code nil nil [1907 1956])
            ("declare-function" code nil nil [1957 2016])
            ("declare-function" code nil nil [2017 2076])
            ("semantic-tag-version" variable
               (:constant-flag t
                :default-value "2.0")
                nil [2078 2172])
            ("semantic-tag-incompatible-version" variable
               (:constant-flag t
                :default-value "1.0")
                nil [2174 2418])
            ("semantic-tag-name" function (:arguments ("tag")) nil [3179 3493])
            ("semantic-tag-class" function (:arguments ("tag")) nil [3495 4243])
            ("semantic-tag-attributes" function (:arguments ("tag")) nil [4245 4419])
            ("semantic-tag-properties" function (:arguments ("tag")) nil [4421 4594])
            ("semantic-tag-overlay" function (:arguments ("tag")) nil [4596 4873])
            ("semantic--tag-overlay-cdr" function (:arguments ("tag")) nil [4875 5037])
            ("semantic--tag-set-overlay" function (:arguments ("tag" "overlay")) nil [5039 5226])
            ("semantic-tag-start" function (:arguments ("tag")) nil [5228 5426])
            ("semantic-tag-end" function (:arguments ("tag")) nil [5428 5620])
            ("semantic-tag-bounds" function (:arguments ("tag")) nil [5622 5782])
            ("semantic-tag-set-bounds" function (:arguments ("tag" "start" "end")) nil [5784 6070])
            ("semantic-tag-in-buffer-p" function (:arguments ("tag")) nil [6072 6427])
            ("semantic--tag-get-property" function (:arguments ("tag" "property")) nil [6429 6699])
            ("semantic-tag-buffer" function (:arguments ("tag")) nil [6701 7282])
            ("semantic-tag-mode" function (:arguments ("tag")) nil [7284 8192])
            ("semantic--tag-attributes-cdr" function (:arguments ("tag")) nil [8194 8362])
            ("semantic-tag-put-attribute" function (:arguments ("tag" "attribute" "value")) nil [8364 8888])
            ("semantic-tag-put-attribute-no-side-effect" function (:arguments ("tag" "attribute" "value")) nil [8890 9520])
            ("semantic-tag-get-attribute" function (:arguments ("tag" "attribute")) nil [9522 9811])
            ("semantic--tag-properties-cdr" function (:arguments ("tag")) nil [9859 10027])
            ("semantic--tag-put-property" function (:arguments ("tag" "property" "value")) nil [10029 10503])
            ("semantic--tag-put-property-no-side-effect" function (:arguments ("tag" "property" "value")) nil [10505 11169])
            ("semantic-tag-file-name" function (:arguments ("tag")) nil [11171 11603])
            ("semantic-tag-p" function (:arguments ("tag")) nil [11637 12058])
            ("semantic-tag-of-class-p" function (:arguments ("tag" "class")) nil [12060 12189])
            ("semantic-tag-type-members" function (:arguments ("tag")) nil [12191 12379])
            ("semantic-tag-type" function (:arguments ("tag")) nil [12381 12706])
            ("semantic-tag-with-position-p" function (:arguments ("tag")) nil [12708 12971])
            ("semantic-equivalent-tag-p" function (:arguments ("tag1" "tag2")) nil [12973 13656])
            ("semantic-tag-similar-with-subtags-p" function (:arguments ("tag1" "tag2" "ignorable-attributes")) nil [13659 14056])
            ("semantic-tag-of-type-p" function (:arguments ("tag" "type")) nil [14058 15385])
            ("semantic-tag-type-compound-p" function (:arguments ("tag")) nil [15387 15834])
            ("semantic-tag-faux-p" function (:arguments ("tag")) nil [15836 16201])
            ("semantic-tag-make-plist" function (:arguments ("args")) nil [16262 16988])
            ("semantic-tag" function (:arguments ("name" "class" "attributes")) nil [16990 17359])
            ("semantic-tag-new-variable" function (:arguments ("name" "type" "default-value" "attributes")) nil [17361 17875])
            ("semantic-tag-new-function" function (:arguments ("name" "type" "arg-list" "attributes")) nil [17877 18374])
            ("semantic-tag-new-type" function (:arguments ("name" "type" "members" "parents" "attributes")) nil [18376 19446])
            ("semantic-tag-new-include" function (:arguments ("name" "system-flag" "attributes")) nil [19448 19899])
            ("semantic-tag-new-package" function (:arguments ("name" "detail" "attributes")) nil [19901 20287])
            ("semantic-tag-new-code" function (:arguments ("name" "detail" "attributes")) nil [20289 20616])
            ("semantic-tag-set-faux" function (:arguments ("tag")) nil [20618 20854])
            ("semantic-tag-set-name" function (:arguments ("tag" "name")) nil [20856 20945])
            ("semantic-create-tag-proxy" function (:arguments ("function" "data")) nil [21362 21910])
            ("semantic-tag-set-proxy" function (:arguments ("tag" "proxy" "filename")) nil [21912 22372])
            ("semantic-tag-resolve-proxy" function (:arguments ("tag")) nil [22374 22772])
            ("semantic-tag-clone" function (:arguments ("tag" "name")) nil [22807 23223])
            ("semantic-tag-copy" function (:arguments ("tag" "name" "keep-file")) nil [23225 24728])
            ("semantic--tag-copy-properties" function (:arguments ("tag1" "tag2")) nil [24986 25313])
            ("semantic-tag-deep-copy-one-tag" function (:arguments ("tag" "filter")) nil [25334 26254])
            ("semantic--tag-deep-copy-attributes" function (:arguments ("attrs" "filter")) nil [26256 26852])
            ("semantic--tag-deep-copy-value" function (:arguments ("value" "filter")) nil [26854 27460])
            ("semantic--tag-deep-copy-tag-list" function (:arguments ("tags" "filter")) nil [27462 28064])
            ("semantic-tag-modifiers" function (:arguments ("tag")) nil [28110 28262])
            ("semantic-tag-docstring" function (:arguments ("tag" "buffer")) nil [28264 29056])
            ("semantic-tag-named-parent" function (:arguments ("tag")) nil [29107 29408])
            ("semantic-tag-type-superclasses" function (:arguments ("tag")) nil [29436 30065])
            ("semantic--tag-find-parent-by-name" function (:arguments ("name" "supers")) nil [30067 30673])
            ("semantic-tag-type-superclass-protection" function (:arguments ("tag" "parentstring")) nil [30675 31781])
            ("semantic-tag-type-interfaces" function (:arguments ("tag")) nil [31783 31988])
            ("semantic-tag-function-arguments" function (:arguments ("tag")) nil [32022 32226])
            ("semantic-tag-function-throws" function (:arguments ("tag")) nil [32228 32431])
            ("semantic-tag-function-parent" function (:arguments ("tag")) nil [32433 32735])
            ("semantic-tag-function-destructor-p" function (:arguments ("tag")) nil [32737 32954])
            ("semantic-tag-function-constructor-p" function (:arguments ("tag")) nil [32956 33177])
            ("semantic-tag-variable-default" function (:arguments ("tag")) nil [33211 33425])
            ("semantic-tag-variable-constant-p" function (:arguments ("tag")) nil [33427 33648])
            ("semantic-tag-include-system-p" function (:arguments ("tag")) nil [33681 33900])
            ("semantic-tag-include-filename" function
               (:overloadable t
                :arguments ("tag"))
                nil [33902 34334])
            ("semantic-tag-include-filename-default" function (:arguments ("tag")) nil [34336 34487])
            ("semantic-tag-code-detail" function (:arguments ("tag")) nil [34517 34707])
            ("semantic-tag-new-alias" function (:arguments ("name" "meta-tag-class" "value" "attributes")) nil [34738 35171])
            ("semantic-tag-alias-class" function (:arguments ("tag")) nil [35173 35306])
            ("semantic-tag-alias-definition" function
               (:overloadable t
                :arguments ("tag"))
                nil [35308 35726])
            ("semantic-tag-components" function
               (:overloadable t
                :arguments ("tag"))
                nil [35792 36076])
            ("semantic-tag-components-default" function (:arguments ("tag")) nil [36078 36394])
            ("semantic-tag-components-with-overlays" function
               (:overloadable t
                :arguments ("tag"))
                nil [36396 36927])
            ("semantic-tag-components-with-overlays-default" function (:arguments ("tag")) nil [36929 38125])
            ("semantic-tag-children-compatibility" function (:arguments ("tag" "positiononly")) nil [38127 38523])
            ("semantic-narrow-to-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [38618 38890])
            ("semantic-with-buffer-narrowed-to-current-tag" function (:arguments ("body")) nil [38892 39109])
            ("put" code nil nil [39110 39185])
            ("add-hook" code nil nil [39186 39316])
            ("semantic-with-buffer-narrowed-to-tag" function (:arguments ("tag" "body")) nil [39318 39488])
            ("put" code nil nil [39489 39556])
            ("add-hook" code nil nil [39557 39679])
            ("semantic--tag-hook-value" variable nil nil [40028 40061])
            ("semantic-tag-add-hook" function (:arguments ("tag" "hook" "function" "append")) nil [40063 40677])
            ("semantic-tag-remove-hook" function (:arguments ("tag" "hook" "function")) nil [40679 41252])
            ("semantic--tag-run-hooks" function (:arguments ("tag" "hook" "args")) nil [41254 41809])
            ("semantic--tag-unlink-list-from-buffer" function (:arguments ("tags")) nil [41966 42177])
            ("semantic--tag-unlink-from-buffer" function (:arguments ("tag")) nil [42179 42840])
            ("semantic--tag-link-list-to-buffer" function (:arguments ("tags")) nil [42842 43043])
            ("semantic--tag-link-to-buffer" function (:arguments ("tag")) nil [43045 43844])
            ("semantic--tag-unlink-cache-from-buffer" function nil nil [43846 44124])
            ("semantic--buffer-cache" variable nil nil [44126 44157])
            ("semantic--tag-link-cache-to-buffer" function nil nil [44159 44723])
            ("semantic--tag-expanded-p" function (:arguments ("tag")) nil [44939 45395])
            ("semantic-tag-expand-function" variable nil nil [45397 45909])
            ("make-variable-buffer-local" code nil nil [45910 45968])
            ("semantic--tag-expand" function (:arguments ("tag")) nil [45970 47704])
            ("semantic-foreign-tag-invalid" function (:arguments ("tag")) nil [47726 47882])
            ("semantic-foreign-tag-p" function (:arguments ("tag")) nil [47884 48167])
            ("semantic-foreign-tag-check" function (:arguments ("tag")) nil [48169 48356])
            ("semantic-foreign-tag" function (:arguments ("tag")) nil [48358 49173])
            ("semantic-obtain-foreign-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [49225 49465])
            ("semantic-insert-foreign-tag-default" function (:arguments ("foreign-tag")) nil [49467 49840])
            ("semantic-insert-foreign-tag" function
               (:overloadable t
                :arguments ("foreign-tag"))
                nil [49842 50201])
            ("semantic-insert-foreign-tag" function
               (:parent "log-edit-mode"
                :override-function-flag t
                :arguments ("foreign-tag"))
                nil [50230 50429])
            ("semantic-insert-foreign-tag" function
               (:parent "change-log-mode"
                :override-function-flag t
                :arguments ("foreign-tag"))
                nil [50431 50632])
            ("semantic-token-version" variable
               (:constant-flag t
                :default-value semantic-tag-version)
                nil [50656 50712])
            ("semantic-token-incompatible-version" variable
               (:constant-flag t
                :default-value semantic-tag-incompatible-version)
                nil [50713 50795])
            ("semantic-token-type-parent" function (:arguments ("tag")) nil [50797 51230])
            ("make-obsolete" code nil nil [51232 51374])
            ("semantic-alias-obsolete" code nil nil [51376 51488])
            ("semantic-varalias-obsolete" code nil nil [51490 51612])
            ("semantic/tag" package nil nil [51614 51637]))          
      :file "tag.el.gz"
      :pointmax 51788
      :fsize 13437
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "analyze.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [2732 2745])
            ("semantic" include nil nil [2747 2766])
            ("semantic/format" include nil nil [2767 2793])
            ("semantic/ctxt" include nil nil [2794 2818])
            ("semantic/scope" include nil nil [2819 2844])
            ("semantic/sort" include nil nil [2845 2869])
            ("semantic/analyze/fcn" include nil nil [2870 2901])
            ("semantic/find" include nil nil [2922 2946])
            ("declare-function" code nil nil [2949 3002])
            ("declare-function" code nil nil [3003 3070])
            ("semantic-analyze-error-stack" variable nil nil [3082 3176])
            ("semantic-analyze-push-error" function (:arguments ("err")) nil [3178 3328])
            ("semantic-analyze-context" type
               (:members 
                  ( ("bounds" variable
                       (:documentation "The bounds of this context.
Usually bound to the dimension of a single symbol or command."
                        :type "list")
                        nil nil)
                    ("prefix" variable
                       (:documentation "List of tags defining local text.
This can be nil, or a list where the last element can be a string
representing text that may be incomplete.  Preceding elements
must be semantic tags representing variables or functions
called in a dereference sequence."
                        :type "list")
                        nil nil)
                    ("prefixclass" variable
                       (:documentation "Tag classes expected at this context.
These are classes for tags, such as 'function, or 'variable."
                        :type "list")
                        nil nil)
                    ("prefixtypes" variable
                       (:documentation "List of tags defining types for :prefix.
This list is one shorter than :prefix.  Each element is a semantic
tag representing a type matching the semantic tag in the same
position in PREFIX."
                        :type "list")
                        nil nil)
                    ("scope" variable
                       (:documentation "List of tags available in scopetype.
See `semantic-analyze-scoped-tags' for details."
                        :type "(or null semantic-scope-cache)")
                        nil nil)
                    ("buffer" variable
                       (:documentation "The buffer this context is derived from."
                        :type "buffer")
                        nil nil)
                    ("errors" variable (:documentation "Any errors thrown an caught during analysis.") nil nil))                  
                :type "class")
                nil [3508 4875])
            ("semantic-analyze-context-assignment" type
               (:superclasses "semantic-analyze-context"
                :members 
                  ( ("assignee" variable
                       (:documentation "A sequence of tags for an assignee.
This is a variable into which some value is being placed.  The last
item in the list is the variable accepting the value.  Earlier
tags represent the variables being dereferenced to get to the
assignee."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [4877 5312])
            ("semantic-analyze-context-functionarg" type
               (:superclasses "semantic-analyze-context"
                :members 
                  ( ("function" variable
                       (:documentation "A sequence of tags for a function.
This is a function being called.  The cursor will be in the position
of an argument.
The last tag in :function is the function being called.  Earlier
tags represent the variables being dereferenced to get to the
function."
                        :type "list")
                        nil nil)
                    ("index" variable
                       (:documentation "The index of the argument for this context.
If a function takes 4 arguments, this value should be bound to
the values 1 through 4."
                        :type "integer")
                        nil nil)
                    ("argument" variable
                       (:documentation "A sequence of tags for the :index argument.
The argument can accept a value of some type, and this contains the
tag for that definition.  It should be a tag, but might
be just a string in some circumstances."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [5314 6254])
            ("semantic-analyze-context-return" type
               (:superclasses "semantic-analyze-context"
                :type "class")
                nil [6256 6474])
            ("semantic-analyze-type-constraint" function
               (:parent "semantic-analyze-context"
                :arguments ("context" "desired-type"))
                nil [6541 7365])
            ("semantic-analyze-type-constraint" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [7367 7585])
            ("semantic-analyze-type-constraint" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [7587 7814])
            ("semantic-analyze-interesting-tag" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [7816 8240])
            ("semantic-analyze-interesting-tag" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [8242 8471])
            ("semantic-analyze-interesting-tag" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [8473 8701])
            ("semantic-analyze-find-tag-sequence" function
               (:overloadable t
                :arguments ("sequence" "scope" "typereturn" "throwsym"))
                nil [8920 9664])
            ("semantic-analyze-find-tag-sequence-default" function (:arguments ("sequence" "scope" "typereturn" "throwsym")) nil [9666 13010])
            ("semantic-analyze-find-tag" function (:arguments ("name" "tagclass" "scope")) nil [13012 15090])
            ("semantic-analyze-current-symbol" function
               (:overloadable t
                :arguments ("analyzehookfcn" "position"))
                nil [15175 16227])
            ("semantic-analyze-current-symbol-default" function (:arguments ("analyzehookfcn" "position")) nil [16229 17623])
            ("semantic-analyze-current-context" function
               (:overloadable t
                :user-visible-flag t
                :arguments ("position"))
                nil [17702 19237])
            ("semantic-analyze-current-context-default" function (:arguments ("position")) nil [19239 24532])
            ("semantic-analyze-dereference-alias" function (:arguments ("taglist")) nil [24534 25078])
            ("semantic-adebug-analyze" function
               (:user-visible-flag t
                :arguments ("ctxt"))
                nil [25081 25751])
            ("declare-function" code nil nil [25820 25879])
            ("semantic-analyze-pulse" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [25881 26187])
            ("semantic-analyze-summary-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [26189 26442])
            ("semantic-analyze-princ-sequence" function (:arguments ("sequence" "prefix" "buff")) nil [26444 27084])
            ("semantic-analyze-show" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [27086 27860])
            ("semantic-analyze-show" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [27862 28095])
            ("semantic-analyze-show" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [28097 28479])
            ("semantic-analyze-pop-to-context" function (:arguments ("context")) nil [28481 29036])
            ("semantic/analyze" package nil nil [29038 29065]))          
      :file "analyze.el.gz"
      :pointmax 29224
      :fsize 8580
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 2946 . 2947) (symbol 2904 . 2921) (open-paren 2903 . 2904) (close-paren 2745 . 2746) (symbol 2714 . 2731) (open-paren 2713 . 2714)))
    (semanticdb-table "decorate.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1097 1116])
            ("pulse" include nil nil [1117 1133])
            ("semantic-highlight-tag" function (:arguments ("tag" "face")) nil [1170 1547])
            ("semantic-unhighlight-tag" function (:arguments ("tag")) nil [1549 1839])
            ("semantic-momentary-highlight-one-tag-line" function (:arguments ("tag" "face")) nil [1879 2216])
            ("semantic-momentary-highlight-tag" function (:arguments ("tag" "face")) nil [2257 2873])
            ("semantic-set-tag-face" function (:arguments ("tag" "face")) nil [2875 3028])
            ("semantic-set-tag-invisible" function (:arguments ("tag" "visible")) nil [3030 3263])
            ("semantic-tag-invisible-p" function (:arguments ("tag")) nil [3265 3406])
            ("semantic-set-tag-intangible" function (:arguments ("tag" "tangible")) nil [3408 3764])
            ("semantic-tag-intangible-p" function (:arguments ("tag")) nil [3766 4027])
            ("semantic-overlay-signal-read-only" function (:arguments ("overlay" "after" "start" "end" "len")) nil [4029 4493])
            ("semantic-set-tag-read-only" function (:arguments ("tag" "writable")) nil [4495 5114])
            ("semantic-tag-read-only-p" function (:arguments ("tag")) nil [5116 5490])
            ("semantic-tag-secondary-overlays" function (:arguments ("tag")) nil [5783 5938])
            ("semantic-tag-create-secondary-overlay" function (:arguments ("tag" "link-hook")) nil [5940 7119])
            ("semantic-tag-get-secondary-overlay" function (:arguments ("tag" "property")) nil [7121 7530])
            ("semantic-tag-delete-secondary-overlay" function (:arguments ("tag" "overlay-or-property")) nil [7532 8301])
            ("semantic--tag-unlink-copy-secondary-overlays" function (:arguments ("tag")) nil [8303 9106])
            ("semantic--tag-unlink-secondary-overlays" function (:arguments ("tag")) nil [9108 10116])
            ("semantic--tag-link-secondary-overlays" function (:arguments ("tag")) nil [10118 10486])
            ("semantic-set-tag-folded" function (:arguments ("tag" "folded")) nil [10579 11705])
            ("declare-function" code nil nil [11707 11762])
            ("semantic-set-tag-folded-isearch" function (:arguments ("overlay")) nil [11764 11969])
            ("semantic-tag-folded-p" function (:arguments ("tag")) nil [11971 12109])
            ("semantic/decorate" package nil nil [12111 12139]))          
      :file "decorate.el.gz"
      :pointmax 12176
      :fsize 3472
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "db-global.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cedet-global" include nil nil [1015 1038])
            ("semantic/db-find" include nil nil [1039 1066])
            ("semantic/symref/global" include nil nil [1067 1100])
            ("eieio-opt" include nil nil [1179 1199])
            ("eieio" include nil nil [1160 1176])
            ("semanticdb-enable-gnu-global-databases" function
               (:user-visible-flag t
                :arguments ("mode" "noerror"))
                nil [1231 2473])
            ("semanticdb-enable-gnu-global-hook" function nil nil [2475 2678])
            ("semanticdb-project-database-global" type
               (:interfaces ("eieio-instance-tracker")
                :superclasses "semanticdb-project-database"
                :type "class")
                nil [2680 2924])
            ("semanticdb-enable-gnu-global-in-buffer" function
               (:user-visible-flag t
                :arguments ("dont-err-if-not-available"))
                nil [2926 3768])
            ("semanticdb-table-global" type
               (:superclasses "semanticdb-search-results-table"
                :members 
                  ( ("major-mode" variable (:default-value "nil") nil nil))                  
                :type "class")
                nil [3783 3944])
            ("object-print" function
               (:parent "semanticdb-table-global"
                :arguments ("obj" "strings"))
                nil [3946 4197])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "buffer"))
                nil [4199 4475])
            ("semanticdb-get-database-tables" function
               (:parent "semanticdb-project-database-global"
                :arguments ("obj"))
                nil [4507 5102])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database-global"
                :arguments ("obj" "filename"))
                nil [5104 5367])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "name" "tags"))
                nil [5467 6036])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "regex" "tags"))
                nil [6038 6492])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "prefix" "tags"))
                nil [6494 7177])
            ("semanticdb-deep-find-tags-by-name-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "name" "tags"))
                nil [7349 7658])
            ("semanticdb-deep-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "regex" "tags"))
                nil [7660 8000])
            ("semanticdb-deep-find-tags-for-completion-method" function
               (:parent "semanticdb-table-global"
                :arguments ("table" "prefix" "tags"))
                nil [8002 8358])
            ("semantic/db-global" package nil nil [8360 8389]))          
      :file "db-global.el.gz"
      :pointmax 8552
      :fsize 2988
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1202 . 1203) (symbol 1103 . 1120) (open-paren 1102 . 1103)))
    (semanticdb-table "tag-ls.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1315 1334])
            ("semantic/find" include nil nil [1335 1359])
            ("semantic-tag-similar-ignorable-attributes" variable (:default-value (quote (:prototype-flag))) nil [1780 1918])
            ("semantic--tag-similar-names-p" function
               (:overloadable t
                :arguments ("tag1" "tag2" "blankok"))
                nil [1920 2257])
            ("semantic--tag-similar-names-p-default" function (:arguments ("tag1" "tag2" "blankok")) nil [2259 2749])
            ("semantic--tag-similar-types-p" function
               (:overloadable t
                :arguments ("tag1" "tag2"))
                nil [2751 3161])
            ("semantic--tag-similar-types-p-default" function (:arguments ("tag1" "tag2")) nil [3163 3417])
            ("semantic--tag-attribute-similar-p" function
               (:overloadable t
                :arguments ("attr" "value1" "value2" "ignorable-attributes"))
                nil [3419 4037])
            ("semantic--tag-attribute-similar-p-default" function (:arguments ("attr" "value1" "value2" "ignorable-attributes")) nil [4039 4811])
            ("semantic-tag-similar-p" function
               (:overloadable t
                :arguments ("tag1" "tag2" "ignorable-attributes"))
                nil [4813 5518])
            ("semantic-tag-similar-p-default" function (:arguments ("tag1" "tag2" "ignorable-attributes")) nil [5607 7197])
            ("semantic-tag-full-package" function
               (:overloadable t
                :arguments ("tag" "stream-or-buffer"))
                nil [7418 8301])
            ("semantic-tag-full-package-default" function (:arguments ("tag" "stream")) nil [8303 8629])
            ("semantic-tag-full-name" function
               (:overloadable t
                :arguments ("tag" "stream-or-buffer"))
                nil [8631 9785])
            ("make-obsolete-overload" code nil nil [9787 9898])
            ("semantic-tag-full-name-default" function (:arguments ("tag" "stream")) nil [9900 10239])
            ("semantic-tag-calculate-parent" function
               (:overloadable t
                :arguments ("tag"))
                nil [10438 10743])
            ("semantic-tag-calculate-parent-default" function (:arguments ("tag")) nil [10745 11031])
            ("semantic-tag-protection" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [11033 11897])
            ("make-obsolete-overload" code nil nil [11899 12012])
            ("semantic-tag-protection-default" function (:arguments ("tag" "parent")) nil [12014 12670])
            ("semantic-tag-package-protected-p" function (:arguments ("tag" "parent" "currentpackage")) nil [12672 13744])
            ("semantic-tag-protected-p" function (:arguments ("tag" "protection" "parent")) nil [13746 14522])
            ("semantic-tag-abstract-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [14524 14947])
            ("make-obsolete-overload" code nil nil [14949 15060])
            ("semantic-tag-abstract-p-default" function (:arguments ("tag" "parent")) nil [15062 15474])
            ("semantic-tag-leaf-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [15476 15807])
            ("make-obsolete-overload" code nil nil [15809 15912])
            ("semantic-tag-leaf-p-default" function (:arguments ("tag" "parent")) nil [15914 16348])
            ("semantic-tag-static-p" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [16350 16682])
            ("semantic-tag-static-p-default" function (:arguments ("tag" "parent")) nil [16684 17061])
            ("semantic-tag-prototype-p" function
               (:overloadable t
                :arguments ("tag"))
                nil [17078 17284])
            ("semantic-tag-prototype-p-default" function (:arguments ("tag")) nil [17286 17695])
            ("semantic/tag-ls" package nil nil [17697 17723]))          
      :file "tag-ls.el.gz"
      :pointmax 17880
      :fsize 5290
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "db-file.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [961 983])
            ("cedet-files" include nil nil [984 1006])
            ("data-debug" include nil nil [1007 1028])
            ("semanticdb-file-version" variable (:default-value semantic-version) nil [1030 1140])
            ("semanticdb-file-incompatible-version" variable (:default-value "1.4") nil [1141 1254])
            ("semanticdb-default-file-name" variable (:default-value "semantic.cache") nil [1272 1407])
            ("semanticdb-default-save-directory" variable (:default-value (locate-user-emacs-file "semanticdb" ".semanticdb")) nil [1409 2070])
            ("semanticdb-persistent-path" variable (:default-value (quote (always))) nil [2072 2775])
            ("define-obsolete-variable-alias" code nil nil [2777 2886])
            ("semanticdb-save-database-functions" variable nil nil [2887 3119])
            ("semanticdb-dir-sep-char" variable (:default-value (if (boundp (quote directory-sep-char)) (symbol-value (quote directory-sep-char)) 47)) nil [3121 3390])
            ("semanticdb-fix-pathname" function (:arguments ("dir")) nil [3392 3607])
            ("semanticdb-project-database-file" type
               (:interfaces ("eieio-persistent")
                :superclasses "semanticdb-project-database"
                :members 
                  ( ("file-header-line" variable (:default-value ";; SEMANTICDB Tags save file") nil nil)
                    ("do-backups" variable (:default-value "nil") nil nil)
                    ("semantic-tag-version" variable
                       (:documentation "The version of the tags saved.
The default value is 1.4.  In semantic 1.4 there was no versioning, so
when those files are loaded, this becomes the version number.
To save the version number, we must hand-set this version string."
                        :default-value "1.4")
                        nil nil)
                    ("semanticdb-version" variable
                       (:documentation "The version of the object system saved.
The default value is 1.4.  In semantic 1.4, there was no versioning,
so when those files are loaded, this becomes the version number.
To save the version number, we must hand-set this version string."
                        :default-value "1.4")
                        nil nil))                  
                :type "class")
                nil [3921 4846])
            ("semanticdb-create-database" function
               (:parent "semanticdb-project-database-file"
                :arguments ("dbc" "directory"))
                nil [4861 5991])
            ("declare-function" code nil nil [6006 6051])
            ("semanticdb-load-database" function (:arguments ("filename")) nil [6053 7361])
            ("semanticdb-file-loaded-p" function (:arguments ("filename")) nil [7363 7550])
            ("semanticdb-file-directory-exists-p" function
               (:parent "semanticdb-project-database-file"
                :arguments ("DB" "suppress-questions"))
                nil [7552 8346])
            ("semanticdb-save-db" function
               (:parent "semanticdb-project-database-file"
                :arguments ("DB" "suppress-questions"))
                nil [8348 9748])
            ("semanticdb-live-p" function
               (:parent "semanticdb-project-database"
                :arguments ("obj"))
                nil [9750 10041])
            ("semanticdb-live-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10043 10368])
            ("semanticdb-data-debug-on-write-error" variable nil nil [10370 10560])
            ("declare-function" code nil nil [10562 10617])
            ("object-write" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10619 12106])
            ("semanticdb-write-directory-p" function
               (:parent "semanticdb-project-database-file"
                :arguments ("obj"))
                nil [12129 13445])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database-file"
                :arguments ("obj" "filename"))
                nil [13476 13811])
            ("semanticdb-file-name-non-directory" function
               (:parent "semanticdb-project-database-file"
                :arguments ("dbclass"))
                nil [13813 14027])
            ("semanticdb-file-name-directory" function
               (:parent "semanticdb-project-database-file"
                :arguments ("dbclass" "directory"))
                nil [14029 14568])
            ("semanticdb-cache-filename" function
               (:parent "semanticdb-project-database-file"
                :arguments ("dbclass" "path"))
                nil [14570 15044])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-project-database-file"
                :arguments ("obj"))
                nil [15046 15189])
            ("semanticdb-cleanup-cache-files" function
               (:user-visible-flag t
                :arguments ("noerror"))
                nil [15214 16693])
            ("semantic/db-file" package nil nil [16695 16722]))          
      :file "db-file.el.gz"
      :pointmax 16881
      :fsize 5682
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "find.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1633 1652])
            ("semantic/tag" include nil nil [1653 1676])
            ("declare-function" code nil nil [1678 1739])
            ("declare-function" code nil nil [1740 1809])
            ("semantic-find-tag-by-overlay" function (:arguments ("positionormarker" "buffer")) nil [2000 3093])
            ("semantic-find-tag-by-overlay-in-region" function (:arguments ("start" "end" "buffer")) nil [3110 3762])
            ("semantic-find-tag-by-overlay-next" function (:arguments ("start" "buffer")) nil [3779 4779])
            ("semantic-find-tag-by-overlay-prev" function (:arguments ("start" "buffer")) nil [4796 5856])
            ("semantic-find-tag-parent-by-overlay" function (:arguments ("tag")) nil [5873 6322])
            ("semantic-current-tag" function nil nil [6339 6581])
            ("semantic-current-tag-parent" function nil nil [6598 6868])
            ("semantic-current-tag-of-class" function (:arguments ("class")) nil [6870 7290])
            ("semantic--find-tags-by-function" function (:arguments ("predicate" "table")) nil [8362 8996])
            ("semantic--find-tags-by-macro" function (:arguments ("form" "table")) nil [9198 9604])
            ("semantic-find-first-tag-by-name" function (:arguments ("name" "table")) nil [9647 9956])
            ("semantic-find-tags-by-name" function (:arguments ("name" "table")) nil [9958 10287])
            ("semantic-find-tags-for-completion" function (:arguments ("prefix" "table")) nil [10289 10861])
            ("semantic-find-tags-by-name-regexp" function (:arguments ("regexp" "table")) nil [10863 11350])
            ("semantic-find-tags-by-class" function (:arguments ("class" "table")) nil [11352 11701])
            ("semantic-filter-tags-by-class" function (:arguments ("class" "table")) nil [11703 12087])
            ("semantic-find-tags-by-type" function (:arguments ("type" "table")) nil [12089 12528])
            ("semantic-find-tags-of-compound-type" function (:arguments ("table")) nil [12530 12868])
            ("semantic-find-tags-by-scope-protection" function
               (:overloadable t
                :arguments ("scopeprotection" "parent" "table"))
                nil [12885 13651])
            ("semantic-find-tags-by-scope-protection-default" function (:arguments ("scopeprotection" "parent" "table")) nil [13653 14538])
            ("semantic-find-tags-included" function
               (:overloadable t
                :arguments ("table"))
                nil [14555 14752])
            ("semantic-find-tags-included-default" function (:arguments ("table")) nil [14754 15036])
            ("semantic-deep-find-tags-by-name" function (:arguments ("name" "table")) nil [15057 15412])
            ("semantic-deep-find-tags-for-completion" function (:arguments ("prefix" "table")) nil [15414 15796])
            ("semantic-deep-find-tags-by-name-regexp" function (:arguments ("regexp" "table")) nil [15798 16325])
            ("semantic-find-tags-external-children-of-type" function (:arguments ("type" "table")) nil [16351 16725])
            ("semantic-find-tags-subclasses-of-type" function (:arguments ("type" "table")) nil [16727 17217])
            ("semantic-brute-find-first-tag-by-name" function (:arguments ("name" "streamorbuffer" "search-parts" "search-include")) nil [17661 18552])
            ("semantic-brute-find-tag-by-class" function (:arguments ("class" "streamorbuffer" "search-parts" "search-includes")) nil [18554 19104])
            ("semantic-brute-find-tag-standard" function (:arguments ("streamorbuffer" "search-parts" "search-includes")) nil [19106 19582])
            ("semantic-brute-find-tag-by-type" function (:arguments ("type" "streamorbuffer" "search-parts" "search-includes")) nil [19584 20242])
            ("semantic-brute-find-tag-by-type-regexp" function (:arguments ("regexp" "streamorbuffer" "search-parts" "search-includes")) nil [20244 20954])
            ("semantic-brute-find-tag-by-name-regexp" function (:arguments ("regex" "streamorbuffer" "search-parts" "search-includes")) nil [20956 21384])
            ("semantic-brute-find-tag-by-property" function (:arguments ("property" "value" "streamorbuffer" "search-parts" "search-includes")) nil [21386 21836])
            ("semantic-brute-find-tag-by-attribute" function (:arguments ("attr" "streamorbuffer" "search-parts" "search-includes")) nil [21838 22297])
            ("semantic-brute-find-tag-by-attribute-value" function (:arguments ("attr" "value" "streamorbuffer" "search-parts" "search-includes")) nil [22299 22842])
            ("semantic-brute-find-tag-by-function" function (:arguments ("function" "streamorbuffer" "search-parts" "search-includes")) nil [22844 24263])
            ("semantic-brute-find-first-tag-by-function" function (:arguments ("function" "streamorbuffer" "search-parts" "search-includes")) nil [24265 25096])
            ("semantic-brute-find-tag-by-position" function (:arguments ("position" "streamorbuffer" "nomedian")) nil [25162 26303])
            ("semantic-brute-find-innermost-tag-by-position" function (:arguments ("position" "streamorbuffer" "nomedian")) nil [26305 27383])
            ("semantic/find" package nil nil [27385 27409]))          
      :file "find.el.gz"
      :pointmax 27562
      :fsize 6609
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ctxt.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1169 1188])
            ("semantic-command-separation-character" variable (:default-value ";") nil [1200 1350])
            ("make-variable-buffer-local" code nil nil [1351 1418])
            ("semantic-function-argument-separation-character" variable (:default-value ",") nil [1420 1577])
            ("make-variable-buffer-local" code nil nil [1578 1655])
            ("declare-function" code nil nil [1755 1819])
            ("semantic-up-context" function
               (:overloadable t
                :arguments ("point" "bounds-type"))
                nil [1821 2663])
            ("semantic-up-context-default" function nil nil [2665 2982])
            ("semantic-beginning-of-context" function
               (:overloadable t
                :arguments ("point"))
                nil [2984 3212])
            ("semantic-beginning-of-context-default" function (:arguments ("point")) nil [3214 3491])
            ("semantic-end-of-context" function
               (:overloadable t
                :arguments ("point"))
                nil [3493 3749])
            ("semantic-end-of-context-default" function (:arguments ("point")) nil [3751 4540])
            ("semantic-narrow-to-context" function nil nil [4542 4867])
            ("semantic-with-buffer-narrowed-to-context" function (:arguments ("body")) nil [4869 5067])
            ("put" code nil nil [5068 5139])
            ("add-hook" code nil nil [5140 5266])
            ("semantic-get-local-variables" function
               (:overloadable t
                :arguments ("point"))
                nil [5294 5738])
            ("semantic-get-local-variables-default" function nil nil [5740 7748])
            ("semantic-get-local-arguments" function
               (:overloadable t
                :arguments ("point"))
                nil [7750 9129])
            ("semantic-get-local-arguments-default" function nil nil [9131 9437])
            ("semantic-get-all-local-variables" function
               (:overloadable t
                :arguments ("point"))
                nil [9439 9777])
            ("semantic-get-all-local-variables-default" function (:arguments ("point")) nil [9779 10345])
            ("semantic-end-of-command" function (:overloadable t) nil [10860 11019])
            ("semantic-end-of-command-default" function nil nil [11021 11593])
            ("semantic-beginning-of-command" function (:overloadable t) nil [11595 11766])
            ("semantic-beginning-of-command-default" function nil nil [11768 12447])
            ("semantic-point-at-beginning-of-command" function nil nil [12450 12623])
            ("semantic-point-at-end-of-command" function nil nil [12625 12786])
            ("semantic-narrow-to-command" function nil nil [12788 12985])
            ("semantic-with-buffer-narrowed-to-command" function (:arguments ("body")) nil [12987 13185])
            ("put" code nil nil [13186 13257])
            ("add-hook" code nil nil [13258 13384])
            ("semantic-ctxt-end-of-symbol" function
               (:overloadable t
                :arguments ("point"))
                nil [13386 13700])
            ("semantic-ctxt-end-of-symbol-default" function (:arguments ("point")) nil [13702 15883])
            ("semantic-ctxt-current-symbol" function
               (:overloadable t
                :arguments ("point"))
                nil [15885 16345])
            ("semantic-ctxt-current-symbol-default" function (:arguments ("point")) nil [16347 18616])
            ("semantic-ctxt-current-symbol-and-bounds" function
               (:overloadable t
                :arguments ("point"))
                nil [18619 18883])
            ("semantic-ctxt-current-symbol-and-bounds-default" function (:arguments ("point")) nil [18885 19805])
            ("semantic-ctxt-current-assignment" function
               (:overloadable t
                :arguments ("point"))
                nil [19807 20042])
            ("semantic-ctxt-current-assignment-default" function (:arguments ("point")) nil [20044 20793])
            ("semantic-ctxt-current-function" function
               (:overloadable t
                :arguments ("point"))
                nil [20795 21121])
            ("semantic-ctxt-current-function-default" function (:arguments ("point")) nil [21123 21572])
            ("semantic-ctxt-current-argument" function
               (:overloadable t
                :arguments ("point"))
                nil [21574 21726])
            ("semantic-ctxt-current-argument-default" function (:arguments ("point")) nil [21728 22384])
            ("semantic-ctxt-current-thing" function nil nil [22386 22839])
            ("semantic-ctxt-current-class-list" function
               (:overloadable t
                :arguments ("point"))
                nil [22841 23195])
            ("semantic-ctxt-current-class-list-default" function (:arguments ("point")) nil [23197 23698])
            ("semantic-ctxt-current-mode" function
               (:overloadable t
                :arguments ("point"))
                nil [23715 23994])
            ("semantic-ctxt-current-mode-default" function (:arguments ("point")) nil [23996 24228])
            ("semantic-ctxt-scoped-types" function
               (:overloadable t
                :arguments ("point"))
                nil [24400 24698])
            ("semantic-ctxt-scoped-types-default" function (:arguments ("point")) nil [24700 24924])
            ("semantic-ctxt-imported-packages" function
               (:overloadable t
                :arguments ("point"))
                nil [24926 25318])
            ("semantic/ctxt" package nil nil [25320 25344]))          
      :file "ctxt.el.gz"
      :pointmax 25497
      :fsize 6831
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "mru-bookmark.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1577 1590])
            ("semantic" include nil nil [1592 1611])
            ("eieio-base" include nil nil [1612 1633])
            ("ring" include nil nil [1634 1649])
            ("declare-function" code nil nil [1651 1704])
            ("declare-function" code nil nil [1705 1772])
            ("declare-function" code nil nil [1773 1844])
            ("declare-function" code nil nil [1845 1904])
            ("semantic-bookmark" type
               (:superclasses "eieio-named"
                :members 
                  ( ("tag" variable
                       (:documentation "The TAG this bookmark belongs to."
                        :type "semantic-tag")
                        nil nil)
                    ("parent" variable
                       (:documentation "The tag that is the parent of :tag."
                        :type "(or semantic-tag null)")
                        nil nil)
                    ("offset" variable
                       (:documentation "The offset from `tag' start that is
somehow interesting."
                        :type "number")
                        nil nil)
                    ("filename" variable
                       (:documentation "String the tag belongs to.
Set this when the tag gets unlinked from the buffer it belongs to."
                        :type "string")
                        nil nil)
                    ("frequency" variable
                       (:documentation "Track the frequency this tag is visited."
                        :default-value "0"
                        :type "number")
                        nil nil)
                    ("reason" variable
                       (:documentation "The reason this tag is interesting.
Nice values are 'edit, 'read, 'jump, and 'mark.
 edit - created because the tag text was edited.
 read - created because point lingered in tag text.
 jump - jumped to another tag from this tag.
 mark - created a regular mark in this tag."
                        :default-value "t"
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [1977 2937])
            ("initialize-instance" function
               (:parent "semantic-bookmark"
                :arguments ("sbm" "fields"))
                nil [2939 3316])
            ("semantic-mrub-visit" function
               (:parent "semantic-bookmark"
                :arguments ("sbm"))
                nil [3318 3995])
            ("semantic-mrub-update" function
               (:parent "semantic-bookmark"
                :arguments ("sbm" "point" "reason"))
                nil [3997 4472])
            ("semantic-mrub-preflush" function
               (:parent "semantic-bookmark"
                :arguments ("sbm"))
                nil [4474 5040])
            ("semantic-bookmark-ring" type
               (:members 
                  ( ("ring" variable
                       (:documentation "List of `semantic-bookmark' objects.
This list is maintained as a list with the first item
being the current location, and the rest being a list of
items that were recently visited."
                        :type "ring")
                        nil nil)
                    ("current-index" variable
                       (:documentation "The current index into RING for some operation.
User commands use this to move through the ring, or reset."
                        :default-value "0"
                        :type "number")
                        nil nil))                  
                :type "class")
                nil [5042 5676])
            ("semantic-mru-bookmark-ring" variable (:default-value (semantic-bookmark-ring "Ring" :ring (make-ring 20))) nil [5678 5867])
            ("semantic-mrub-find-nearby-tag" function (:arguments ("point")) nil [5869 6396])
            ("semantic-mrub-push" function
               (:parent "semantic-bookmark-ring"
                :arguments ("sbr" "point" "reason"))
                nil [6398 7220])
            ("semantic-mrub-cache-flush-fcn" function nil nil [7222 7575])
            ("add-hook" code nil nil [7577 7664])
            ("semantic-mrub-last-overlay" variable nil nil [7686 7797])
            ("semantic-mru-bookmark-change-hook-fcn" function (:arguments ("overlay")) nil [7799 8204])
            ("global-semantic-mru-bookmark-mode" variable nil nil [8249 8718])
            ("define-minor-mode" code nil nil [8735 9164])
            ("semantic-mru-bookmark-mode-hook" variable (:user-visible-flag t) nil [9166 9313])
            ("semantic-mru-bookmark-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km "B" (quote semantic-mrub-switch-tags)) km)) nil [9315 9492])
            ("define-minor-mode" code nil nil [9494 10885])
            ("semantic-add-minor-mode" code nil nil [10887 10969])
            ("semantic-mrub-read-history" function nil nil [11034 11120])
            ("semantic-mrub-ring-to-assoc-list" function (:arguments ("ring")) nil [11122 11448])
            ("semantic-mrub-completing-read" function (:arguments ("prompt")) nil [11450 12977])
            ("semantic-mrub-switch-tags" function
               (:user-visible-flag t
                :arguments ("tagmark"))
                nil [12979 13423])
            ("semantic-adebug-mrub" function (:user-visible-flag t) nil [13442 13751])
            ("semantic/mru-bookmark" package nil nil [13754 13786]))          
      :file "mru-bookmark.el.gz"
      :pointmax 13955
      :fsize 4841
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1590 . 1591) (symbol 1559 . 1576) (open-paren 1558 . 1559)))
    (semanticdb-table "db.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("eieio-base" include nil nil [1025 1046])
            ("semantic" include nil nil [1047 1066])
            ("semantic/find" include nil nil [1089 1113])
            ("declare-function" code nil nil [1116 1181])
            ("semanticdb-refresh-references" function (:prototype-flag t) nil [1245 1352])
            ("semanticdb" customgroup (:user-visible-flag t) nil [1369 1465])
            ("semanticdb-database-list" variable nil nil [1467 1538])
            ("semanticdb-new-database-class" variable (:default-value (quote semanticdb-project-database-file)) nil [1540 1813])
            ("make-variable-buffer-local" code nil nil [1814 1873])
            ("semanticdb-default-find-index-class" variable (:default-value (quote semanticdb-find-search-index)) nil [1875 2080])
            ("make-variable-buffer-local" code nil nil [2081 2146])
            ("semanticdb-current-database" variable nil nil [2163 2266])
            ("make-variable-buffer-local" code nil nil [2267 2324])
            ("semanticdb-current-table" variable nil nil [2341 2447])
            ("make-variable-buffer-local" code nil nil [2448 2502])
            ("semanticdb-abstract-table" type
               (:members 
                  ( ("parent-db" variable (:documentation "Database Object containing this table.") nil nil)
                    ("major-mode" variable
                       (:documentation "Major mode this table belongs to.
Sometimes it is important for a program to know if a given table has the
same major mode as the current buffer."
                        :default-value "nil")
                        nil nil)
                    ("tags" variable (:documentation "The tags belonging to this table.") nil nil)
                    ("db-refs" variable
                       (:documentation "List of `semanticdb-table' objects refering to this one.
These aren't saved, but are instead recalculated after load.
See the file semanticdb-ref.el for how this slot is used."
                        :default-value "nil")
                        nil nil)
                    ("index" variable
                       (:documentation "The search index.
Used by semanticdb-find to store additional information about
this table for searching purposes.

Note: This index will not be saved in a persistent file."
                        :type "semanticdb-abstract-search-index")
                        nil nil)
                    ("cache" variable
                       (:documentation "List of cache information for tools.
Any particular tool can cache data to a database at runtime
with `semanticdb-cache-get'.

Using a semanticdb cache does not save any information to a file,
so your cache will need to be recalculated at runtime.  Caches can be
referenced even when the file is not in a buffer.

Note: This index will not be saved in a persistent file."
                        :default-value "nil"
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [2528 4192])
            ("semanticdb-in-buffer-p" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4194 4333])
            ("semanticdb-get-buffer" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4335 4516])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4518 4703])
            ("semanticdb-dirty-p" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4705 4813])
            ("semanticdb-set-dirty" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [4815 5062])
            ("semanticdb-normalize-tags" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj" "tags"))
                nil [5064 5434])
            ("semanticdb-normalize-one-tag" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj" "tag"))
                nil [5436 5881])
            ("object-print" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj" "strings"))
                nil [5883 6389])
            ("semanticdb-abstract-search-index" type
               (:members 
                  ( ("table" variable
                       (:documentation "XRef to the table this belongs to."
                        :type "semanticdb-abstract-table")
                        nil nil))                  
                :type "class")
                nil [6410 6800])
            ("semanticdb-get-table-index" function
               (:parent "semanticdb-abstract-table"
                :arguments ("obj"))
                nil [6802 7232])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-search-index"
                :arguments ("idx" "new-tags"))
                nil [7234 7429])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-search-index"
                :arguments ("idx" "new-tags"))
                nil [7431 7643])
            ("semanticdb-search-results-table" type
               (:superclasses "semanticdb-abstract-table"
                :type "class")
                nil [7775 8049])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-search-results-table"
                :arguments ("obj" "force"))
                nil [8051 8276])
            ("semanticdb-table" type
               (:superclasses "semanticdb-abstract-table"
                :members 
                  ( ("file" variable (:documentation "File name relative to the parent database.
This is for the file whose tags are stored in this TABLE object.") nil nil)
                    ("buffer" variable
                       (:documentation "The buffer associated with this table.
If nil, the table's buffer is no in Emacs.  If it has a value, then
it is in Emacs."
                        :default-value "nil")
                        nil nil)
                    ("dirty" variable
                       (:documentation "Non nil if this table needs to be `Saved'."
                        :default-value "nil")
                        nil nil)
                    ("db-refs" variable
                       (:documentation "List of `semanticdb-table' objects referring to this one.
These aren't saved, but are instead recalculated after load.
See the file semantic/db-ref.el for how this slot is used."
                        :default-value "nil")
                        nil nil)
                    ("pointmax" variable
                       (:documentation "Size of buffer when written to disk.
Checked on retrieval to make sure the file is the same."
                        :default-value "nil")
                        nil nil)
                    ("fsize" variable
                       (:documentation "Size of the file when it was last referenced.
Checked when deciding if a loaded table needs updating from changes
outside of Semantic's control."
                        :default-value "nil")
                        nil nil)
                    ("lastmodtime" variable
                       (:documentation "Last modification time of the file referenced.
Checked when deciding if a loaded table needs updating from changes outside of
Semantic's control."
                        :default-value "nil")
                        nil nil)
                    ("unmatched-syntax" variable (:documentation "List of vectors specifying unmatched syntax.") nil nil)
                    ("lexical-table" variable
                       (:documentation "Table that might be needed by the lexical analyzer.
For C/C++, the C preprocessor macros can be saved here."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [8308 10159])
            ("semanticdb-in-buffer-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10161 10408])
            ("semanticdb-get-buffer" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10410 10808])
            ("semanticdb-set-buffer" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [10810 11014])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11016 11216])
            ("semanticdb-dirty-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11218 11330])
            ("semanticdb-set-dirty" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [11332 11452])
            ("object-print" function
               (:parent "semanticdb-table"
                :arguments ("obj" "strings"))
                nil [11454 11789])
            ("semanticdb-project-database" type
               (:superclasses "eieio-instance-tracker"
                :members 
                  ( ("tracking-symbol" variable (:default-value "semanticdb-database-list") nil nil)
                    ("reference-directory" variable
                       (:documentation "Directory this database refers to.
When a cache directory is specified, then this refers to the directory
this database contains symbols for."
                        :type "string")
                        nil nil)
                    ("new-table-class" variable
                       (:documentation "New tables created for this database are of this class."
                        :default-value "semanticdb-table"
                        :type "class")
                        nil nil)
                    ("cache" variable
                       (:documentation "List of cache information for tools.
Any particular tool can cache data to a database at runtime
with `semanticdb-cache-get'.

Using a semanticdb cache does not save any information to a file,
so your cache will need to be recalculated at runtime.

Note: This index will not be saved in a persistent file."
                        :default-value "nil"
                        :type "list")
                        nil nil)
                    ("tables" variable
                       (:documentation "List of `semantic-db-table' objects."
                        :protection ":protected"
                        :type "semanticdb-abstract-table-list")
                        nil nil))                  
                :type "class")
                nil [11818 12985])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-project-database"
                :arguments ("obj"))
                nil [12987 13174])
            ("semanticdb-dirty-p" function
               (:parent "semanticdb-project-database"
                :arguments ("DB"))
                nil [13176 13581])
            ("object-print" function
               (:parent "semanticdb-project-database"
                :arguments ("obj" "strings"))
                nil [13583 13991])
            ("semanticdb-create-database" function
               (:parent "semanticdb-project-database"
                :arguments ("dbc" "directory"))
                nil [13993 14649])
            ("semanticdb-flush-database-tables" function
               (:parent "semanticdb-project-database"
                :arguments ("db"))
                nil [14651 14793])
            ("semanticdb-create-table" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "file"))
                nil [14795 15475])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database"
                :arguments ("obj" "filename"))
                nil [15477 15742])
            ("semanticdb-get-database" function (:arguments ("filename")) nil [15766 15959])
            ("semanticdb-directory-loaded-p" function (:arguments ("path")) nil [15961 16156])
            ("semanticdb-create-table-for-file" function (:arguments ("filename")) nil [16158 16738])
            ("semanticdb-abstract-cache" type
               (:members 
                  ( ("table" variable
                       (:documentation "Cross reference to the table this belongs to."
                        :type "semanticdb-abstract-table")
                        nil nil))                  
                :type "class")
                nil [16760 17333])
            ("semanticdb-cache-get" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "desired-class"))
                nil [17335 18089])
            ("semanticdb-cache-remove" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "cache"))
                nil [18091 18269])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-cache"
                :arguments ("cache" "new-tags"))
                nil [18271 18448])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-cache"
                :arguments ("cache" "new-tags"))
                nil [18450 18644])
            ("semanticdb-abstract-db-cache" type
               (:members 
                  ( ("db" variable
                       (:documentation "Cross reference to the database this belongs to."
                        :type "semanticdb-project-database")
                        nil nil))                  
                :type "class")
                nil [18646 19233])
            ("semanticdb-cache-get" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "desired-class"))
                nil [19235 19973])
            ("semanticdb-cache-remove" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "cache"))
                nil [19975 20149])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-db-cache"
                :arguments ("cache" "new-tags"))
                nil [20152 20332])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-db-cache"
                :arguments ("cache" "new-tags"))
                nil [20334 20531])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-table"
                :arguments ("obj" "force"))
                nil [20546 21573])
            ("semanticdb-needs-refresh-p" function
               (:parent "semanticdb-table"
                :arguments ("obj"))
                nil [21575 22564])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "new-tags"))
                nil [22591 23593])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "new-tags"))
                nil [23595 24659])
            ("semanticdb-save-db" function
               (:parent "semanticdb-project-database"
                :arguments ("DB" "suppress-questions"))
                nil [24678 24961])
            ("semanticdb-save-current-db" function (:user-visible-flag t) nil [24963 25254])
            ("semanticdb--inhibit-create-file-directory" variable nil nil [25380 25430])
            ("semanticdb-save-all-db" function (:user-visible-flag t) nil [25432 25772])
            ("semanticdb-save-all-db-idle" function nil nil [25774 26158])
            ("semanticdb-project-predicate-functions" variable nil nil [26193 26656])
            ("semanticdb-write-directory-p" function
               (:parent "semanticdb-project-database"
                :arguments ("obj"))
                nil [26658 26858])
            ("semanticdb-current-database" function nil nil [27002 27254])
            ("semanticdb-match-any-mode" variable nil nil [27256 27535])
            ("semanticdb-with-match-any-mode" function (:arguments ("body")) nil [27537 27794])
            ("put" code nil nil [27795 27856])
            ("semanticdb-equivalent-mode-for-search" function (:arguments ("buffer")) nil [27858 28322])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "buffer"))
                nil [28324 28569])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table"
                :arguments ("table" "buffer"))
                nil [28571 29257])
            ("semanticdb-project-roots" variable (:user-visible-flag t) nil [29376 29738])
            ("semanticdb-project-root-functions" variable nil nil [29740 30195])
            ("semanticdb-project-system-databases" variable nil nil [30197 30508])
            ("make-variable-buffer-local" code nil nil [30509 30574])
            ("semanticdb-search-system-databases" variable (:default-value t) nil [30576 30686])
            ("semanticdb-current-database-list" function (:arguments ("dir")) nil [30688 32703])
            ("semanticdb-file-table-hash" variable (:default-value (make-hash-table :test (quote equal))) nil [32842 32962])
            ("semanticdb-file-table-object-from-hash" function (:arguments ("file")) nil [32964 33147])
            ("semanticdb-file-table-object-put-hash" function (:arguments ("file" "dbtable")) nil [33149 33312])
            ("semanticdb-file-table-object" function (:arguments ("file" "dontload")) nil [33329 37273])
            ("semanticdb-out-of-buffer-create-table-fcn" variable nil nil [37275 37433])
            ("make-variable-buffer-local" code nil nil [37434 37505])
            ("semanticdb-create-table-for-file-not-in-buffer" function (:arguments ("filename")) nil [37507 38894])
            ("semanticdb-file-stream" function (:arguments ("file")) nil [38896 39224])
            ("semantic/db" package nil nil [39226 39248]))          
      :file "db.el.gz"
      :pointmax 39397
      :fsize 10811
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1113 . 1114) (symbol 1069 . 1086) (open-paren 1068 . 1069)))
    (semanticdb-table "lex-spp.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [2259 2278])
            ("semantic/lex" include nil nil [2279 2302])
            ("declare-function" code nil nil [2304 2366])
            ("semantic-lex-spp-macro-symbol-obarray" variable nil nil [2378 2591])
            ("make-variable-buffer-local" code nil nil [2592 2659])
            ("semantic-lex-spp-project-macro-symbol-obarray" variable nil nil [2661 2865])
            ("make-variable-buffer-local" code nil nil [2866 2941])
            ("semantic-lex-spp-dynamic-macro-symbol-obarray" variable nil nil [2943 3228])
            ("make-variable-buffer-local" code nil nil [3229 3304])
            ("semantic-lex-spp-dynamic-macro-symbol-obarray-stack" variable nil nil [3306 3431])
            ("make-variable-buffer-local" code nil nil [3432 3513])
            ("semantic-lex-spp-expanded-macro-stack" variable nil nil [3515 3619])
            ("semantic-lex-with-macro-used" function (:arguments ("name" "body")) nil [3896 4314])
            ("put" code nil nil [4315 4374])
            ("add-hook" code nil nil [4376 4515])
            ("semantic-lex-spp-symbol" function (:arguments ("name")) nil [4742 5577])
            ("semantic-lex-spp-symbol-p" function (:arguments ("name")) nil [5579 5739])
            ("semantic-lex-spp-dynamic-map" function nil nil [5741 5976])
            ("semantic-lex-spp-dynamic-map-stack" function nil nil [5978 6231])
            ("semantic-lex-spp-value-valid-p" function (:arguments ("value")) nil [6233 6474])
            ("semantic-lex-spp-debug-symbol" variable nil nil [6476 6573])
            ("semantic-lex-spp-enable-debug-symbol" function
               (:user-visible-flag t
                :arguments ("sym"))
                nil [6575 6845])
            ("semantic-lex-spp-validate-value" function (:arguments ("name" "value")) nil [6847 7228])
            ("semantic-lex-spp-symbol-set" function (:arguments ("name" "value" "obarray-in")) nil [7230 7646])
            ("semantic-lex-spp-symbol-remove" function (:arguments ("name" "obarray")) nil [7648 7902])
            ("semantic-lex-spp-symbol-push" function (:arguments ("name" "value")) nil [7904 8603])
            ("semantic-lex-spp-symbol-pop" function (:arguments ("name")) nil [8605 9227])
            ("semantic-lex-spp-symbol-stream" function (:arguments ("name")) nil [9229 9414])
            ("semantic-lex-make-spp-table" function (:arguments ("specs")) nil [9416 10079])
            ("semantic-lex-spp-save-table" function nil nil [10081 10513])
            ("semantic-lex-spp-macros" function nil nil [10515 11268])
            ("semantic-lex-spp-set-dynamic-table" function (:arguments ("new-entries")) nil [11270 11551])
            ("semantic-lex-spp-reset-hook" function (:arguments ("start" "end")) nil [11553 11997])
            ("semantic-lex-spp-extract-regex-and-compare" function (:arguments ("analyzer" "value")) nil [12194 12549])
            ("semantic-lex-spp-simple-macro-to-macro-stream" function (:arguments ("val" "beg" "end" "argvalues")) nil [12551 14241])
            ("semantic-lex-spp-one-token-to-txt" function (:arguments ("tok" "blocktok")) nil [14763 16177])
            ("semantic-lex-spp-macro-with-args" function (:arguments ("val")) nil [16179 16410])
            ("semantic-lex-spp-token-macro-to-macro-stream" function (:arguments ("val" "beg" "end" "argvalues")) nil [16412 24632])
            ("semantic-lex-spp-symbol-merge" function (:arguments ("txt")) nil [24634 25292])
            ("semantic-lex-spp-find-closing-macro" function nil nil [25294 26153])
            ("semantic-lex-spp-get-overlay" function (:arguments ("point")) nil [26155 26464])
            ("semantic-lex-spp-merge-streams" function (:arguments ("raw-stream")) nil [26612 27558])
            ("semantic-lex-spp-macro-to-macro-stream" function (:arguments ("val" "beg" "end" "argvalues")) nil [27731 28703])
            ("semantic-lex-spp-anlyzer-do-replace" function (:arguments ("sym" "val" "beg" "end")) nil [28899 30165])
            ("semantic-lex-spp-replacements-enabled" variable (:default-value t) nil [30167 30329])
            ("semantic-lex-spp-analyzer-push-tokens-for-symbol" function (:arguments ("str" "beg" "end")) nil [30331 31897])
            ("define-lex-regex-analyzer" code nil nil [31899 32363])
            ("define-lex-regex-analyzer" code nil nil [32365 33615])
            ("semantic-lex-spp-first-token-arg-list" function (:arguments ("token")) nil [33866 34276])
            ("semantic-lex-spp-one-token-and-move-for-macro" function (:arguments ("max")) nil [34278 34721])
            ("semantic-lex-spp-stream-for-arglist" function (:arguments ("token")) nil [34723 36132])
            ("semantic-lex-spp-hack-depth" variable nil nil [36134 36248])
            ("semantic-lex-spp-lex-text-string" function (:arguments ("text")) nil [36250 38621])
            ("semantic-lex-spp-stream-for-macro" function (:arguments ("eos")) nil [40362 41029])
            ("define-lex-spp-macro-declaration-analyzer" function (:arguments ("name" "doc" "regexp" "tokidx" "valform")) nil [41031 42489])
            ("define-lex-spp-macro-undeclaration-analyzer" function (:arguments ("name" "doc" "regexp" "tokidx")) nil [42491 43318])
            ("semantic-lex-spp-use-headers-flag" variable (:user-visible-flag t) nil [43668 44007])
            ("semantic-lex-spp-merge-header" function (:arguments ("name")) nil [44009 44327])
            ("define-lex-spp-include-analyzer" function (:arguments ("name" "doc" "regexp" "tokidx" "valform")) nil [44329 46040])
            ("semantic-lex-spp-macro-max-length-to-save" variable
               (:user-visible-flag t
                :default-value 200)
                nil [46207 46327])
            ("semantic-lex-spp-table-write-slot-value" function (:arguments ("value")) nil [46344 47394])
            ("semantic-lex-spp-describe" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [47421 47991])
            ("add-hook" code nil nil [48016 48414])
            ("semantic/lex-spp" package nil nil [48416 48443]))          
      :file "lex-spp.el.gz"
      :pointmax 48602
      :fsize 13794
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "format.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [1322 1342])
            ("semantic" include nil nil [1344 1363])
            ("semantic/tag-ls" include nil nil [1364 1390])
            ("ezimage" include nil nil [1391 1409])
            ("semantic/find" include nil nil [1430 1454])
            ("semantic-format-tag-functions" variable (:default-value (quote (semantic-format-tag-name semantic-format-tag-canonical-name semantic-format-tag-abbreviate semantic-format-tag-summarize semantic-format-tag-summarize-with-file semantic-format-tag-short-doc semantic-format-tag-prototype semantic-format-tag-concise-prototype semantic-format-tag-uml-abbreviate semantic-format-tag-uml-prototype semantic-format-tag-uml-concise-prototype semantic-format-tag-prin1))) nil [1547 2407])
            ("semantic-format-tag-custom-list" variable (:default-value (append (quote (radio)) (mapcar (lambda (f) (list (quote const) f)) semantic-format-tag-functions) (quote (function)))) nil [2409 2700])
            ("semantic-format-use-images-flag" variable (:default-value ezimage-use-images) nil [2702 2923])
            ("semantic-function-argument-separator" variable (:default-value ",") nil [2925 3040])
            ("make-variable-buffer-local" code nil nil [3041 3107])
            ("semantic-format-parent-separator" variable (:default-value "::") nil [3109 3234])
            ("make-variable-buffer-local" code nil nil [3235 3297])
            ("semantic-format-face-alist" variable (:default-value (\` ((function . font-lock-function-name-face) (variable . font-lock-variable-name-face) (type . font-lock-type-face) (include \, (if (featurep (quote xemacs)) (quote font-lock-preprocessor-face) (quote font-lock-constant-face))) (package \, (if (featurep (quote xemacs)) (quote font-lock-preprocessor-face) (quote font-lock-constant-face))) (label . font-lock-string-face) (comment . font-lock-comment-face) (keyword . font-lock-keyword-face) (abstract . italic) (static . underline) (documentation . font-lock-doc-face)))) nil [3299 4455])
            ("semantic--format-colorize-text" function (:arguments ("text" "face-class")) nil [4485 4922])
            ("semantic--format-colorize-merge-text" function (:arguments ("precoloredtext" "face-class")) nil [4924 5782])
            ("semantic--format-tag-arguments" function (:arguments ("args" "formatter" "color")) nil [5810 6430])
            ("semantic-format-tag-type" function
               (:overloadable t
                :arguments ("tag" "color"))
                nil [6446 6638])
            ("semantic-format-tag-type-default" function (:arguments ("tag" "color")) nil [6640 7363])
            ("semantic-format-tag-prin1" function (:arguments ("tag" "parent" "color")) nil [7405 7577])
            ("semantic-format-tag-name-from-anything" function (:arguments ("anything" "parent" "color" "colorhint")) nil [7579 8770])
            ("semantic-format-tag-name" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [8787 9105])
            ("semantic-format-tag-name-default" function (:arguments ("tag" "parent" "color")) nil [9107 9673])
            ("declare-function" code nil nil [9675 9732])
            ("semantic--format-tag-parent-tree" function (:arguments ("tag" "parent")) nil [9734 10850])
            ("semantic-format-tag-canonical-name" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [10852 11208])
            ("semantic-format-tag-canonical-name-default" function (:arguments ("tag" "parent" "color")) nil [11210 12323])
            ("semantic-format-tag-abbreviate" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [12325 12710])
            ("semantic-format-tag-abbreviate-default" function (:arguments ("tag" "parent" "color")) nil [12712 13648])
            ("semantic-format-tag-summarize" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [13665 13934])
            ("semantic-format-tag-summarize-default" function (:arguments ("tag" "parent" "color")) nil [13936 14591])
            ("semantic-format-tag-summarize-with-file" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [14593 14899])
            ("semantic-format-tag-summarize-with-file-default" function (:arguments ("tag" "parent" "color")) nil [14901 15748])
            ("semantic-format-tag-short-doc" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [15750 16055])
            ("declare-function" code nil nil [16057 16121])
            ("semantic-format-tag-short-doc-default" function (:arguments ("tag" "parent" "color")) nil [16123 17370])
            ("semantic-format-tag-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [17415 17818])
            ("semantic-format-tag-prototype-default" function (:arguments ("tag" "parent" "color")) nil [17820 19607])
            ("semantic-format-tag-concise-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [19624 19902])
            ("semantic-format-tag-concise-prototype-default" function (:arguments ("tag" "parent" "color")) nil [19904 20989])
            ("semantic-uml-colon-string" variable
               (:user-visible-flag t
                :default-value " : ")
                nil [21017 21268])
            ("semantic-uml-no-protection-string" variable (:user-visible-flag t) nil [21270 21471])
            ("semantic--format-uml-post-colorize" function (:arguments ("text" "tag" "parent")) nil [21473 21877])
            ("semantic-uml-attribute-string" function (:arguments ("tag" "parent")) nil [21879 22188])
            ("semantic-format-tag-protection-image-alist" variable (:default-value (quote (("+" . ezimage-unlock) ("#" . ezimage-key) ("-" . ezimage-lock)))) nil [22190 22381])
            ("semantic-format-tag-protection-symbol-to-string-assoc-list" variable (:default-value (quote ((public . "+") (protected . "#") (private . "-")))) nil [22383 22662])
            ("semantic-format-tag-uml-protection-to-string" function
               (:overloadable t
                :arguments ("protection-symbol" "color"))
                nil [22664 23142])
            ("semantic-format-tag-uml-protection-to-string-default" function (:arguments ("protection-symbol" "color")) nil [23144 23898])
            ("semantic-format-tag-uml-protection" function (:arguments ("tag" "parent" "color")) nil [23900 24195])
            ("semantic--format-tag-uml-type" function (:arguments ("tag" "color")) nil [24197 24462])
            ("semantic-format-tag-uml-abbreviate" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [24464 24744])
            ("semantic-format-tag-uml-abbreviate-default" function (:arguments ("tag" "parent" "color")) nil [24746 25378])
            ("semantic-format-tag-uml-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [25380 25656])
            ("semantic-format-tag-uml-prototype-default" function (:arguments ("tag" "parent" "color")) nil [25658 26517])
            ("semantic-format-tag-uml-concise-prototype" function
               (:overloadable t
                :arguments ("tag" "parent" "color"))
                nil [26519 26811])
            ("semantic-format-tag-uml-concise-prototype-default" function (:arguments ("tag" "parent" "color")) nil [26813 27421])
            ("semantic/format" package nil nil [27423 27449]))          
      :file "format.el.gz"
      :pointmax 27606
      :fsize 6796
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1454 . 1455) (symbol 1412 . 1429) (open-paren 1411 . 1412) (close-paren 1342 . 1343) (symbol 1304 . 1321) (open-paren 1303 . 1304)))
    (semanticdb-table "fw.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("mode-local" include nil nil [1137 1158])
            ("eieio" include nil nil [1159 1175])
            ("load" code nil nil [1176 1217])
            ("defalias" code nil nil [5428 5491])
            ("defalias" code nil nil [5268 5372])
            ("defalias" code nil nil [5057 5165])
            ("defalias" code nil nil [4952 5053])
            ("if" code nil nil [1260 4947])
            ("semantic-delete-overlay-maybe" function (:arguments ("overlay")) nil [5497 5686])
            ("semantic-menu-item" function (:arguments ("item")) nil [5719 6220])
            ("semantic-cache-data-overlays" variable nil nil [6251 6340])
            ("semantic-cache-data-to-buffer" function (:arguments ("buffer" "start" "end" "value" "name" "lifespan")) nil [6342 7628])
            ("semantic-cache-data-post-command-hook" function nil nil [7630 8621])
            ("semantic-get-cache-data" function (:arguments ("name" "point")) nil [8623 9072])
            ("semantic-test-data-cache" function (:user-visible-flag t) nil [9074 9629])
            ("semantic-overload-symbol-from-function" function (:arguments ("name")) nil [9679 9943])
            ("semantic-alias-obsolete" function (:arguments ("oldfnalias" "newfn" "when")) nil [9945 10755])
            ("semantic-varalias-obsolete" function (:arguments ("oldvaralias" "newvar" "when")) nil [10757 11379])
            ("semantic-safe" function (:arguments ("format" "body")) nil [11404 12175])
            ("put" code nil nil [12176 12220])
            ("semantic-new-buffer-fcn-was-run" variable nil nil [12245 12352])
            ("make-variable-buffer-local" code nil nil [12353 12414])
            ("semantic-active-p" function nil nil [12416 12546])
            ("semantic-map-buffers" function (:arguments ("function")) nil [12548 12824])
            ("defalias" code nil nil [12826 12892])
            ("semantic-alias-obsolete" code nil nil [12894 13016])
            ("semantic-install-function-overrides" function (:arguments ("overrides" "transient" "mode")) nil [13018 14069])
            ("semantic-current-input-throw-symbol" variable nil nil [14103 14210])
            ("semantic--on-input-start-marker" variable nil nil [14211 14315])
            ("semantic-exit-on-input" function (:arguments ("symbol" "forms")) nil [14317 14829])
            ("put" code nil nil [14830 14883])
            ("semantic-throw-on-input" function (:arguments ("from")) nil [14885 15792])
            ("semantic-find-file-noselect" function (:arguments ("file" "nowarn" "rawfile" "wildcards")) nil [15833 17686])
            ("semanticdb-without-unloaded-file-searches" function (:arguments ("forms")) nil [17725 18015])
            ("put" code nil nil [18016 18088])
            ("semantic-fw-add-edebug-spec" function nil nil [20368 20459])
            ("add-hook" code nil nil [20461 20519])
            ("semantic/fw" package nil nil [20521 20543]))          
      :file "fw.el.gz"
      :pointmax 20574
      :fsize 6605
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 5494 . 5495) (symbol 1241 . 1257) (open-paren 1240 . 1241)))
    (semanticdb-table "bovine.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1269 1288])
            ("declare-function" code nil nil [1290 1377])
            ("declare-function" code nil nil [1378 1459])
            ("declare-function" code nil nil [1460 1516])
            ("semantic-bovinate-nonterminal-check-obarray" variable nil nil [1535 1708])
            ("make-variable-buffer-local" code nil nil [1709 1782])
            ("semantic-lambda" function (:arguments ("return-val")) nil [1952 2209])
            ("semantic-bovinate-symbol-nonterminal-p" function (:arguments ("sym" "table")) nil [2441 2649])
            ("semantic-bovinate-nonterminal-db-nt" function nil nil [2651 2919])
            ("semantic-bovinate-nonterminal-check" function (:arguments ("stream" "nonterminal")) nil [2921 3790])
            ("semantic-bovinate-stream" function (:arguments ("stream" "nonterminal")) nil [3807 12394])
            ("defalias" code nil nil [12441 12508])
            ("semantic/bovine" package nil nil [12510 12536]))          
      :file "bovine.el.gz"
      :pointmax 12693
      :fsize 3786
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "db-find.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [4572 4594])
            ("semantic/db-ref" include nil nil [4595 4621])
            ("semantic/find" include nil nil [4643 4667])
            ("data-debug-thing-alist" variable nil nil [4681 4712])
            ("declare-function" code nil nil [4713 4773])
            ("declare-function" code nil nil [4774 4827])
            ("declare-function" code nil nil [4886 4948])
            ("declare-function" code nil nil [4949 5025])
            ("declare-function" code nil nil [5026 5070])
            ("semanticdb-find-throttle-custom-list" variable (:default-value (quote (set (const local) (const project) (const unloaded) (const system) (const recursive) (const omniscience)))) nil [5072 5330])
            ("semanticdb-find-default-throttle" variable (:default-value (quote (local project unloaded system recursive))) nil [5347 6896])
            ("make-variable-buffer-local" code nil nil [6898 6960])
            ("semanticdb-find-throttle-active-p" function (:arguments ("access-type")) nil [6962 7256])
            ("semanticdb-find-search-index" type
               (:superclasses "semanticdb-abstract-search-index"
                :members 
                  ( ("include-path" variable
                       (:documentation "List of semanticdb tables from the include path."
                        :default-value "nil")
                        nil nil)
                    ("type-cache" variable
                       (:documentation "Cache of all the data types accessible from this file.
Includes all types from all included files, merged namespaces, and
expunge duplicates."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [7454 7951])
            ("semantic-reset" function
               (:parent "semanticdb-find-search-index"
                :arguments ("idx"))
                nil [7953 8326])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-find-search-index"
                :arguments ("idx" "new-tags"))
                nil [8328 8699])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-find-search-index"
                :arguments ("idx" "new-tags"))
                nil [8701 9753])
            ("semanticdb-find-translate-path" function
               (:overloadable t
                :arguments ("path" "brutish"))
                nil [9977 11780])
            ("semanticdb-find-translate-path-default" function (:arguments ("path" "brutish")) nil [11782 12263])
            ("semanticdb-find-table-for-include" function
               (:overloadable t
                :arguments ("includetag" "table"))
                nil [12280 12644])
            ("semanticdb-find-translate-path-brutish-default" function (:arguments ("path")) nil [12646 13920])
            ("semanticdb-find-incomplete-cache-entries-p" function (:arguments ("cache")) nil [13922 14201])
            ("semanticdb-find-need-cache-update-p" function (:arguments ("table")) nil [14203 14896])
            ("semanticdb-find-translate-path-includes-default" function (:arguments ("path")) nil [14898 16245])
            ("semanticdb-find-lost-includes" variable nil nil [16247 16356])
            ("make-variable-buffer-local" code nil nil [16357 16416])
            ("semanticdb-find-scanned-include-tags" variable nil nil [16418 16673])
            ("make-variable-buffer-local" code nil nil [16674 16740])
            ("semanticdb-implied-include-tags" variable nil nil [16742 17093])
            ("semanticdb-find-translate-path-includes--internal" function (:arguments ("path")) nil [17095 22092])
            ("semanticdb-find-load-unloaded" function
               (:overloadable t
                :arguments ("filename"))
                nil [22094 22481])
            ("semanticdb-find-load-unloaded-default" function (:arguments ("filename")) nil [22483 22656])
            ("semanticdb-find-table-for-include-default" function (:arguments ("includetag" "table")) nil [22704 27015])
            ("semanticdb-find-test-translate-path" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27098 27739])
            ("semanticdb-find-test-translate-path-no-loading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [27741 28537])
            ("semanticdb-find-adebug-lost-includes" function (:user-visible-flag t) nil [28554 29061])
            ("semanticdb-find-adebug-insert-scanned-tag-cons" function (:arguments ("consdata" "prefix" "prebuttontext")) nil [29063 30302])
            ("semanticdb-find-adebug-scanned-includes" function (:user-visible-flag t) nil [30304 31100])
            ("semanticdb-strip-find-results" function (:arguments ("results" "find-file-match")) nil [31247 33159])
            ("semanticdb-fast-strip-find-results" function (:arguments ("results")) nil [33161 33490])
            ("semanticdb-find-results-p" function (:arguments ("resultp")) nil [33492 33938])
            ("semanticdb-find-result-prin1-to-string" function (:arguments ("result")) nil [33940 34494])
            ("semanticdb-find-result-with-nil-p" function (:arguments ("resultp")) nil [34496 35205])
            ("semanticdb-find-result-length" function (:arguments ("result")) nil [35222 35426])
            ("semanticdb-find-result-nth" function (:arguments ("result" "n")) nil [35443 36302])
            ("semanticdb-find-result-test" function (:arguments ("result")) nil [36304 36753])
            ("semanticdb-find-result-nth-in-buffer" function (:arguments ("result" "n")) nil [36770 37789])
            ("semanticdb-find-result-mapc" function (:arguments ("fcn" "result")) nil [37791 38164])
            ("semanticdb-find-log-flag" variable nil nil [38248 38332])
            ("semanticdb-find-log-buffer-name" variable (:default-value "*SemanticDB Find Log*") nil [38334 38434])
            ("semanticdb-find-toggle-logging" function (:user-visible-flag t) nil [38436 38684])
            ("semanticdb-reset-log" function (:user-visible-flag t) nil [38686 38899])
            ("semanticdb-find-log-move-to-end" function nil nil [38901 39323])
            ("semanticdb-find-log-new-search" function (:arguments ("forwhat")) nil [39325 39613])
            ("semanticdb-find-log-activity" function (:arguments ("table" "result")) nil [39615 39979])
            ("semanticdb-find-tags-collector" function (:arguments ("function" "path" "find-file-match" "brutish")) nil [40079 43047])
            ("semanticdb-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [43064 43510])
            ("semanticdb-find-tags-by-name-regexp" function (:arguments ("regexp" "path" "find-file-match")) nil [43527 43993])
            ("semanticdb-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [44010 44476])
            ("semanticdb-find-tags-by-class" function (:arguments ("class" "path" "find-file-match")) nil [44493 44938])
            ("semanticdb-deep-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [44958 45470])
            ("semanticdb-deep-find-tags-by-name-regexp" function (:arguments ("regexp" "path" "find-file-match")) nil [45472 46004])
            ("semanticdb-deep-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [46006 46538])
            ("semanticdb-brute-deep-find-tags-by-name" function (:arguments ("name" "path" "find-file-match")) nil [46571 47129])
            ("semanticdb-brute-deep-find-tags-for-completion" function (:arguments ("prefix" "path" "find-file-match")) nil [47131 47709])
            ("semanticdb-brute-find-tags-by-class" function (:arguments ("class" "path" "find-file-match")) nil [47711 48259])
            ("semanticdb-find-tags-external-children-of-type" function (:arguments ("type" "path" "find-file-match")) nil [48291 48799])
            ("semanticdb-find-tags-subclasses-of-type" function (:arguments ("type" "path" "find-file-match")) nil [48801 49292])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "name" "tags"))
                nil [49466 49787])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "regexp" "tags"))
                nil [49789 50134])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "prefix" "tags"))
                nil [50136 50481])
            ("semanticdb-find-tags-by-class-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "class" "tags"))
                nil [50483 51057])
            ("semanticdb-find-tags-external-children-of-type-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "parent" "tags"))
                nil [51059 51472])
            ("semanticdb-find-tags-subclasses-of-type-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "parent" "tags"))
                nil [51474 51873])
            ("semanticdb-deep-find-tags-by-name-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "name" "tags"))
                nil [51893 52324])
            ("semanticdb-deep-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "regexp" "tags"))
                nil [52326 52781])
            ("semanticdb-deep-find-tags-for-completion-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "prefix" "tags"))
                nil [52783 53238])
            ("semantic/db-find" package nil nil [53240 53267]))          
      :file "db-find.el.gz"
      :pointmax 53426
      :fsize 13721
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 4667 . 4668) (symbol 4623 . 4640) (open-paren 4622 . 4623)))
    (semanticdb-table "symref.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [2521 2540])
            ("ede-minor-mode" variable nil nil [2542 2565])
            ("declare-function" code nil nil [2566 2619])
            ("declare-function" code nil nil [2620 2687])
            ("declare-function" code nil nil [2688 2730])
            ("declare-function" code nil nil [2731 2788])
            ("declare-function" code nil nil [2789 2836])
            ("semantic-symref-tool" variable
               (:user-visible-flag t
                :default-value (quote detect))
                nil [2848 3041])
            ("make-variable-buffer-local" code nil nil [3042 3092])
            ("semantic-symref-tool-alist" variable (:default-value (quote (((lambda (rootdir) (file-exists-p (expand-file-name "GPATH" rootdir))) . global) ((lambda (rootdir) (file-exists-p (expand-file-name "ID" rootdir))) . idutils) ((lambda (rootdir) (file-exists-p (expand-file-name "cscope.out" rootdir))) . cscope)))) nil [3112 3738])
            ("semantic-symref-calculate-rootdir" function nil nil [3740 4255])
            ("semantic-symref-detect-symref-tool" function nil nil [4257 4886])
            ("semantic-symref-instantiate" function (:arguments ("args")) nil [4888 5345])
            ("semantic-symref-last-result" variable nil nil [5347 5426])
            ("semantic-symref-data-debug-last-result" function (:user-visible-flag t) nil [5428 5772])
            ("semantic-symref-find-references-by-name" function
               (:user-visible-flag t
                :arguments ("name" "scope" "tool-return"))
                nil [5810 6733])
            ("semantic-symref-find-tags-by-name" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [6750 7460])
            ("semantic-symref-find-tags-by-regexp" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [7477 8197])
            ("semantic-symref-find-tags-by-completion" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [8214 8943])
            ("semantic-symref-find-file-references-by-name" function
               (:user-visible-flag t
                :arguments ("name" "scope"))
                nil [8960 9686])
            ("semantic-symref-find-text" function
               (:user-visible-flag t
                :arguments ("text" "scope"))
                nil [9703 10472])
            ("semantic-symref-result" type
               (:members 
                  ( ("created-by" variable
                       (:documentation "Back-pointer to the symref tool creating these results."
                        :type "semantic-symref-tool-baseclass")
                        nil nil)
                    ("hit-files" variable
                       (:documentation "The list of files hit."
                        :type "list")
                        nil nil)
                    ("hit-text" variable
                       (:documentation "If the result doesn't provide full lines, then fill in hit-text.
GNU Global does completion search this way."
                        :type "list")
                        nil nil)
                    ("hit-lines" variable
                       (:documentation "The list of line hits.
Each element is a cons cell of the form (LINE . FILENAME)."
                        :type "list")
                        nil nil)
                    ("hit-tags" variable
                       (:documentation "The list of tags with hits in them.
Use the  `semantic-symref-hit-tags' method to get this list."
                        :type "list")
                        nil nil))                  
                :type "class")
                nil [10559 11456])
            ("semantic-symref-result-get-files" function
               (:parent "semantic-symref-result"
                :arguments ("result"))
                nil [11458 12122])
            ("semantic-symref-result-get-tags" function
               (:parent "semantic-symref-result"
                :arguments ("result" "open-buffers"))
                nil [12124 15253])
            ("semantic-symref-tool-baseclass" type
               (:members 
                  ( ("searchfor" variable
                       (:documentation "The thing to search for."
                        :type "string")
                        nil nil)
                    ("searchtype" variable
                       (:documentation "The type of search to do.
Values could be `symbol, `regexp, 'tagname, or 'completion."
                        :type "symbol")
                        nil nil)
                    ("searchscope" variable
                       (:documentation "The scope to search for.
Can be 'project, 'target, or 'file."
                        :type "symbol")
                        nil nil)
                    ("resulttype" variable
                       (:documentation "The kind of search results desired.
Can be 'line, 'file, or 'tag.
The type of result can be converted from 'line to 'file, or 'line to 'tag,
but not from 'file to 'line or 'tag."
                        :type "symbol")
                        nil nil))                  
                :type "class")
                nil [15377 16413])
            ("semantic-symref-get-result" function
               (:parent "semantic-symref-tool-baseclass"
                :arguments ("tool"))
                nil [16415 16939])
            ("semantic-symref-perform-search" function
               (:parent "semantic-symref-tool-baseclass"
                :arguments ("tool"))
                nil [16941 17159])
            ("semantic-symref-parse-tool-output" function
               (:parent "semantic-symref-tool-baseclass"
                :arguments ("tool" "outputbuffer"))
                nil [17161 17658])
            ("semantic-symref-parse-tool-output-one-line" function
               (:parent "semantic-symref-tool-baseclass"
                :arguments ("tool"))
                nil [17660 17894])
            ("semantic/symref" package nil nil [17896 17922]))          
      :file "symref.el.gz"
      :pointmax 18079
      :fsize 5204
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "db-ref.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("eieio" include nil nil [1437 1453])
            ("semantic" include nil nil [1454 1473])
            ("semantic/db" include nil nil [1474 1496])
            ("semantic/tag" include nil nil [1497 1520])
            ("semantic/find" include nil nil [1593 1617])
            ("semanticdb-add-reference" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt" "include-tag"))
                nil [1620 2460])
            ("semanticdb-check-references" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt"))
                nil [2462 2701])
            ("semanticdb-includes-in-table" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt"))
                nil [2703 2895])
            ("semanticdb-check-references" function
               (:parent "semanticdb-table"
                :arguments ("dbt"))
                nil [2898 3786])
            ("semanticdb-refresh-references" function
               (:parent "semanticdb-abstract-table"
                :arguments ("dbt"))
                nil [3788 3978])
            ("semanticdb-refresh-references" function
               (:parent "semanticdb-table"
                :arguments ("dbt"))
                nil [3980 4305])
            ("semanticdb-notify-references" function
               (:parent "semanticdb-table"
                :arguments ("dbt" "method"))
                nil [4307 4664])
            ("semanticdb-ref-adebug" type
               (:members 
                  ( ("i-depend-on" variable nil nil nil)
                    ("local-table" variable nil nil nil)
                    ("i-include" variable nil nil nil))                  
                :type "class")
                nil [4679 4882])
            ("declare-function" code nil nil [4884 4937])
            ("declare-function" code nil nil [4938 5005])
            ("semanticdb-ref-test" function
               (:user-visible-flag t
                :arguments ("refresh"))
                nil [5007 5746])
            ("semantic/db-ref" package nil nil [5748 5774]))          
      :file "db-ref.el.gz"
      :pointmax 5809
      :fsize 2260
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1617 . 1618) (symbol 1575 . 1592) (open-paren 1574 . 1575)))
    (semanticdb-table "util-modes.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1155 1174])
            ("semantic-modes" customgroup (:user-visible-flag t) nil [1219 1326])
            ("semantic-update-mode-line" variable (:default-value t) nil [1370 1806])
            ("semantic-mode-line-prefix" variable (:default-value (propertize "S" (quote face) (quote bold))) nil [1808 2044])
            ("semantic-minor-modes-format" variable nil nil [2046 2197])
            ("put" code nil nil [2198 2256])
            ("semantic-minor-mode-alist" variable nil nil [2258 2398])
            ("semantic-mode-line-update" function nil nil [2400 4476])
            ("semantic-desktop-ignore-this-minor-mode" function (:arguments ("buffer")) nil [4478 4665])
            ("semantic-add-minor-mode" function (:arguments ("toggle" "name")) nil [4667 5733])
            ("semantic-toggle-minor-mode-globally" function (:arguments ("mode" "arg")) nil [5735 6883])
            ("define-minor-mode" code nil nil [6966 7326])
            ("semantic-highlight-edits-mode-hook" variable nil nil [7328 7480])
            ("semantic-highlight-edits-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [7482 7813])
            ("semantic-highlight-edits-new-change-hook-fcn" function (:arguments ("overlay")) nil [7815 8121])
            ("semantic-highlight-edits-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [8123 8251])
            ("define-minor-mode" code nil nil [8268 9437])
            ("semantic-add-minor-mode" code nil nil [9439 9524])
            ("define-minor-mode" code nil nil [9603 10071])
            ("semantic-show-unmatched-syntax-mode-hook" variable nil nil [10073 10237])
            ("semantic-unmatched-syntax-face" variable
               (:default-value (quote ((((class color) (background dark)) (:underline "red")) (((class color) (background light)) (:underline "red"))))
                :type "face")
                nil [10239 10536])
            ("semantic-unmatched-syntax-overlay-p" function (:arguments ("overlay")) nil [10538 10711])
            ("semantic-showing-unmatched-syntax-p" function nil nil [10713 11042])
            ("semantic-show-unmatched-lex-tokens-fetch" function nil nil [11044 11586])
            ("semantic-clean-unmatched-syntax-in-region" function (:arguments ("beg" "end")) nil [11588 11891])
            ("semantic-clean-unmatched-syntax-in-buffer" function nil nil [11893 12087])
            ("semantic-clean-token-of-unmatched-syntax" function (:arguments ("token")) nil [12089 12314])
            ("semantic-show-unmatched-syntax" function (:arguments ("syntax")) nil [12316 13255])
            ("semantic-next-unmatched-syntax" function (:arguments ("point" "bound")) nil [13257 13955])
            ("semantic-show-unmatched-syntax-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km ",`" (quote semantic-show-unmatched-syntax-next)) km)) nil [13957 14176])
            ("define-minor-mode" code nil nil [14193 16051])
            ("semantic-add-minor-mode" code nil nil [16053 16144])
            ("semantic-show-unmatched-syntax-next" function (:user-visible-flag t) nil [16146 16375])
            ("define-minor-mode" code nil nil [16466 16895])
            ("semantic-show-parser-state-mode-hook" variable nil nil [16897 17053])
            ("semantic-show-parser-state-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) km)) nil [17055 17187])
            ("define-minor-mode" code nil nil [17204 20914])
            ("semantic-add-minor-mode" code nil nil [20916 21002])
            ("semantic-show-parser-state-string" variable nil nil [21004 21156])
            ("make-variable-buffer-local" code nil nil [21157 21220])
            ("semantic-show-parser-state-marker" function (:arguments ("ignore")) nil [21222 22042])
            ("semantic-show-parser-state-auto-marker" function nil nil [22044 22362])
            ("define-minor-mode" code nil nil [22439 22860])
            ("semantic-stickyfunc-mode-hook" variable nil nil [22862 23004])
            ("semantic-stickyfunc-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (define-key km [header-line down-mouse-1] (quote semantic-stickyfunc-menu)) km)) nil [23006 23199])
            ("semantic-stickyfunc-popup-menu" variable nil nil [23201 23321])
            ("easy-menu-define" code nil nil [23323 24470])
            ("semantic-stickyfunc-indent-string" variable (:default-value (if (and window-system (not (featurep (quote xemacs)))) (concat (condition-case nil (let ((charwidth (frame-char-width)) (scrollpos (frame-parameter (selected-frame) (quote vertical-scroll-bars)))) (if (or (eq scrollpos (quote left)) (eq scrollpos t)) (let ((w (when (boundp (quote scroll-bar-width)) (symbol-value (quote scroll-bar-width))))) (if (not w) (setq w (frame-parameter (selected-frame) (quote scroll-bar-width)))) (if (not w) (setq w (+ (get (quote scroll-bar-width) (quote x-frame-parameter)) 1))) (if (not w) "  " (setq w (+ 2 w)) (make-string (/ w charwidth) 32))) "")) (error "")) (condition-case nil (let* ((f (window-fringes)) (fw (car f)) (numspace (/ fw (frame-char-width)))) (make-string numspace 32)) (error (condition-case nil (if (get (quote fringe) (quote face)) " " "") (error ""))))) "")) nil [24472 26623])
            ("semantic-stickyfunc-old-hlf" variable nil nil [26625 26725])
            ("semantic-stickyfunc-header-line-format" variable
               (:constant-flag t
                :default-value (cond ((featurep (quote xemacs)) nil) ((>= emacs-major-version 22) (quote (:eval (list (propertize " " (quote display) (quote ((space :align-to 0)))) (semantic-stickyfunc-fetch-stickyline))))) ((= emacs-major-version 21) (quote (:eval (list semantic-stickyfunc-indent-string (semantic-stickyfunc-fetch-stickyline))))) (t nil)))
                nil [26727 27187])
            ("define-minor-mode" code nil nil [27204 29199])
            ("semantic-stickyfunc-sticky-classes" variable (:default-value (quote (function type))) nil [29201 29337])
            ("make-variable-buffer-local" code nil nil [29338 29402])
            ("semantic-stickyfunc-show-only-functions-p" variable nil nil [29404 29682])
            ("semantic-stickyfunc-tag-to-stick" function nil nil [29684 30051])
            ("semantic-stickyfunc-fetch-stickyline" function nil nil [30053 31872])
            ("semantic-stickyfunc-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [31874 32344])
            ("semantic-add-minor-mode" code nil nil [32347 32426])
            ("define-minor-mode" code nil nil [32680 33120])
            ("semantic-highlight-func-mode-hook" variable nil nil [33122 33272])
            ("semantic-highlight-func-mode-map" variable (:default-value (let ((km (make-sparse-keymap)) (m3 (if (featurep (quote xemacs)) [button3] [mouse-3]))) (define-key km m3 (quote semantic-highlight-func-menu)) km)) nil [33274 33510])
            ("semantic-highlight-func-popup-menu" variable nil nil [33512 33651])
            ("easy-menu-define" code nil nil [33653 34708])
            ("semantic-highlight-func-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [34710 35226])
            ("semantic-highlight-func-ct-overlay" variable nil nil [35228 35331])
            ("make-variable-buffer-local" code nil nil [35332 35396])
            ("semantic-highlight-func-current-tag-face" variable
               (:default-value (quote ((((class color) (background dark)) (:background "gray20")) (((class color) (background light)) (:background "gray90"))))
                :type "face")
                nil [35398 35720])
            ("define-minor-mode" code nil nil [35737 37090])
            ("semantic-highlight-func-highlight-current-tag" function (:arguments ("disable")) nil [37092 38757])
            ("semantic-add-minor-mode" code nil nil [38759 38842])
            ("semantic/util-modes" package nil nil [38889 38919]))          
      :file "util-modes.el.gz"
      :pointmax 39084
      :fsize 9291
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "db-typecache.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1069 1088])
            ("semantic/db" include nil nil [1089 1111])
            ("semantic/db-find" include nil nil [1112 1139])
            ("semantic/analyze/fcn" include nil nil [1140 1171])
            ("semantic/find" include nil nil [1230 1254])
            ("declare-function" code nil nil [1257 1312])
            ("declare-function" code nil nil [1313 1366])
            ("declare-function" code nil nil [1367 1449])
            ("declare-function" code nil nil [1450 1521])
            ("semanticdb-typecache" type
               (:members 
                  ( ("filestream" variable
                       (:documentation "Fully sorted/merged list of tags within this buffer."
                        :default-value "nil")
                        nil nil)
                    ("includestream" variable
                       (:documentation "Fully sorted/merged list of tags from this file's includes list."
                        :default-value "nil")
                        nil nil)
                    ("stream" variable
                       (:documentation "The searchable tag stream for this cache.
NOTE: Can I get rid of this?  Use a hashtable instead?"
                        :default-value "nil")
                        nil nil)
                    ("dependants" variable
                       (:documentation "Any other object that is dependent on typecache results.
Said object must support `semantic-reset' methods."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [1571 2383])
            ("semantic-reset" function
               (:parent "semanticdb-typecache"
                :arguments ("tc"))
                nil [2385 2623])
            ("semanticdb-typecache-notify-reset" function
               (:parent "semanticdb-typecache"
                :arguments ("tc"))
                nil [2625 2860])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-typecache"
                :arguments ("tc" "new-tags"))
                nil [2862 3379])
            ("semanticdb-typecache-add-dependant" function (:arguments ("dep")) nil [3381 3661])
            ("semanticdb-typecache-length" function (:arguments ("thing")) nil [3663 3997])
            ("semanticdb-get-typecache" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table"))
                nil [4000 4558])
            ("semanticdb-have-typecache-p" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table"))
                nil [4560 4789])
            ("semanticdb-database-typecache" type
               (:superclasses "semanticdb-abstract-db-cache"
                :members 
                  ( ("stream" variable
                       (:documentation "The searchable tag stream for this cache."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [5009 5221])
            ("semantic-reset" function
               (:parent "semanticdb-database-typecache"
                :arguments ("tc"))
                nil [5223 5338])
            ("semanticdb-synchronize" function
               (:parent "semanticdb-database-typecache"
                :arguments ("cache" "new-tags"))
                nil [5340 5477])
            ("semanticdb-partial-synchronize" function
               (:parent "semanticdb-database-typecache"
                :arguments ("cache" "new-tags"))
                nil [5479 5633])
            ("semanticdb-get-typecache" function
               (:parent "semanticdb-project-database"
                :arguments ("db"))
                nil [5635 5875])
            ("semanticdb-typecache-apply-filename" function (:arguments ("file" "stream")) nil [6030 6417])
            ("semanticdb-typecache-safe-tag-members" function (:arguments ("tag")) nil [6420 6724])
            ("semanticdb-typecache-safe-tag-list" function (:arguments ("tags" "table")) nil [6726 6971])
            ("semanticdb-typecache-faux-namespace" function (:arguments ("name" "members")) nil [6973 7318])
            ("semanticdb-typecache-merge-streams" function (:arguments ("cache1" "cache2")) nil [7320 10131])
            ("semanticdb-expand-nested-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [10208 10408])
            ("semanticdb-typecache-file-tags" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table"))
                nil [10410 10544])
            ("semanticdb-typecache-file-tags" function
               (:parent "semanticdb-table"
                :arguments ("table"))
                nil [10546 11321])
            ("semanticdb-typecache-include-tags" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table"))
                nil [11323 11460])
            ("semanticdb-typecache-include-tags" function
               (:parent "semanticdb-table"
                :arguments ("table"))
                nil [11462 13022])
            ("semanticdb-typecache-find" function
               (:overloadable t
                :arguments ("type" "path" "find-file-match"))
                nil [13139 13540])
            ("semanticdb-typecache-find-default" function (:arguments ("type" "path" "find-file-match")) nil [13542 14085])
            ("semanticdb-typecache-find-by-name-helper" function (:arguments ("name" "table")) nil [14087 14513])
            ("semanticdb-typecache-find-method" function
               (:parent "semanticdb-abstract-table"
                :arguments ("table" "type" "find-file-match"))
                nil [14515 18602])
            ("semanticdb-typecache-for-database" function
               (:parent "semanticdb-project-database"
                :arguments ("db" "mode"))
                nil [18807 19381])
            ("semanticdb-typecache-refresh-for-buffer" function (:arguments ("buffer")) nil [19383 19734])
            ("semanticdb-typecache-complete-flush" function (:user-visible-flag t) nil [19751 20140])
            ("semanticdb-typecache-dump" function (:user-visible-flag t) nil [20142 20580])
            ("semanticdb-db-typecache-dump" function (:user-visible-flag t) nil [20582 21151])
            ("semantic/db-typecache" package nil nil [21153 21185]))          
      :file "db-typecache.el.gz"
      :pointmax 21354
      :fsize 6686
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1254 . 1255) (symbol 1212 . 1229) (open-paren 1211 . 1212)))
    (semanticdb-table "db-mode.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [924 946])
            ("declare-function" code nil nil [948 1020])
            ("semanticdb-hooks" variable (:default-value (quote ((semanticdb-semantic-init-hook-fcn semantic-init-db-hook) (semanticdb-synchronize-table semantic-after-toplevel-cache-change-hook) (semanticdb-partial-synchronize-table semantic-after-partial-cache-change-hook) (semanticdb-revert-hook before-revert-hook) (semanticdb-kill-hook kill-buffer-hook) (semanticdb-kill-hook change-major-mode-hook) (semanticdb-kill-emacs-hook kill-emacs-hook) (semanticdb-save-all-db-idle auto-save-hook)))) nil [1053 1670])
            ("semanticdb-minor-mode-p" function nil nil [1710 1894])
            ("define-minor-mode" code nil nil [1911 2418])
            ("defvaralias" code nil nil [2420 2490])
            ("defvaralias" code nil nil [2491 2558])
            ("semantic-varalias-obsolete" code nil nil [2559 2659])
            ("semanticdb-toggle-global-mode" function (:user-visible-flag t) nil [2662 3024])
            ("semanticdb-semantic-init-hook-fcn" function nil nil [3109 5022])
            ("semanticdb-revert-hook" function nil nil [5024 5403])
            ("semanticdb-kill-hook" function nil nil [5405 6835])
            ("semanticdb-kill-emacs-hook" function nil nil [6837 6967])
            ("semanticdb-synchronize-table" function (:arguments ("new-table")) nil [6998 7221])
            ("semanticdb-partial-synchronize-table" function (:arguments ("new-table")) nil [7223 7462])
            ("semantic/db-mode" package nil nil [7465 7492]))          
      :file "db-mode.el.gz"
      :pointmax 7651
      :fsize 2805
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sort.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1219 1238])
            ("semantic/find" include nil nil [1260 1284])
            ("declare-function" code nil nil [1287 1375])
            ("semantic-string-lessp-ci" function (:arguments ("s1" "s2")) nil [1504 1869])
            ("semantic-sort-tag-type" function (:arguments ("tag")) nil [1871 2086])
            ("semantic-tag-lessp-name-then-type" function (:arguments ("A" "B")) nil [2088 2910])
            ("semantic-sort-tags-by-name-increasing" function (:arguments ("tags")) nil [2912 3153])
            ("semantic-sort-tags-by-name-decreasing" function (:arguments ("tags")) nil [3155 3396])
            ("semantic-sort-tags-by-type-increasing" function (:arguments ("tags")) nil [3398 3649])
            ("semantic-sort-tags-by-type-decreasing" function (:arguments ("tags")) nil [3651 3902])
            ("semantic-sort-tags-by-name-increasing-ci" function (:arguments ("tags")) nil [3904 4158])
            ("semantic-sort-tags-by-name-decreasing-ci" function (:arguments ("tags")) nil [4160 4414])
            ("semantic-sort-tags-by-type-increasing-ci" function (:arguments ("tags")) nil [4416 4680])
            ("semantic-sort-tags-by-type-decreasing-ci" function (:arguments ("tags")) nil [4682 4946])
            ("semantic-sort-tags-by-name-then-type-increasing" function (:arguments ("tags")) nil [4948 5175])
            ("semantic-sort-tags-by-name-then-type-decreasing" function (:arguments ("tags")) nil [5177 5404])
            ("semantic-unique-tag-table-by-name" function (:arguments ("tags")) nil [5630 6249])
            ("semantic-unique-tag-table" function (:arguments ("tags")) nil [6251 7109])
            ("semantic-flatten-tags-table" function (:arguments ("table")) nil [7453 8313])
            ("semantic-bucketize-tag-class" variable (:default-value (lambda (tok) (semantic-tag-class tok))) nil [8533 9116])
            ("semantic-bucketize" function (:arguments ("tags" "parent" "filter")) nil [9118 10820])
            ("semantic-orphaned-member-metaparent-type" variable (:default-value "class") nil [11060 11305])
            ("make-variable-buffer-local" code nil nil [11306 11376])
            ("semantic-mark-external-member-function" variable nil nil [11378 11947])
            ("semantic-adopt-external-members" function (:arguments ("tags")) nil [11949 15983])
            ("semantic-tag-external-member-parent" function
               (:overloadable t
                :arguments ("tag"))
                nil [16125 16656])
            ("semantic-tag-external-member-parent-default" function (:arguments ("tag")) nil [16658 16987])
            ("semantic-tag-external-member-p" function
               (:overloadable t
                :arguments ("parent" "tag"))
                nil [16989 17527])
            ("semantic-tag-external-member-p-default" function (:arguments ("parent" "tag")) nil [17529 17867])
            ("semantic-tag-external-member-children" function
               (:overloadable t
                :arguments ("tag" "usedb"))
                nil [17869 18744])
            ("semantic-tag-external-member-children-default" function (:arguments ("tag" "usedb")) nil [18746 19473])
            ("semantic-tag-external-class" function
               (:overloadable t
                :arguments ("tag"))
                nil [19475 19996])
            ("semantic-tag-external-class-default" function (:arguments ("tag")) nil [19998 20516])
            ("semantic/sort" package nil nil [20518 20542]))          
      :file "sort.el.gz"
      :pointmax 20695
      :fsize 6267
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1284 . 1285) (symbol 1240 . 1257) (open-paren 1239 . 1240)))
    (semanticdb-table "util.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [955 974])
            ("semantic/find" include nil nil [1141 1165])
            ("semantic/db-find" include nil nil [997 1024])
            ("declare-function" code nil nil [1168 1228])
            ("declare-function" code nil nil [1229 1284])
            ("declare-function" code nil nil [1285 1359])
            ("semantic-type-relation-separator-character" variable (:default-value (quote ("."))) nil [1372 1836])
            ("make-variable-buffer-local" code nil nil [1837 1909])
            ("semantic-equivalent-major-modes" variable nil nil [1911 2142])
            ("make-variable-buffer-local" code nil nil [2143 2204])
            ("semantic-file-tag-table" function (:arguments ("file")) nil [2384 3134])
            ("semantic-alias-obsolete" code nil nil [3136 3225])
            ("semantic-something-to-tag-table" function (:arguments ("something")) nil [3227 4914])
            ("semantic-alias-obsolete" code nil nil [4916 5015])
            ("semantic-read-symbol-history" variable nil nil [5127 5199])
            ("semantic-read-symbol" function (:arguments ("prompt" "default" "stream" "filter")) nil [5201 6112])
            ("semantic-read-variable" function (:arguments ("prompt" "default" "stream")) nil [6114 6580])
            ("semantic-read-function" function (:arguments ("prompt" "default" "stream")) nil [6582 7046])
            ("semantic-read-type" function (:arguments ("prompt" "default" "stream")) nil [7048 7496])
            ("semantic-describe-tag" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [7533 7812])
            ("semantic-add-label" function
               (:user-visible-flag t
                :arguments ("label" "value" "tag"))
                nil [7845 8225])
            ("semantic-show-label" function
               (:user-visible-flag t
                :arguments ("label" "tag"))
                nil [8227 8550])
            ("semantic-describe-buffer-var-helper" function (:arguments ("varsym" "buffer")) nil [8613 9219])
            ("semantic-describe-buffer" function (:user-visible-flag t) nil [9221 10726])
            ("semantic-assert-valid-token" function (:arguments ("tok")) nil [10728 11236])
            ("semantic-sanity-check" function
               (:user-visible-flag t
                :arguments ("cache" "over" "notfirst"))
                nil [11238 12569])
            ("semantic-find-tag-for-completion" function (:arguments ("prefix")) nil [12898 13625])
            ("semantic-complete-symbol" function
               (:user-visible-flag t
                :arguments ("predicate"))
                nil [13627 15634])
            ("semantic/util" package nil nil [15636 15660])
            ("semantic/util-modes" include nil nil [15681 15711]))          
      :file "util.el.gz"
      :pointmax 15744
      :fsize 5021
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1165 . 1166) (symbol 977 . 994) (open-paren 976 . 977)))
    (semanticdb-table "dep.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/tag" include nil nil [1440 1463])
            ("semantic-dependency-include-path" variable nil nil [1476 2144])
            ("make-variable-buffer-local" code nil nil [2145 2207])
            ("semantic-dependency-system-include-path" variable nil nil [2209 2774])
            ("make-variable-buffer-local" code nil nil [2775 2844])
            ("defcustom-mode-local-semantic-dependency-system-include-path" function (:arguments ("mode" "name" "value" "docstring")) nil [2846 4342])
            ("semantic-add-system-include" function
               (:user-visible-flag t
                :arguments ("dir" "mode"))
                nil [4428 4996])
            ("semantic-remove-system-include" function
               (:user-visible-flag t
                :arguments ("dir" "mode"))
                nil [5013 5678])
            ("semantic-reset-system-include" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [5695 6021])
            ("semantic-customize-system-include-path" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [6038 6583])
            ("semantic--dependency-find-file-on-path" function (:arguments ("file" "path")) nil [6653 6980])
            ("ede-minor-mode" variable nil nil [6982 7005])
            ("ede-object" variable nil nil [7006 7025])
            ("declare-function" code nil nil [7026 7074])
            ("semantic-dependency-find-file-on-path" function (:arguments ("file" "systemp" "mode")) nil [7076 8163])
            ("semantic/dep" package nil nil [8166 8189]))          
      :file "dep.el.gz"
      :pointmax 8340
      :fsize 2853
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "scope.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [1635 1657])
            ("semantic/analyze/fcn" include nil nil [1658 1689])
            ("semantic/ctxt" include nil nil [1690 1714])
            ("semantic/find" include nil nil [1735 1759])
            ("declare-function" code nil nil [1762 1814])
            ("declare-function" code nil nil [1815 1878])
            ("declare-function" code nil nil [1879 1948])
            ("declare-function" code nil nil [1949 2026])
            ("declare-function" code nil nil [2027 2104])
            ("declare-function" code nil nil [2105 2164])
            ("semantic-scope-cache" type
               (:superclasses "semanticdb-abstract-cache"
                :members 
                  ( ("tag" variable
                       (:documentation "The tag this scope was calculated for."
                        :default-value "nil")
                        nil nil)
                    ("scopetypes" variable
                       (:documentation "The list of types currently in scope.
For C++, this would contain anonymous namespaces known, and
anything labeled by a `using' statement."
                        :default-value "nil")
                        nil nil)
                    ("parents" variable
                       (:documentation "List of parents in scope w/in the body of this function.
Presumably, the members of these parent classes are available for access
based on private:, or public: style statements."
                        :default-value "nil")
                        nil nil)
                    ("parentinheritance" variable
                       (:documentation "Alist of parents by inheritance.
Each entry is ( PARENT . PROTECTION ), where PARENT is a type, and
PROTECTION is a symbol representing the level of inheritance, such as 'private, or 'protected."
                        :default-value "nil")
                        nil nil)
                    ("scope" variable
                       (:documentation "Items in scope due to the scopetypes or parents."
                        :default-value "nil")
                        nil nil)
                    ("fullscope" variable
                       (:documentation "All the other stuff on one master list you can search."
                        :default-value "nil")
                        nil nil)
                    ("localargs" variable
                       (:documentation "The arguments to the function tag."
                        :default-value "nil")
                        nil nil)
                    ("localvar" variable
                       (:documentation "The local variables."
                        :default-value "nil")
                        nil nil)
                    ("typescope" variable
                       (:documentation "Slot to save intermediate scope while metatypes are dereferenced."
                        :default-value "nil")
                        nil nil))                  
                :type "class")
                nil [2177 3654])
            ("semantic-reset" function
               (:parent "semantic-scope-cache"
                :arguments ("obj"))
                nil [3738 4078])
            ("semanticdb-synchronize" function
               (:parent "semantic-scope-cache"
                :arguments ("cache" "new-tags"))
                nil [4080 4230])
            ("semanticdb-partial-synchronize" function
               (:parent "semantic-scope-cache"
                :arguments ("cache" "new-tags"))
                nil [4233 4629])
            ("semantic-scope-reset-cache" function nil nil [4631 4870])
            ("semantic-scope-set-typecache" function
               (:parent "semantic-scope-cache"
                :arguments ("cache" "types-in-scope"))
                nil [4872 5396])
            ("semantic-scope-tag-clone-with-scope" function (:arguments ("tag" "scopetags")) nil [5676 5975])
            ("semantic-scope-tag-get-scope" function (:arguments ("tag")) nil [5977 6126])
            ("semantic-analyze-scoped-types" function
               (:overloadable t
                :arguments ("position"))
                nil [6202 6414])
            ("semantic-analyze-scoped-types-default" function (:arguments ("position")) nil [6416 7813])
            ("semantic-analyze-scope-nested-tags" function
               (:overloadable t
                :arguments ("position" "scopedtypes"))
                nil [7878 8240])
            ("semantic-analyze-scope-nested-tags-default" function (:arguments ("position" "scopetypes")) nil [8242 12518])
            ("semantic-analyze-scope-lineage-tags" function
               (:overloadable t
                :arguments ("parents" "scopedtypes"))
                nil [12520 12889])
            ("semantic-analyze-scope-lineage-tags-default" function (:arguments ("parents" "scopetypes")) nil [12891 13884])
            ("semantic-analyze-scoped-tags" function
               (:overloadable t
                :arguments ("typelist" "parentlist"))
                nil [13951 14312])
            ("semantic-analyze-scoped-tags-default" function (:arguments ("typelist" "halfscope")) nil [14314 16469])
            ("semantic-analyze-scope-calculate-access" function
               (:overloadable t
                :arguments ("type" "scope"))
                nil [16534 16902])
            ("semantic-analyze-scope-calculate-access-default" function (:arguments ("type" "scope")) nil [16904 18343])
            ("semantic-completable-tags-from-type" function (:arguments ("type")) nil [18345 19958])
            ("semantic-analyze-scoped-type-parts" function (:arguments ("type" "scope" "noinherit" "protection")) nil [19960 21744])
            ("semantic-analyze-scoped-inherited-tags" function (:arguments ("type" "scope" "access")) nil [21746 22885])
            ("semantic-analyze-scoped-inherited-tag-map" function (:arguments ("type" "fcn" "scope")) nil [22887 25438])
            ("semantic-calculate-scope" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [25529 28413])
            ("semantic-scope-find" function (:arguments ("name" "class" "scope-in")) nil [28415 30581])
            ("semantic-analyze-show" function
               (:parent "semantic-scope-cache"
                :arguments ("context"))
                nil [30595 31217])
            ("semantic/scope" package nil nil [31219 31244]))          
      :file "scope.el.gz"
      :pointmax 31399
      :fsize 9269
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1759 . 1760) (symbol 1717 . 1734) (open-paren 1716 . 1717)))
    (semanticdb-table "imenu.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1219 1238])
            ("semantic/format" include nil nil [1239 1265])
            ("semantic/db" include nil nil [1266 1288])
            ("semantic/db-file" include nil nil [1289 1316])
            ("semantic/sort" include nil nil [1317 1341])
            ("imenu" include nil nil [1342 1358])
            ("declare-function" code nil nil [1360 1440])
            ("declare-function" code nil nil [1441 1503])
            ("if" code nil nil [1616 1736])
            ("semantic-imenu" customgroup (:user-visible-flag t) nil [1738 1838])
            ("semantic-imenu-summary-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-abbreviate))
                nil [1855 2114])
            ("make-variable-buffer-local" code nil nil [2115 2176])
            ("semantic-imenu-bucketize-file" variable
               (:user-visible-flag t
                :default-value t)
                nil [2193 2341])
            ("make-variable-buffer-local" code nil nil [2342 2401])
            ("semantic-imenu-adopt-external-members" variable
               (:user-visible-flag t
                :default-value t)
                nil [2403 2649])
            ("semantic-imenu-buckets-to-submenu" variable
               (:user-visible-flag t
                :default-value t)
                nil [2651 2870])
            ("make-variable-buffer-local" code nil nil [2871 2934])
            ("semantic-imenu-expand-type-members" variable
               (:user-visible-flag t
                :default-value t)
                nil [2951 3106])
            ("make-variable-buffer-local" code nil nil [3107 3171])
            ("semantic-varalias-obsolete" code nil nil [3172 3305])
            ("semantic-imenu-bucketize-type-members" variable
               (:user-visible-flag t
                :default-value t)
                nil [3307 3577])
            ("make-variable-buffer-local" code nil nil [3578 3645])
            ("semantic-varalias-obsolete" code nil nil [3646 3785])
            ("semantic-imenu-sort-bucket-function" variable (:user-visible-flag t) nil [3787 4471])
            ("make-variable-buffer-local" code nil nil [4472 4537])
            ("semantic-imenu-index-directory" variable (:user-visible-flag t) nil [4539 4866])
            ("semantic-imenu-auto-rebuild-directory-indexes" variable (:user-visible-flag t) nil [4868 5158])
            ("semantic-imenu-directory-current-file" variable nil nil [5160 5287])
            ("semantic-imenu-auto-rebuild-running" variable nil nil [5289 5407])
            ("semantic-imenu-expandable-tag-classes" variable (:default-value (quote (type))) nil [5424 5680])
            ("make-variable-buffer-local" code nil nil [5681 5748])
            ("semantic-varalias-obsolete" code nil nil [5749 5884])
            ("semantic-imenu-tag-overlay" function (:arguments ("tag")) nil [5896 6324])
            ("semantic-imenu-goto-function" function (:arguments ("name" "position" "rest")) nil [6327 8250])
            ("semantic-imenu-flush-fcn" function (:arguments ("ignore")) nil [8252 8771])
            ("semantic-create-imenu-index" function (:arguments ("stream")) nil [8788 9782])
            ("semantic-create-imenu-directory-index" function (:arguments ("stream")) nil [9784 11674])
            ("semantic-create-imenu-index-1" function (:arguments ("stream" "parent")) nil [11676 13763])
            ("semantic-create-imenu-subindex" function (:arguments ("tags")) nil [13765 16118])
            ("semantic-imenu-rebuild-directory-indexes" function (:arguments ("db")) nil [16155 17124])
            ("semantic-imenu-semanticdb-hook" function nil nil [17126 17576])
            ("add-hook" code nil nil [17578 17642])
            ("semantic-imenu-toggle-bucketize-file" function (:user-visible-flag t) nil [17673 17926])
            ("semantic-imenu-toggle-buckets-to-submenu" function (:user-visible-flag t) nil [17928 18193])
            ("semantic-imenu-toggle-bucketize-type-parts" function (:user-visible-flag t) nil [18195 18470])
            ("advice" include nil nil [18809 18826])
            ("semantic-which-function" variable (:default-value (quote semantic-default-which-function)) nil [18828 18959])
            ("semantic-which-function-use-color" variable (:user-visible-flag t) nil [18961 19127])
            ("semantic-default-which-function" function (:arguments ("taglist")) nil [19129 19958])
            ("semantic/imenu" package nil nil [20295 20320]))          
      :file "imenu.el.gz"
      :pointmax 20475
      :fsize 5752
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "loaddefs.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic-analyze-current-context" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [202 759])
            ("semantic-analyze-type-constants" function (:prototype-flag t) nil [936 1119])
            ("semantic-analyze-possible-completions" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [1121 2155])
            ("semantic-analyze-current-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2312 2422])
            ("semantic-analyze-proto-impl-toggle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [2424 2582])
            ("semantic-bovinate-stream" function (:prototype-flag t) nil [2721 3160])
            ("defalias" code nil nil [3162 3229])
            ("semantic-default-c-setup" function (:prototype-flag t) nil [3374 3505])
            ("semantic-c-add-preprocessor-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [3507 3662])
            ("semantic-default-elisp-setup" function (:prototype-flag t) nil [3810 3945])
            ("semantic-gcc-setup" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [4096 4215])
            ("semantic-default-make-setup" function (:prototype-flag t) nil [4369 4502])
            ("semantic-default-scheme-setup" function (:prototype-flag t) nil [4653 4790])
            ("semantic-displayor-tooltip-mode" variable (:default-value (quote standard)) nil [4935 5538])
            ("custom-autoload" code nil nil [5540 5612])
            ("semantic-displayor-tooltip-initial-max-tags" variable (:default-value 5) nil [5614 5787])
            ("custom-autoload" code nil nil [5789 5873])
            ("semantic-complete-jump-local" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5875 5985])
            ("semantic-complete-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [5987 6085])
            ("semantic-complete-jump-local-members" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6087 6199])
            ("semantic-complete-analyze-and-replace" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6201 6541])
            ("semantic-complete-analyze-inline" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6543 6967])
            ("semantic-complete-analyze-inline-idle" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [6969 7403])
            ("semantic-complete-self-insert" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7405 7655])
            ("semantic-complete-inline-project" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [7657 7982])
            ("semantic-ctxt-current-mode" function (:prototype-flag t) nil [8115 8404])
            ("semanticdb-current-database" variable nil nil [8531 8634])
            ("semanticdb-current-table" variable nil nil [8636 8742])
            ("semanticdb-file-table-object" function (:prototype-flag t) nil [8744 9159])
            ("eieio-defclass-autoload" code nil nil [9301 9468])
            ("semanticdb-find-default-throttle" variable (:default-value (quote (local project unloaded system recursive))) nil [9610 11088])
            ("custom-autoload" code nil nil [11090 11162])
            ("semanticdb-find-translate-path" function (:prototype-flag t) nil [11164 12977])
            ("semanticdb-find-table-for-include" function (:prototype-flag t) nil [12979 13353])
            ("semanticdb-find-test-translate-path" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [13355 13673])
            ("semanticdb-find-adebug-lost-includes" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [13675 13874])
            ("semanticdb-strip-find-results" function (:prototype-flag t) nil [13876 14532])
            ("semanticdb-find-result-length" function (:prototype-flag t) nil [14534 14652])
            ("semanticdb-find-result-nth" function (:prototype-flag t) nil [14654 15028])
            ("semanticdb-find-result-nth-in-buffer" function (:prototype-flag t) nil [15030 15384])
            ("semanticdb-find-tags-by-name" function (:prototype-flag t) nil [15386 15725])
            ("semanticdb-find-tags-by-name-regexp" function (:prototype-flag t) nil [15727 16077])
            ("semanticdb-find-tags-for-completion" function (:prototype-flag t) nil [16079 16429])
            ("semanticdb-find-tags-by-class" function (:prototype-flag t) nil [16431 16767])
            ("semanticdb-enable-gnu-global-databases" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [16915 17602])
            ("semanticdb-minor-mode-p" function (:prototype-flag t) nil [17744 17870])
            ("global-semanticdb-minor-mode" variable nil nil [17872 18221])
            ("custom-autoload" code nil nil [18223 18293])
            ("global-semanticdb-minor-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [18295 18594])
            ("eieio-defclass-autoload" code nil nil [18751 18868])
            ("eieio-defclass-autoload" code nil nil [18870 19023])
            ("semanticdb-typecache-find" function (:prototype-flag t) nil [19025 19444])
            ("semantic-debug-parser-source" variable nil nil [19580 19776])
            ("make-variable-buffer-local" code nil nil [19778 19836])
            ("semantic-debug-parser-class" variable nil nil [19838 19935])
            ("make-variable-buffer-local" code nil nil [19937 19994])
            ("semantic-decoration-include-visit" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [20171 20295])
            ("semantic-decoration-unparsed-include-do-reset" function (:prototype-flag t) nil [20297 20456])
            ("global-semantic-decoration-mode" variable nil nil [20624 20985])
            ("custom-autoload" code nil nil [20987 21066])
            ("global-semantic-decoration-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [21068 21317])
            ("semantic-add-system-include" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [21447 21707])
            ("semantic-remove-system-include" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [21709 21971])
            ("semantic-reset-system-include" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [21973 22186])
            ("semantic-customize-system-include-path" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [22188 22469])
            ("semantic-documentation-for-tag" function (:prototype-flag t) nil [22599 23122])
            ("semantic-change-function" function (:prototype-flag t) nil [23255 23458])
            ("semantic-edits-incremental-parser" function (:prototype-flag t) nil [23460 23894])
            ("defalias" code nil nil [23896 23973])
            ("semantic-find-tag-by-overlay" function (:prototype-flag t) nil [24106 24600])
            ("semantic-find-tag-by-overlay-in-region" function (:prototype-flag t) nil [24602 24874])
            ("semantic-find-tag-by-overlay-next" function (:prototype-flag t) nil [24876 25100])
            ("semantic-find-tag-by-overlay-prev" function (:prototype-flag t) nil [25102 25327])
            ("semantic-find-tag-parent-by-overlay" function (:prototype-flag t) nil [25329 25523])
            ("semantic-current-tag" function (:prototype-flag t) nil [25525 25749])
            ("semantic-current-tag-parent" function (:prototype-flag t) nil [25751 25997])
            ("semantic-find-first-tag-by-name" function (:prototype-flag t) nil [25999 26258])
            ("semantic-find-tags-by-scope-protection" function (:prototype-flag t) nil [26260 26841])
            ("semantic-find-tags-included" function (:prototype-flag t) nil [26843 27050])
            ("semantic-format-tag-name" function (:prototype-flag t) nil [27189 27519])
            ("semantic-format-tag-summarize" function (:prototype-flag t) nil [27521 27802])
            ("semantic-format-tag-prototype" function (:prototype-flag t) nil [27804 28219])
            ("semantic-format-tag-concise-prototype" function (:prototype-flag t) nil [28221 28511])
            ("semantic-default-html-setup" function (:prototype-flag t) nil [28644 28761])
            ("semantic-ia-complete-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [28888 29121])
            ("semantic-ia-complete-tip" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [29123 29238])
            ("semantic-ia-show-summary" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [29240 29359])
            ("semantic-ia-show-variants" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [29361 29494])
            ("semantic-ia-fast-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [29496 29716])
            ("semantic-ia-fast-mouse-jump" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [29718 29955])
            ("semantic-ia-show-doc" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [29957 30088])
            ("semantic-ia-describe-class" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [30090 30331])
            ("semantic-speedbar-analysis" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [30467 30685])
            ("semantic-idle-scheduler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [30818 31448])
            ("global-semantic-idle-scheduler-mode" variable nil nil [31450 31827])
            ("custom-autoload" code nil nil [31829 31903])
            ("global-semantic-idle-scheduler-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [31905 32261])
            ("semantic-imenu-summary-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-abbreviate))
                nil [32397 32588])
            ("custom-autoload" code nil nil [32590 32659])
            ("semantic-imenu-bucketize-file" variable
               (:user-visible-flag t
                :default-value t)
                nil [32661 32764])
            ("custom-autoload" code nil nil [32766 32833])
            ("semantic-imenu-expand-type-members" variable
               (:user-visible-flag t
                :default-value t)
                nil [32835 32945])
            ("custom-autoload" code nil nil [32947 33019])
            ("semantic-imenu-expandable-tag-classes" variable (:default-value (quote (type))) nil [33021 33277])
            ("semantic-create-imenu-index" function (:prototype-flag t) nil [33279 33570])
            ("semantic-lex" function (:prototype-flag t) nil [33700 34487])
            ("semantic-lex-spp-table-write-slot-value" function (:prototype-flag t) nil [34629 34799])
            ("global-semantic-mru-bookmark-mode" variable nil nil [34956 35325])
            ("custom-autoload" code nil nil [35327 35407])
            ("global-semantic-mru-bookmark-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [35409 35630])
            ("semantic-calculate-scope" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [35766 36030])
            ("senator-step-at-tag-classes" variable nil nil [36172 36452])
            ("custom-autoload" code nil nil [36454 36521])
            ("make-variable-buffer-local" code nil nil [36523 36580])
            ("senator-step-at-start-end-tag-classes" variable nil nil [36582 37123])
            ("custom-autoload" code nil nil [37125 37202])
            ("make-variable-buffer-local" code nil nil [37204 37271])
            ("senator-next-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37273 37415])
            ("senator-previous-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37417 37573])
            ("senator-go-to-up-reference" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37575 37971])
            ("senator-copy-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [37973 38089])
            ("senator-kill-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38091 38332])
            ("senator-yank-tag" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38334 38506])
            ("senator-copy-tag-to-register" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38508 38812])
            ("senator-transpose-tags-up" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38814 38937])
            ("senator-transpose-tags-down" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [38939 39064])
            ("semantic-flatten-tags-table" function (:prototype-flag t) nil [39197 39522])
            ("semantic-tag-external-member-parent" function (:prototype-flag t) nil [39524 40062])
            ("semantic-symref-find-references-by-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40201 40740])
            ("semantic-symref-find-tags-by-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [40742 41119])
            ("semantic-symref-find-tags-by-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41121 41506])
            ("semantic-symref-find-tags-by-completion" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41508 41897])
            ("semantic-symref-find-file-references-by-name" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [41899 42293])
            ("semantic-symref-find-text" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [42295 42718])
            ("eieio-defclass-autoload" code nil nil [42886 43259])
            ("eieio-defclass-autoload" code nil nil [43427 43812])
            ("eieio-defclass-autoload" code nil nil [43966 44268])
            ("eieio-defclass-autoload" code nil nil [44439 44822])
            ("semantic-symref" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [44976 45347])
            ("semantic-symref-symbol" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45349 45728])
            ("semantic-symref-regexp" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [45730 46121])
            ("semantic-tag-components" function (:prototype-flag t) nil [46251 46541])
            ("semantic-go-to-tag" function (:prototype-flag t) nil [46686 46957])
            ("semantic-dependency-tag-file" function (:prototype-flag t) nil [46959 47213])
            ("semantic-tag-prototype-p" function (:prototype-flag t) nil [47352 47567])
            ("semantic-tag-write-list-slot-value" function (:prototype-flag t) nil [47715 47877])
            ("semantic-default-texi-setup" function (:prototype-flag t) nil [48010 48130])
            ("global-semantic-highlight-edits-mode" variable nil nil [48281 48662])
            ("custom-autoload" code nil nil [48664 48745])
            ("global-semantic-highlight-edits-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [48747 48972])
            ("semantic-highlight-edits-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [48974 49556])
            ("global-semantic-show-unmatched-syntax-mode" variable nil nil [49558 49963])
            ("custom-autoload" code nil nil [49965 50052])
            ("global-semantic-show-unmatched-syntax-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [50054 50291])
            ("semantic-show-unmatched-syntax-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [50293 50961])
            ("global-semantic-show-parser-state-mode" variable nil nil [50963 51352])
            ("custom-autoload" code nil nil [51354 51437])
            ("global-semantic-show-parser-state-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51439 51668])
            ("semantic-show-parser-state-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [51670 52465])
            ("global-semantic-stickyfunc-mode" variable nil nil [52467 52828])
            ("custom-autoload" code nil nil [52830 52906])
            ("global-semantic-stickyfunc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [52908 53123])
            ("semantic-stickyfunc-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [53125 53785])
            ("global-semantic-highlight-func-mode" variable nil nil [53787 54164])
            ("custom-autoload" code nil nil [54166 54246])
            ("global-semantic-highlight-func-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [54248 54471])
            ("semantic-highlight-func-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [54473 55222])
            ("wisent-java-default-setup" function (:prototype-flag t) nil [55399 55560])
            ("wisent-javascript-setup-parser" function (:prototype-flag t) nil [55740 55854])
            ("wisent-python-default-setup" function (:prototype-flag t) nil [56022 56129])
            ("add-hook" code nil nil [56131 56188])
            ("loaddefs" package nil nil [56199 56218]))          
      :file "loaddefs.el"
      :pointmax 56364
      :fsize 56363
      :lastmodtime '(22978 50577 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "tag-file.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/tag" include nil nil [999 1022])
            ("ede-minor-mode" variable nil nil [1024 1047])
            ("declare-function" code nil nil [1048 1109])
            ("declare-function" code nil nil [1110 1164])
            ("declare-function" code nil nil [1165 1236])
            ("declare-function" code nil nil [1237 1279])
            ("semantic-go-to-tag" function
               (:overloadable t
                :arguments ("tag" "parent"))
                nil [1340 4054])
            ("make-obsolete-overload" code nil nil [4056 4158])
            ("semantic-dependency-tag-file" function
               (:overloadable t
                :arguments ("tag"))
                nil [4354 6897])
            ("make-obsolete-overload" code nil nil [6899 7010])
            ("semantic-prototype-file" function
               (:overloadable t
                :arguments ("buffer"))
                nil [7277 7937])
            ("semantic-alias-obsolete" code nil nil [7939 8043])
            ("semantic-alias-obsolete" code nil nil [8045 8158])
            ("semantic/tag-file" package nil nil [8161 8189]))          
      :file "tag-file.el.gz"
      :pointmax 8350
      :fsize 2966
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ia.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/analyze" include nil nil [1209 1236])
            ("semantic/format" include nil nil [1237 1263])
            ("pulse" include nil nil [1264 1280])
            ("semantic/senator" include nil nil [1281 1308])
            ("semantic/analyze/refs" include nil nil [1309 1341])
            ("semantic/find" include nil nil [1393 1417])
            ("semantic/analyze" include nil nil [1363 1390])
            ("declare-function" code nil nil [1420 1464])
            ("semantic-ia-completion-format-tag-function" variable (:default-value (quote semantic-format-tag-prototype)) nil [1571 1783])
            ("semantic-ia-insert-tag" function
               (:overloadable t
                :arguments ("tag"))
                nil [2142 2261])
            ("semantic-ia-insert-tag-default" function (:arguments ("tag")) nil [2263 2501])
            ("defalias" code nil nil [2503 2682])
            ("semantic-ia-get-completions-deprecated" function (:arguments ("context" "point")) nil [2684 3020])
            ("semantic-ia-complete-symbol" function
               (:user-visible-flag t
                :arguments ("pos"))
                nil [3037 5248])
            ("semantic-ia-completion-menu-format-tag-function" variable
               (:user-visible-flag t
                :default-value (quote semantic-format-tag-uml-concise-prototype))
                nil [5250 5480])
            ("semantic-ia-complete-tip" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [7087 7839])
            ("semantic-ia-show-summary" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [7956 8470])
            ("semantic-ia-show-variants" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [8553 9950])
            ("semantic-ia--fast-jump-helper" function (:arguments ("dest")) nil [10142 11452])
            ("declare-function" code nil nil [11454 11534])
            ("semantic-ia-fast-jump" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [11551 13938])
            ("semantic-ia-fast-mouse-jump" function
               (:user-visible-flag t
                :arguments ("evt"))
                nil [13955 14280])
            ("semantic-ia-show-doc" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [14453 15835])
            ("semantic-ia-describe-class" function
               (:user-visible-flag t
                :arguments ("typename"))
                nil [15852 17393])
            ("semantic/ia" package nil nil [17395 17417]))          
      :file "ia.el.gz"
      :pointmax 17566
      :fsize 5974
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1417 . 1418) (symbol 1343 . 1360) (open-paren 1342 . 1343)))
    (semanticdb-table "db-el.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db" include nil nil [1229 1251])
            ("eieio-opt" include nil nil [1252 1272])
            ("declare-function" code nil nil [1274 1340])
            ("declare-function" code nil nil [1341 1400])
            ("semanticdb-table-emacs-lisp" type
               (:superclasses "semanticdb-abstract-table"
                :members 
                  ( ("major-mode" variable (:default-value "emacs-lisp-mode") nil nil))                  
                :type "class")
                nil [1426 1592])
            ("semanticdb-refresh-table" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj" "force"))
                nil [1594 1754])
            ("semanticdb-needs-refresh-p" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj"))
                nil [1756 1877])
            ("object-print" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj" "strings"))
                nil [1879 2138])
            ("semanticdb-project-database-emacs-lisp" type
               (:interfaces ("eieio-singleton")
                :superclasses "semanticdb-project-database"
                :members 
                  ( ("new-table-class" variable
                       (:documentation "New tables created for this database are of this class."
                        :default-value "semanticdb-table-emacs-lisp"
                        :type "class")
                        nil nil))                  
                :type "class")
                nil [2140 2442])
            ("object-print" function
               (:parent "semanticdb-project-database-emacs-lisp"
                :arguments ("obj" "strings"))
                nil [2444 2826])
            ("semanticdb-project-system-databases" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (list (semanticdb-project-database-emacs-lisp "Emacs")))
                nil [2908 3075])
            ("semanticdb-find-default-throttle" variable
               (:parent "emacs-lisp-mode"
                :override-variable-flag t
                :default-value (quote (project omniscience)))
                nil [3077 3328])
            ("semanticdb-get-database-tables" function
               (:parent "semanticdb-project-database-emacs-lisp"
                :arguments ("obj"))
                nil [3360 3958])
            ("semanticdb-file-table" function
               (:parent "semanticdb-project-database-emacs-lisp"
                :arguments ("obj" "filename"))
                nil [3960 4199])
            ("semanticdb-get-tags" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table"))
                nil [4201 4387])
            ("semanticdb-equivalent-mode" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "buffer"))
                nil [4389 4726])
            ("semanticdb-full-filename" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj"))
                nil [4728 4897])
            ("semanticdb-normalize-tags" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj" "tags"))
                nil [4917 5300])
            ("semanticdb-normalize-one-tag" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("obj" "tag"))
                nil [5302 7109])
            ("help-function-arglist" function (:prototype-flag t) nil [7111 7155])
            ("defalias" code nil nil [7156 7228])
            ("make-obsolete" code nil nil [7229 7326])
            ("semanticdb-elisp-sym->tag" function (:arguments ("sym" "toktype")) nil [7328 8799])
            ("semanticdb-elisp-mapatom-collector" variable nil nil [8825 8920])
            ("semanticdb-find-tags-by-name-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "name" "tags"))
                nil [8922 9702])
            ("semanticdb-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "regex" "tags"))
                nil [9704 10103])
            ("semanticdb-find-tags-for-completion-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "prefix" "tags"))
                nil [10105 10494])
            ("semanticdb-find-tags-by-class-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "class" "tags"))
                nil [10496 10842])
            ("semanticdb-deep-find-tags-by-name-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "name" "tags"))
                nil [10926 11243])
            ("semanticdb-deep-find-tags-by-name-regexp-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "regex" "tags"))
                nil [11245 11593])
            ("semanticdb-deep-find-tags-for-completion-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "prefix" "tags"))
                nil [11595 11959])
            ("semanticdb-find-tags-external-children-of-type-method" function
               (:parent "semanticdb-table-emacs-lisp"
                :arguments ("table" "type" "tags"))
                nil [11986 12645])
            ("semantic/db-el" package nil nil [12647 12672]))          
      :file "db-el.el.gz"
      :pointmax 12706
      :fsize 4026
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "ia-sb.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/analyze" include nil nil [963 990])
            ("speedbar" include nil nil [991 1010])
            ("semantic-ia-sb-key-map" variable nil nil [1022 1113])
            ("if" code nil nil [1115 1379])
            ("semantic-ia-sb-easymenu-definition" variable (:default-value (quote ("---" ["Tag Information" semantic-ia-sb-show-tag-info t] ["Jump to Tag" speedbar-edit-line t] ["Complete" speedbar-edit-line t]))) nil [1381 1713])
            ("speedbar-add-expansion-list" code nil nil [1770 1921])
            ("speedbar-add-mode-functions-list" code nil nil [1923 2094])
            ("semantic-speedbar-analysis" function (:user-visible-flag t) nil [2111 2486])
            ("semantic-ia-speedbar" function (:arguments ("directory" "zero")) nil [2488 4409])
            ("semantic-ia-sb-show-doc" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [4411 4809])
            ("semantic-ia-sb-show-scope" function (:arguments ("scope")) nil [4811 5153])
            ("semantic-ia-sb-more-buttons" function
               (:parent "semantic-analyze-context"
                :arguments ("context"))
                nil [5155 5491])
            ("semantic-ia-sb-more-buttons" function
               (:parent "semantic-analyze-context-assignment"
                :arguments ("context"))
                nil [5493 5866])
            ("semantic-ia-sb-more-buttons" function
               (:parent "semantic-analyze-context-functionarg"
                :arguments ("context"))
                nil [5868 6793])
            ("semantic-ia-sb-string-list" function (:arguments ("list" "face" "function" "idx" "idxface")) nil [6795 7786])
            ("semantic-ia-sb-completion-list" function (:arguments ("list" "face" "function")) nil [7788 8465])
            ("semantic-ia-sb-show-tag-info" function (:user-visible-flag t) nil [8467 8843])
            ("semantic-ia-sb-tag-info" function (:arguments ("text" "tag" "indent")) nil [8845 10446])
            ("semantic-ia-sb-line-path" function (:arguments ("depth")) nil [10448 10734])
            ("semantic-ia-sb-complete" function (:arguments ("text" "tag" "indent")) nil [10736 11767])
            ("semantic/ia-sb" package nil nil [11769 11794]))          
      :file "ia-sb.el.gz"
      :pointmax 11949
      :fsize 3850
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "doc.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/tag" include nil nil [1193 1216])
            ("semantic-documentation-for-tag" function
               (:overloadable t
                :arguments ("tag" "nosnarf"))
                nil [1244 2471])
            ("semantic-documentation-comment-preceeding-tag" function (:arguments ("tag" "nosnarf")) nil [2521 3406])
            ("semantic-doc-snarf-comment-for-tag" function (:arguments ("nosnarf")) nil [3408 5060])
            ("semantic/doc" package nil nil [5062 5085]))          
      :file "doc.el.gz"
      :pointmax 5236
      :fsize 2096
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "texi.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic/db-find" include nil nil [1103 1130])
            ("semantic/format" include nil nil [1131 1157])
            ("semantic/ctxt" include nil nil [1158 1182])
            ("texinfo" include nil nil [1183 1201])
            ("ede-minor-mode" variable nil nil [1203 1226])
            ("declare-function" code nil nil [1227 1274])
            ("declare-function" code nil nil [1275 1319])
            ("semantic-texi-super-regex" variable (:default-value "^@\\(top\\|chapter\\|\\(sub\\)*section\\|unnumbered\\(\\(sub\\)*sec\\)?\\|\\(chap\\|\\(sub\\)+\\|major\\)?heading\\|appendix\\(\\(sub\\)*sec\\)?\\|centerchap\\|def\\(var\\|un\\|fn\\|opt\\)x?\\)") nil [1321 1629])
            ("semantic-texi-name-field-list" variable (:default-value (quote (("defvar" . 1) ("defvarx" . 1) ("defun" . 1) ("defunx" . 1) ("defopt" . 1) ("deffn" . 2) ("deffnx" . 2)))) nil [1631 1959])
            ("semantic-texi-parse-region" function (:arguments ("ignore")) nil [1971 2413])
            ("semantic-texi-parse-changes" function nil nil [2415 2630])
            ("semantic-texi-expand-tag" function (:arguments ("tag")) nil [2632 2899])
            ("semantic-texi-parse-headings" function nil nil [2901 3687])
            ("semantic-texi-new-section-tag" function (:arguments ("name" "members" "start" "end")) nil [3689 4068])
            ("semantic-texi-new-def-tag" function (:arguments ("name" "start" "end")) nil [4070 4327])
            ("semantic-texi-set-endpoint" function (:arguments ("metataglist" "pnt")) nil [4329 4856])
            ("semantic-texi-recursive-combobulate-list" function (:arguments ("sectionlist" "level")) nil [4858 7884])
            ("semantic-texi-forward-deffn" function nil nil [7886 8172])
            ("semantic-tag-components" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("tag"))
                nil [8174 8331])
            ("semantic-texi-environment-regexp" variable (:default-value (if (string-match texinfo-environment-regexp "@menu") texinfo-environment-regexp (when (string-match "cartouche" texinfo-environment-regexp) (concat (substring texinfo-environment-regexp 0 (match-beginning 0)) "menu\\|" (substring texinfo-environment-regexp (match-beginning 0)))))) nil [8408 9020])
            ("semantic-up-context" function
               (:parent "texinfo-mode"
                :override-function-flag t)
                nil [9022 10147])
            ("semantic-beginning-of-context" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [10149 10680])
            ("semantic-ctxt-current-class-list" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("&optional" "point"))
                nil [10682 11155])
            ("semantic-format-tag-abbreviate" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [11241 11601])
            ("semantic-format-tag-prototype" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("tag" "&optional" "parent" "color"))
                nil [11603 11789])
            ("semantic-tag-texi-section-text-bounds" function (:arguments ("tag")) nil [11821 12432])
            ("semantic-texi-current-environment" function (:arguments ("point")) nil [12434 12891])
            ("semantic/analyze" include nil nil [12932 12959])
            ("semantic-analyze-current-context" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("point"))
                nil [12962 13585])
            ("semantic-texi-command-completion-list" variable (:default-value (append (mapcar (lambda (a) (car a)) texinfo-section-list) (condition-case nil texinfo-environments (error (split-string texinfo-environment-regexp "\\\\|\\|\\^@\\\\(\\|\\\\)"))) "anchor" "asis" "bullet" "code" "copyright" "defun" "deffn" "defoption" "defvar" "dfn" "emph" "end" "ifinfo" "iftex" "inforef" "item" "itemx" "kdb" "node" "ref" "set" "setfilename" "settitle" "value" "var" "xref")) nil [13587 14293])
            ("semantic-analyze-possible-completions" function
               (:parent "texinfo-mode"
                :override-function-flag t
                :arguments ("context"))
                nil [14295 15254])
            ("semantic-imenu-expandable-tag-classes" variable nil nil [15322 15368])
            ("semantic-imenu-bucketize-file" variable nil nil [15369 15407])
            ("semantic-imenu-bucketize-type-members" variable nil nil [15408 15454])
            ("semantic-default-texi-setup" function nil nil [15471 16407])
            ("add-hook" code nil nil [16409 16467])
            ("semantic-texi-associated-files" function (:arguments ("buffer")) nil [16742 17525])
            ("semantic-texi-find-documentation" function (:arguments ("name" "type")) nil [17599 18445])
            ("semantic-texi-goto-source" function
               (:user-visible-flag t
                :arguments ("tag"))
                nil [23478 24599])
            ("semantic/texi" package nil nil [24601 24625]))          
      :file "texi.el.gz"
      :pointmax 24778
      :fsize 7820
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 12959 . 12960) (symbol 12912 . 12929) (open-paren 12911 . 12912)))
    (semanticdb-table "tag-write.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("semantic" include nil nil [1253 1272])
            ("semantic-tag-write-one-tag" function (:arguments ("tag" "indent")) nil [1284 2856])
            ("semantic-tag-write-tag-list" function (:arguments ("tlist" "indent" "dontaddnewline")) nil [2858 3842])
            ("semantic-tag-write-one-attribute" function (:arguments ("attrs" "indent")) nil [3874 4305])
            ("semantic-tag-write-one-value" function (:arguments ("value" "indent")) nil [4307 5006])
            ("semantic-tag-write-list-slot-value" function (:arguments ("value")) nil [5038 5277])
            ("semantic/tag-write" package nil nil [5279 5308]))          
      :file "tag-write.el.gz"
      :pointmax 5471
      :fsize 2142
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!24.5!lisp!cedet!semantic!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
