;; Object helm-2.8.5/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "helm-2.8.5/"
  :tables
  (list
    (semanticdb-table "helm-buffers.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [812 829])
            ("helm" include nil nil [830 845])
            ("helm-types" include nil nil [846 867])
            ("helm-utils" include nil nil [868 889])
            ("helm-grep" include nil nil [890 910])
            ("helm-regexp" include nil nil [911 933])
            ("helm-help" include nil nil [934 954])
            ("declare-function" code nil nil [956 1011])
            ("declare-function" code nil nil [1012 1068])
            ("declare-function" code nil nil [1069 1114])
            ("declare-function" code nil nil [1115 1166])
            ("helm-buffers" customgroup (:user-visible-flag t) nil [1170 1269])
            ("helm-boring-buffer-regexp-list" variable (:default-value (quote ("\\` " "\\`\\*helm" "\\`\\*Echo Area" "\\`\\*Minibuf"))) nil [1271 1639])
            ("helm-white-buffer-regexp-list" variable nil nil [1641 1878])
            ("helm-buffers-favorite-modes" variable (:default-value (quote (lisp-interaction-mode emacs-lisp-mode text-mode org-mode))) nil [1880 2214])
            ("helm-buffer-max-length" variable (:default-value 20) nil [2216 2484])
            ("helm-buffer-details-flag" variable (:default-value t) nil [2486 2618])
            ("helm-buffers-fuzzy-matching" variable nil nil [2620 2855])
            ("helm-buffer-skip-remote-checking" variable nil nil [2857 3002])
            ("helm-buffers-truncate-lines" variable (:default-value t) nil [3004 3142])
            ("helm-mini-default-sources" variable (:default-value (quote (helm-source-buffers-list helm-source-recentf helm-source-buffer-not-found))) nil [3144 3554])
            ("helm-buffers-end-truncated-string" variable (:default-value "...") nil [3556 3706])
            ("helm-buffers-faces" customgroup (:user-visible-flag t) nil [3726 3867])
            ("helm-buffer-saved-out" variable
               (:default-value (quote ((t (:foreground "red" :background "black"))))
                :type "face")
                nil [3869 4038])
            ("helm-buffer-not-saved" variable
               (:default-value (quote ((t (:foreground "Indianred2"))))
                :type "face")
                nil [4040 4196])
            ("helm-buffer-modified" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [4198 4336])
            ("helm-buffer-size" variable
               (:default-value (quote ((((background dark)) :foreground "RosyBrown") (((background light)) :foreground "SlateGray")))
                :type "face")
                nil [4338 4530])
            ("helm-buffer-process" variable
               (:default-value (quote ((t (:foreground "Sienna3"))))
                :type "face")
                nil [4532 4669])
            ("helm-buffer-directory" variable
               (:default-value (quote ((t (:foreground "DarkRed" :background "LightGray"))))
                :type "face")
                nil [4671 4844])
            ("helm-buffer-file" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [4846 4999])
            ("helm-non-file-buffer" variable
               (:default-value (quote ((t (:inherit italic))))
                :type "face")
                nil [5001 5148])
            ("helm-buffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-g s") (quote helm-buffer-run-zgrep)) (define-key map (kbd "C-s") (quote helm-buffers-run-multi-occur)) (define-key map (kbd "C-x C-d") (quote helm-buffers-run-browse-project)) (define-key map (kbd "C-c o") (quote helm-buffer-switch-other-window)) (define-key map (kbd "C-c C-o") (quote helm-buffer-switch-other-frame)) (define-key map (kbd "C-c =") (quote helm-buffer-run-ediff)) (define-key map (kbd "M-=") (quote helm-buffer-run-ediff-merge)) (define-key map (kbd "C-=") (quote helm-buffer-diff-persistent)) (define-key map (kbd "M-G") (quote helm-buffer-revert-persistent)) (define-key map (kbd "C-c d") (quote helm-buffer-run-kill-persistent)) (define-key map (kbd "M-D") (quote helm-buffer-run-kill-buffers)) (define-key map (kbd "C-x C-s") (quote helm-buffer-save-persistent)) (define-key map (kbd "C-M-%") (quote helm-buffer-run-query-replace-regexp)) (define-key map (kbd "M-%") (quote helm-buffer-run-query-replace)) (define-key map (kbd "M-m") (quote helm-toggle-all-marks)) (define-key map (kbd "M-a") (quote helm-mark-all)) (define-key map (kbd "C-]") (quote helm-toggle-buffers-details)) (define-key map (kbd "C-c a") (quote helm-buffers-toggle-show-hidden-buffers)) (define-key map (kbd "<C-M-SPC>") (quote helm-buffers-mark-similar-buffers)) map)) nil [5174 6813])
            ("helm-buffers-ido-virtual-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "C-c o") (quote helm-ff-run-switch-other-window)) (define-key map (kbd "C-c C-o") (quote helm-ff-run-switch-other-frame)) (define-key map (kbd "M-g s") (quote helm-ff-run-grep)) (define-key map (kbd "M-g z") (quote helm-ff-run-zgrep)) (define-key map (kbd "M-D") (quote helm-ff-run-delete-file)) (define-key map (kbd "C-c C-x") (quote helm-ff-run-open-file-externally)) map)) nil [6815 7317])
            ("helm-buffers-list-cache" variable nil nil [7321 7357])
            ("helm-buffer-max-len-mode" variable nil nil [7358 7395])
            ("helm-buffers-in-project-p" variable nil nil [7396 7434])
            ("helm-buffers-list--init" function nil nil [7436 8230])
            ("helm-source-buffers" type
               (:interfaces ("helm-type-buffer")
                :superclasses "helm-source-sync"
                :members 
                  ( ("buffer-list" variable
                       (:documentation "  A function with no arguments to create buffer list."
                        :default-value "(function helm-buffer-list)")
                        nil nil)
                    ("init" variable (:default-value "(quote helm-buffers-list--init)") nil nil)
                    ("candidates" variable (:default-value "helm-buffers-list-cache") nil nil)
                    ("multimatch" variable (:default-value "nil") nil nil)
                    ("match" variable (:default-value "(quote helm-buffers-match-function)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-buffers-list-persistent-action)") nil nil)
                    ("resume" variable (:default-value "(lambda nil (run-with-idle-timer 0.1 nil (lambda nil (with-helm-buffer (helm-force-update)))))") nil nil)
                    ("keymap" variable (:default-value "helm-buffer-map") nil nil)
                    ("migemo" variable (:default-value "(quote nomultimatch)") nil nil)
                    ("volatile" variable (:default-value "t") nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("resume" variable (:default-value "(lambda nil (setq helm-buffers-in-project-p nil))") nil nil)
                    ("help-message" variable (:default-value "(quote helm-buffer-help-message)") nil nil))                  
                :type "class")
                nil [8232 9206])
            ("helm-source-buffers-list" variable nil nil [9208 9245])
            ("helm-source-buffer-not-found" variable (:default-value (helm-build-dummy-source "Create buffer" :action (helm-make-actions "Create buffer (C-u choose mode)" (lambda (candidate) (let ((mjm (or (and helm-current-prefix-arg (intern-soft (helm-comp-read "Major-mode: " helm-buffers-favorite-modes))) (cl-loop for (r . m) in auto-mode-alist when (string-match r candidate) return m))) (buffer (get-buffer-create candidate))) (if mjm (with-current-buffer buffer (funcall mjm)) (set-buffer-major-mode buffer)) (switch-to-buffer buffer)))))) nil [9247 10123])
            ("ido-temp-list" variable nil nil [10125 10147])
            ("ido-ignored-list" variable nil nil [10148 10173])
            ("ido-process-ignore-lists" variable nil nil [10174 10207])
            ("ido-use-virtual-buffers" variable nil nil [10208 10240])
            ("ido-virtual-buffers" variable nil nil [10241 10269])
            ("helm-source-ido-virtual-buffers" variable (:default-value (helm-build-sync-source "Ido virtual buffers" :candidates (lambda nil (let (ido-temp-list ido-ignored-list (ido-process-ignore-lists t)) (when ido-use-virtual-buffers (ido-add-virtual-buffers-to-list) ido-virtual-buffers))) :fuzzy-match helm-buffers-fuzzy-matching :keymap helm-buffers-ido-virtual-map :help-message (quote helm-buffers-ido-virtual-help-message) :action (quote (("Find file" . helm-find-many-files) ("Find file other window" . find-file-other-window) ("Find file other frame" . find-file-other-frame) ("Find file as root" . helm-find-file-as-root) ("Grep File(s) `C-u recurse'" . helm-find-files-grep) ("Zgrep File(s) `C-u Recurse'" . helm-ff-zgrep) ("View file" . view-file) ("Delete file(s)" . helm-delete-marked-files) ("Open file externally (C-u to choose)" . helm-open-file-externally))))) nil [10271 11385])
            ("ido-use-virtual-buffers" variable nil nil [11389 11421])
            ("ido-ignore-buffers" variable nil nil [11422 11449])
            ("helm-buffer-list" function nil nil [11450 11789])
            ("helm-buffer-size" function (:arguments ("buffer")) nil [11791 12027])
            ("helm-buffer--show-details" function (:arguments ("buf-name" "prefix" "help-echo" "size" "mode" "dir" "face1" "face2" "proc" "details" "type")) nil [12029 12678])
            ("helm-buffer--details" function (:arguments ("buffer" "details")) nil [12680 15214])
            ("helm-highlight-buffers" function (:arguments ("buffers" "_source")) nil [15216 17242])
            ("helm-buffer--get-preselection" function (:arguments ("buffer")) nil [17244 17876])
            ("helm-toggle-buffers-details" function nil nil [17878 18152])
            ("put" code nil nil [18153 18200])
            ("helm-buffers--pattern-sans-filters" function (:arguments ("separator")) nil [18202 18489])
            ("helm-buffers-sort-transformer" function (:arguments ("candidates" "source")) nil [18491 18885])
            ("helm-buffers-mark-similar-buffers-1" function nil nil [18887 20034])
            ("helm-buffers-mark-similar-buffers" function (:user-visible-flag t) nil [20036 20425])
            ("put" code nil nil [20426 20479])
            ("helm-buffer--match-mjm" function (:arguments ("pattern" "mjm")) nil [20506 21194])
            ("helm-buffer--memo-hash" variable (:default-value (make-hash-table :test (quote equal))) nil [21196 21258])
            ("helm-buffer--memo-pattern" function (:arguments ("pattern")) nil [21259 21446])
            ("helm-buffer--match-pattern" function (:arguments ("pattern" "candidate" "nofuzzy")) nil [21448 22076])
            ("helm-buffers--match-from-mjm" function (:arguments ("candidate")) nil [22078 22630])
            ("helm-buffers--match-from-pat" function (:arguments ("candidate")) nil [22632 23155])
            ("helm-buffers--match-from-inside" function (:arguments ("candidate")) nil [23157 23820])
            ("helm-buffers--match-from-directory" function (:arguments ("candidate")) nil [23822 24532])
            ("helm-buffers-match-function" function (:arguments ("candidate")) nil [24534 24822])
            ("helm-buffer-query-replace-1" function (:arguments ("regexp-flag" "buffers")) nil [24826 25692])
            ("helm-buffer-query-replace-regexp" function (:arguments ("_candidate")) nil [25694 25787])
            ("helm-buffer-query-replace" function (:arguments ("_candidate")) nil [25789 25867])
            ("helm-buffer-toggle-diff" function (:arguments ("candidate")) nil [25869 26147])
            ("helm-buffer-diff-persistent" function (:user-visible-flag t) nil [26149 26378])
            ("put" code nil nil [26379 26426])
            ("helm-revert-buffer" function (:arguments ("candidate")) nil [26428 26587])
            ("helm-revert-marked-buffers" function (:arguments ("_ignore")) nil [26589 26687])
            ("helm-buffer-revert-and-update" function (:arguments ("_candidate")) nil [26689 27056])
            ("helm-buffer-revert-persistent" function (:user-visible-flag t) nil [27058 27310])
            ("put" code nil nil [27311 27360])
            ("helm-buffer-save-and-update" function (:arguments ("_candidate")) nil [27362 27816])
            ("helm-buffer-save-persistent" function (:user-visible-flag t) nil [27818 28060])
            ("put" code nil nil [28061 28108])
            ("helm-buffer-run-kill-persistent" function (:user-visible-flag t) nil [28110 28357])
            ("put" code nil nil [28358 28409])
            ("helm-kill-marked-buffers" function (:arguments ("_ignore")) nil [28411 28750])
            ("helm-buffer-run-kill-buffers" function (:user-visible-flag t) nil [28752 28950])
            ("put" code nil nil [28951 28999])
            ("helm-buffer-run-grep" function (:user-visible-flag t) nil [29001 29177])
            ("put" code nil nil [29178 29218])
            ("helm-buffer-run-zgrep" function (:user-visible-flag t) nil [29220 29398])
            ("put" code nil nil [29399 29440])
            ("helm-buffer-run-query-replace-regexp" function (:user-visible-flag t) nil [29442 29665])
            ("put" code nil nil [29666 29722])
            ("helm-buffer-run-query-replace" function (:user-visible-flag t) nil [29724 29926])
            ("put" code nil nil [29927 29976])
            ("helm-buffer-switch-other-window" function (:user-visible-flag t) nil [29978 30200])
            ("put" code nil nil [30201 30252])
            ("helm-buffer-switch-other-frame" function (:user-visible-flag t) nil [30254 30468])
            ("put" code nil nil [30469 30519])
            ("helm-buffer-run-ediff" function (:user-visible-flag t) nil [30521 30707])
            ("put" code nil nil [30708 30749])
            ("helm-buffer-run-ediff-merge" function (:user-visible-flag t) nil [30751 30949])
            ("put" code nil nil [30950 30997])
            ("helm-buffers-persistent-kill-1" function (:arguments ("buffer-or-name")) nil [30999 31751])
            ("helm-buffers--quote-truncated-buffer" function (:arguments ("buffer")) nil [31753 32081])
            ("helm-buffers-persistent-kill" function (:arguments ("_buffer")) nil [32083 32831])
            ("helm-buffers-list-persistent-action" function (:arguments ("candidate")) nil [32833 33195])
            ("helm-ediff-marked-buffers" function (:arguments ("_candidate" "merge")) nil [33197 33905])
            ("helm-ediff-marked-buffers-merge" function (:arguments ("candidate")) nil [33907 34087])
            ("helm-multi-occur-as-action" function (:arguments ("_candidate")) nil [34089 34698])
            ("helm-buffers-run-multi-occur" function (:user-visible-flag t) nil [34700 34885])
            ("put" code nil nil [34886 34934])
            ("helm-buffers-toggle-show-hidden-buffers" function nil nil [34936 35792])
            ("put" code nil nil [35793 35852])
            ("helm-buffers-browse-project" function (:arguments ("buf")) nil [35854 36005])
            ("helm-buffers-run-browse-project" function (:user-visible-flag t) nil [36007 36305])
            ("helm-skip-boring-buffers" function (:arguments ("buffers" "_source")) nil [36341 36524])
            ("helm-shadow-boring-buffers" function (:arguments ("buffers" "_source")) nil [36526 36755])
            ("helm-buffers-list" function (:user-visible-flag t) nil [36774 37254])
            ("helm-mini" function (:user-visible-flag t) nil [37271 37706])
            ("helm-quit-and-helm-mini" function (:user-visible-flag t) nil [37708 37856])
            ("helm-buffers" package nil nil [37858 37881]))          
      :file "helm-buffers.el"
      :pointmax 38025
      :fsize 38024
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-types.el"
      :file "helm-types.el"
      :fsize 11537
      :lastmodtime '(23227 37266 588700 755000))
    (semanticdb-table "helm-utils.el"
      :file "helm-utils.el"
      :fsize 37097
      :lastmodtime '(23227 37266 588700 755000))
    (semanticdb-table "helm-grep.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [804 821])
            ("helm" include nil nil [822 837])
            ("helm-help" include nil nil [838 858])
            ("helm-regexp" include nil nil [859 881])
            ("wgrep-helm" include nil nil [922 949])
            ("declare-function" code nil nil [951 1001])
            ("declare-function" code nil nil [1002 1037])
            ("declare-function" code nil nil [1038 1093])
            ("declare-function" code nil nil [1094 1153])
            ("declare-function" code nil nil [1154 1206])
            ("helm--ansi-color-regexp" variable nil nil [1207 1239])
            ("helm-grep" customgroup (:user-visible-flag t) nil [1243 1336])
            ("helm-grep-default-command" variable (:default-value "grep --color=always -a -d skip %e -n%cH -e %p %f") nil [1338 3983])
            ("helm-grep-default-recurse-command" variable (:default-value "grep --color=always -a -d recurse %e -n%cH -e %p %f") nil [3985 4262])
            ("helm-default-zgrep-command" variable (:default-value "zgrep --color=always -a -n%cH -e %p %f") nil [4264 4627])
            ("helm-pdfgrep-default-command" variable (:default-value "pdfgrep --color always -niH %s %s") nil [4629 4916])
            ("helm-pdfgrep-default-recurse-command" variable (:default-value "pdfgrep --color always -rniH %s %s") nil [4918 5222])
            ("helm-grep-use-ioccur-style-keys" variable (:default-value t) nil [5224 5349])
            ("helm-pdfgrep-default-read-command" variable nil nil [5351 5695])
            ("helm-grep-max-length-history" variable (:default-value 100) nil [5697 5837])
            ("helm-zgrep-file-extension-regexp" variable (:default-value ".*\\(\\.gz\\|\\.bz\\|\\.xz\\|\\.lzma\\)$") nil [5839 6014])
            ("helm-grep-preferred-ext" variable nil nil [6016 6146])
            ("helm-grep-save-buffer-name-no-confirm" variable nil nil [6148 6290])
            ("helm-grep-ignored-files" variable (:default-value (cons ".#*" (delq nil (mapcar (lambda (s) (unless (string-match-p "/\\'" s) (concat "*" s))) completion-ignored-extensions)))) nil [6292 6658])
            ("helm-grep-ignored-directories" variable (:default-value helm-walk-ignore-directories) nil [6660 6856])
            ("helm-grep-truncate-lines" variable (:default-value t) nil [6858 6996])
            ("helm-grep-file-path-style" variable (:default-value (quote basename)) nil [6998 7466])
            ("helm-grep-actions" variable (:default-value (helm-make-actions "Find File" (quote helm-grep-action) "Find file other frame" (quote helm-grep-other-frame) "Save results in grep buffer" (quote helm-grep-save-results) "Find file other window (C-u vertically)" (quote helm-grep-other-window))) nil [7468 7830])
            ("helm-grep-pipe-cmd-switches" variable nil nil [7832 8394])
            ("helm-grep-ag-pipe-cmd-switches" variable nil nil [8396 8719])
            ("helm-grep-faces" customgroup (:user-visible-flag t) nil [8739 8871])
            ("helm-grep-match" variable
               (:default-value (quote ((((background light)) :foreground "#b00000") (((background dark)) :foreground "gold1")))
                :type "face")
                nil [8873 9062])
            ("helm-grep-file" variable
               (:default-value (quote ((t (:foreground "BlueViolet" :underline t))))
                :type "face")
                nil [9064 9226])
            ("helm-grep-lineno" variable
               (:default-value (quote ((t (:foreground "Darkorange1"))))
                :type "face")
                nil [9228 9365])
            ("helm-grep-finish" variable
               (:default-value (quote ((t (:foreground "Green"))))
                :type "face")
                nil [9367 9500])
            ("helm-grep-cmd-line" variable
               (:default-value (quote ((t (:inherit font-lock-type-face))))
                :type "face")
                nil [9502 9660])
            ("helm-grep-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-<down>") (quote helm-goto-next-file)) (define-key map (kbd "M-<up>") (quote helm-goto-precedent-file)) (define-key map (kbd "C-c o") (quote helm-grep-run-other-window-action)) (define-key map (kbd "C-c C-o") (quote helm-grep-run-other-frame-action)) (define-key map (kbd "C-x C-s") (quote helm-grep-run-save-buffer)) (when helm-grep-use-ioccur-style-keys (define-key map (kbd "<right>") (quote helm-execute-persistent-action)) (define-key map (kbd "<left>") (quote helm-grep-run-default-action))) (delq nil map))) nil [9682 10347])
            ("helm-pdfgrep-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-<down>") (quote helm-goto-next-file)) (define-key map (kbd "M-<up>") (quote helm-goto-precedent-file)) map)) nil [10349 10607])
            ("helm-grep-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote helm-grep-mode-jump)) (define-key map (kbd "C-o") (quote helm-grep-mode-jump-other-window)) (define-key map (kbd "<C-down>") (quote helm-grep-mode-jump-other-window-forward)) (define-key map (kbd "<C-up>") (quote helm-grep-mode-jump-other-window-backward)) (define-key map (kbd "<M-down>") (quote helm-gm-next-file)) (define-key map (kbd "<M-up>") (quote helm-gm-precedent-file)) (define-key map (kbd "M-n") (quote helm-grep-mode-jump-other-window-forward)) (define-key map (kbd "M-p") (quote helm-grep-mode-jump-other-window-backward)) (define-key map (kbd "M-N") (quote helm-gm-next-file)) (define-key map (kbd "M-P") (quote helm-gm-precedent-file)) map)) nil [10609 11372])
            ("helm-rzgrep-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [11401 11458])
            ("helm-grep-default-function" variable (:default-value (quote helm-grep-init)) nil [11459 11510])
            ("helm-zgrep-recurse-flag" variable nil nil [11511 11547])
            ("helm-grep-history" variable nil nil [11548 11578])
            ("helm-grep-ag-history" variable nil nil [11579 11612])
            ("helm-grep-last-targets" variable nil nil [11613 11648])
            ("helm-grep-include-files" variable nil nil [11649 11685])
            ("helm-grep-in-recurse" variable nil nil [11686 11719])
            ("helm-grep-use-zgrep" variable nil nil [11720 11752])
            ("helm-grep-default-directory-fn" variable nil nil [11753 11937])
            ("helm-pdfgrep-targets" variable nil nil [11938 11971])
            ("helm-grep-last-cmd-line" variable nil nil [11972 12008])
            ("helm-grep-split-line-regexp" variable (:default-value "^\\([[:lower:][:upper:]]?:?.*?\\):\\([0-9]+\\):\\(.*\\)") nil [12009 12103])
            ("helm-grep-prepare-candidates" function (:arguments ("candidates" "in-directory")) nil [12122 15947])
            ("helm-grep-command" function (:arguments ("recursive" "grep")) nil [15949 16302])
            ("cl-defun" code nil nil [16304 16930])
            ("helm-grep--pipe-command-for-grep-command" function (:arguments ("smartcase" "pipe-switches" "grep-cmd")) nil [16932 17447])
            ("helm-grep--prepare-cmd-line" function (:arguments ("only-files" "include" "zgrep")) nil [17449 20508])
            ("helm-grep-init" function (:arguments ("cmd-line")) nil [20510 24910])
            ("helm-grep-collect-candidates" function nil nil [24912 25242])
            ("helm-grep-action" function (:arguments ("candidate" "where" "mark")) nil [25264 28076])
            ("helm-grep-persistent-action" function (:arguments ("candidate")) nil [28078 28356])
            ("helm-grep-other-window" function (:arguments ("candidate")) nil [28358 28496])
            ("helm-grep-other-frame" function (:arguments ("candidate")) nil [28498 28633])
            ("helm-goto-next-or-prec-file" function (:arguments ("n")) nil [28635 30506])
            ("helm-goto-precedent-file" function (:user-visible-flag t) nil [30523 30711])
            ("put" code nil nil [30712 30756])
            ("helm-goto-next-file" function (:user-visible-flag t) nil [30773 30929])
            ("helm-grep-run-default-action" function (:user-visible-flag t) nil [30931 31112])
            ("put" code nil nil [31113 31161])
            ("helm-grep-run-other-window-action" function (:user-visible-flag t) nil [31163 31365])
            ("put" code nil nil [31366 31419])
            ("helm-grep-run-other-frame-action" function (:user-visible-flag t) nil [31421 31620])
            ("put" code nil nil [31621 31673])
            ("helm-grep-run-save-buffer" function (:user-visible-flag t) nil [31675 31864])
            ("put" code nil nil [31865 31910])
            ("helm-grep-save-results" function (:arguments ("candidate")) nil [31939 32018])
            ("helm-grep-save-results-1" function nil nil [32020 34463])
            ("helm-grep-mode-mouse-jump" function (:arguments ("event")) nil [34465 34760])
            ("put" code nil nil [34761 34806])
            ("define-derived-mode" code nil nil [34808 35193])
            ("put" code nil nil [35194 35228])
            ("helm-grep-mode--revert-buffer-function" function (:arguments ("_ignore-auto" "_noconfirm")) nil [35230 35871])
            ("helm-grep-mode--sentinel" function (:arguments ("process" "event")) nil [35873 36767])
            ("helm-gm-next-file" function nil nil [36769 36847])
            ("helm-gm-precedent-file" function nil nil [36849 36933])
            ("helm-grep-mode-jump" function nil nil [36935 37088])
            ("helm-grep-mode-jump-other-window-1" function (:arguments ("arg")) nil [37090 37452])
            ("helm-grep-mode-jump-other-window-forward" function nil nil [37454 37562])
            ("helm-grep-mode-jump-other-window-backward" function nil nil [37564 37674])
            ("helm-grep-mode-jump-other-window" function nil nil [37676 37955])
            ("helm-grep-hack-types" function nil nil [37984 38935])
            ("helm-grep-ack-types-transformer" function (:arguments ("candidates" "_source")) nil [38937 39136])
            ("helm-grep-ack-types-cache" variable nil nil [39138 39176])
            ("helm-grep-read-ack-type" function nil nil [39177 39799])
            ("helm-grep-guess-extensions" function (:arguments ("files")) nil [39829 40784])
            ("helm-grep-get-file-extensions" function (:arguments ("files")) nil [40786 41769])
            ("helm-grep-before-init-hook" variable nil nil [41797 41897])
            ("helm-grep-after-init-hook" variable nil nil [41899 41997])
            ("helm-grep-class" type
               (:superclasses "helm-source-async"
                :members 
                  ( ("candidates-process" variable (:default-value "(quote helm-grep-collect-candidates)") nil nil)
                    ("filter-one-by-one" variable (:default-value "(quote helm-grep-filter-one-by-one)") nil nil)
                    ("keymap" variable (:default-value "helm-grep-map") nil nil)
                    ("pcre" variable
                       (:documentation "  Backend is using pcre regexp engine when non--nil."
                        :default-value "nil")
                        nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("nomark" variable (:default-value "t") nil nil)
                    ("backend" variable
                       (:documentation "  The grep backend that will be used.
  It is actually used only as an internal flag
  and don't set the backend by itself.
  You probably don't want to modify this."
                        :default-value "nil")
                        nil nil)
                    ("candidate-number-limit" variable (:default-value "9999") nil nil)
                    ("help-message" variable (:default-value "(quote helm-grep-help-message)") nil nil)
                    ("history" variable (:default-value "(quote helm-grep-history)") nil nil)
                    ("action" variable (:default-value "(quote helm-grep-actions)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-grep-persistent-action)") nil nil)
                    ("persistent-help" variable (:default-value "Jump to line (`C-u' Record in mark ring)") nil nil)
                    ("requires-pattern" variable (:default-value "2") nil nil)
                    ("before-init-hook" variable (:default-value "(quote helm-grep-before-init-hook)") nil nil)
                    ("after-init-hook" variable (:default-value "(quote helm-grep-after-init-hook)") nil nil)
                    ("group" variable (:default-value "(quote helm-grep)") nil nil))                  
                :type "class")
                nil [41999 43150])
            ("helm-source-grep" variable nil nil [43152 43181])
            ("helm--setup-source" function
               (:parent "helm-grep-class"
                :arguments ("source"))
                nil [43183 43529])
            ("cl-defun" code nil nil [43531 47560])
            ("helm-ff-zgrep-1" function (:arguments ("flist" "recursive")) nil [47580 48361])
            ("helm-grep-split-line" function (:arguments ("line")) nil [48388 48864])
            ("helm-grep--filter-candidate-1" function (:arguments ("candidate" "dir")) nil [48866 50263])
            ("helm-grep-filter-one-by-one" function (:arguments ("candidate")) nil [50265 50893])
            ("helm-grep-highlight-match" function (:arguments ("str" "multi-match")) nil [50895 52221])
            ("helm-grep-buffers-1" function (:arguments ("candidate" "zgrep")) nil [52257 53859])
            ("helm-grep-buffers" function (:arguments ("candidate")) nil [53861 53960])
            ("helm-zgrep-buffers" function (:arguments ("candidate")) nil [53962 54070])
            ("helm-pdfgrep-default-function" variable (:default-value (quote helm-pdfgrep-init)) nil [54206 54263])
            ("helm-pdfgrep-init" function (:arguments ("only-files" "recurse")) nil [54264 56431])
            ("helm-do-pdfgrep-1" function (:arguments ("only" "recurse")) nil [56433 58045])
            ("helm-pdfgrep-action" function (:arguments ("candidate")) nil [58047 58122])
            ("helm-pdfgrep-action-1" function (:arguments ("_split" "pageno" "fname")) nil [58124 58372])
            ("helm-grep-ag-command" variable (:default-value "ag --line-numbers -S --hidden --color --nogroup %s %s %s") nil [58548 59774])
            ("helm-grep--ag-command" function nil nil [59776 59896])
            ("helm-grep-ag-get-types" function nil nil [59898 60694])
            ("helm-grep-ag-prepare-cmd-line" function (:arguments ("pattern" "directory" "type")) nil [60696 61808])
            ("helm-grep-ag-init" function (:arguments ("directory" "type")) nil [61810 65072])
            ("helm-grep-ag-class" type
               (:superclasses "helm-source-async"
                :members 
                  ( ("nohighlight" variable (:default-value "t") nil nil)
                    ("pcre" variable
                       (:documentation "  Backend is using pcre regexp engine when non--nil."
                        :default-value "t")
                        nil nil)
                    ("keymap" variable (:default-value "helm-grep-map") nil nil)
                    ("history" variable (:default-value "(quote helm-grep-ag-history)") nil nil)
                    ("help-message" variable (:default-value "(quote helm-grep-help-message)") nil nil)
                    ("filter-one-by-one" variable (:default-value "(quote helm-grep-filter-one-by-one)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-grep-persistent-action)") nil nil)
                    ("persistent-help" variable (:default-value "Jump to line (`C-u' Record in mark ring)") nil nil)
                    ("candidate-number-limit" variable (:default-value "99999") nil nil)
                    ("requires-pattern" variable (:default-value "2") nil nil)
                    ("nomark" variable (:default-value "t") nil nil)
                    ("action" variable (:default-value "(quote helm-grep-actions)") nil nil)
                    ("group" variable (:default-value "(quote helm-grep)") nil nil))                  
                :type "class")
                nil [65074 65784])
            ("helm-source-grep-ag" variable nil nil [65786 65818])
            ("helm--setup-source" function
               (:parent "helm-grep-ag-class"
                :arguments ("source"))
                nil [65820 66090])
            ("helm-grep-ag-1" function (:arguments ("directory" "type")) nil [66092 66779])
            ("helm-grep-ag" function (:arguments ("directory" "with-types")) nil [66781 67341])
            ("helm-source-grep-git" variable nil nil [67362 67395])
            ("helm-grep-git-grep-command" variable (:default-value "git --no-pager grep -n%cH --color=always --exclude-standard --no-index --full-name -e %p -- %f") nil [67397 68056])
            ("helm-grep-git-1" function (:arguments ("directory" "all" "default" "input")) nil [68058 69040])
            ("helm-do-grep-ag" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [69059 69325])
            ("helm-grep-do-git-grep" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [69342 69577])
            ("helm-grep" package nil nil [69580 69600]))          
      :file "helm-grep.el"
      :pointmax 69741
      :fsize 69740
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-regexp.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [837 854])
            ("helm" include nil nil [855 870])
            ("helm-help" include nil nil [871 891])
            ("helm-utils" include nil nil [892 913])
            ("declare-function" code nil nil [915 974])
            ("helm-regexp" customgroup (:user-visible-flag t) nil [978 1075])
            ("helm-moccur-always-search-in-current" variable nil nil [1077 1236])
            ("helm-moccur-use-ioccur-style-keys" variable (:default-value t) nil [1238 1394])
            ("helm-moccur-auto-update-on-resume" variable nil nil [1396 2078])
            ("helm-source-multi-occur-actions" variable (:default-value (quote (("Go to Line" . helm-moccur-goto-line) ("Goto line other window (C-u vertically)" . helm-moccur-goto-line-ow) ("Goto line new frame" . helm-moccur-goto-line-of)))) nil [2080 2418])
            ("helm-moccur-truncate-lines" variable (:default-value t) nil [2420 2566])
            ("helm-moccur-show-buffer-fontification" variable nil nil [2568 3080])
            ("helm-moccur-buffer-substring-fn-for-modes" variable (:default-value (quote ((mu4e-headers-mode . buffer-substring) (package-menu-mode . buffer-substring-no-properties)))) nil [3082 3745])
            ("helm-occur-show-buffer-name" variable nil nil [3747 4008])
            ("helm-moccur-buffer" variable
               (:default-value (quote ((t (:foreground "DarkTurquoise" :underline t))))
                :type "face")
                nil [4011 4163])
            ("helm-resume-need-update" variable
               (:default-value (quote ((t (:background "red"))))
                :type "face")
                nil [4165 4310])
            ("helm-moccur-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-<down>") (quote helm-goto-next-file)) (define-key map (kbd "M-<up>") (quote helm-goto-precedent-file)) (define-key map (kbd "C-c o") (quote helm-moccur-run-goto-line-ow)) (define-key map (kbd "C-c C-o") (quote helm-moccur-run-goto-line-of)) (define-key map (kbd "C-x C-s") (quote helm-moccur-run-save-buffer)) (when helm-moccur-use-ioccur-style-keys (define-key map (kbd "<right>") (quote helm-execute-persistent-action)) (define-key map (kbd "<left>") (quote helm-moccur-run-default-action))) (delq nil map))) nil [4314 4980])
            ("helm-build-regexp-history" variable nil nil [5000 5038])
            ("helm-occur-history" variable nil nil [5039 5070])
            ("helm-query-replace-regexp" function (:arguments ("_candidate")) nil [5072 5414])
            ("helm-kill-regexp-as-sexp" function (:arguments ("_candidate")) nil [5416 5567])
            ("helm-kill-regexp" function (:arguments ("_candidate")) nil [5569 5686])
            ("helm-query-replace-args" function (:arguments ("regexp")) nil [5688 6255])
            ("helm-source-regexp" variable (:default-value (helm-build-in-buffer-source "Regexp Builder" :init (lambda nil (helm-init-candidates-in-buffer (quote global) (with-temp-buffer (insert-buffer-substring helm-current-buffer) (buffer-string)))) :get-line (function helm-regexp-get-line) :persistent-action (function helm-regexp-persistent-action) :persistent-help "Show this line" :multiline t :multimatch nil :requires-pattern 2 :group (quote helm-regexp) :mode-line "Press TAB to select action." :action (quote (("Kill Regexp as sexp" . helm-kill-regexp-as-sexp) ("Query Replace Regexp (C-u Not inside word.)" . helm-query-replace-regexp) ("Kill Regexp" . helm-kill-regexp))))) nil [6257 7037])
            ("helm-regexp-get-line" function (:arguments ("s" "e")) nil [7039 7525])
            ("helm-regexp-persistent-action" function (:arguments ("pt")) nil [7527 7623])
            ("helm-regexp-kill-new" function (:arguments ("input")) nil [7625 7737])
            ("helm-source-occur" variable nil nil [7757 7787])
            ("helm-occur-init-source" function nil nil [7788 7941])
            ("helm-multi-occur-buffer-list" variable nil nil [7980 8021])
            ("helm-multi-occur-buffer-tick" variable nil nil [8022 8063])
            ("helm-occur--invisible" variable nil nil [8064 8211])
            ("helm-moccur-init" function nil nil [8213 9469])
            ("helm-moccur--next-or-previous-char" function nil nil [9471 9615])
            ("helm-moccur-get-line" function (:arguments ("beg" "end")) nil [9617 10878])
            ("cl-defun" code nil nil [10880 12212])
            ("helm-moccur-persistent-action" function (:arguments ("candidate")) nil [12214 12331])
            ("helm-moccur-goto-line" function (:arguments ("candidate")) nil [12333 12584])
            ("helm-moccur-goto-line-ow" function (:arguments ("candidate")) nil [12594 12873])
            ("helm-moccur-goto-line-of" function (:arguments ("candidate")) nil [12883 13155])
            ("helm-moccur-run-goto-line-ow" function (:user-visible-flag t) nil [13165 13368])
            ("put" code nil nil [13369 13417])
            ("helm-moccur-run-goto-line-of" function (:user-visible-flag t) nil [13419 13619])
            ("put" code nil nil [13620 13668])
            ("helm-moccur-run-default-action" function nil nil [13670 13807])
            ("put" code nil nil [13808 13858])
            ("helm-moccur-before-init-hook" variable nil nil [13860 13962])
            ("helm-moccur-after-init-hook" variable nil nil [13964 14064])
            ("helm-source-moccur" variable nil nil [14066 14097])
            ("helm-source-multi-occur" type
               (:superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (require (quote helm-grep)) (helm-moccur-init))") nil nil)
                    ("filter-one-by-one" variable (:default-value "(quote helm-moccur-filter-one-by-one)") nil nil)
                    ("get-line" variable (:default-value "helm-moccur-get-line") nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("nomark" variable (:default-value "t") nil nil)
                    ("migemo" variable (:default-value "t") nil nil)
                    ("action" variable (:default-value "(quote helm-source-multi-occur-actions)") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-moccur-persistent-action)") nil nil)
                    ("persistent-help" variable (:default-value "Go to line") nil nil)
                    ("resume" variable (:default-value "(quote helm-moccur-resume-fn)") nil nil)
                    ("candidate-number-limit" variable (:default-value "9999") nil nil)
                    ("help-message" variable (:default-value "(quote helm-moccur-help-message)") nil nil)
                    ("keymap" variable (:default-value "helm-moccur-map") nil nil)
                    ("history" variable (:default-value "(quote helm-occur-history)") nil nil)
                    ("requires-pattern" variable (:default-value "2") nil nil)
                    ("before-init-hook" variable (:default-value "(quote helm-moccur-before-init-hook)") nil nil)
                    ("after-init-hook" variable (:default-value "(quote helm-moccur-after-init-hook)") nil nil)
                    ("group" variable (:default-value "(quote helm-regexp)") nil nil))                  
                :type "class")
                nil [14098 15033])
            ("helm-moccur-resume-fn" function nil nil [15035 17991])
            ("helm-moccur-filter-one-by-one" function (:arguments ("candidate" "outside-helm")) nil [17993 19068])
            ("helm-multi-occur-1" function (:arguments ("buffers" "input")) nil [19070 20165])
            ("helm-moccur-run-save-buffer" function (:user-visible-flag t) nil [20167 20359])
            ("put" code nil nil [20360 20407])
            ("helm-moccur-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") (quote helm-moccur-mode-goto-line)) (define-key map (kbd "C-o") (quote helm-moccur-mode-goto-line-ow)) (define-key map (kbd "<C-down>") (quote helm-moccur-mode-goto-line-ow-forward)) (define-key map (kbd "<C-up>") (quote helm-moccur-mode-goto-line-ow-backward)) (define-key map (kbd "<M-down>") (quote helm-gm-next-file)) (define-key map (kbd "<M-up>") (quote helm-gm-precedent-file)) (define-key map (kbd "M-n") (quote helm-moccur-mode-goto-line-ow-forward)) (define-key map (kbd "M-p") (quote helm-moccur-mode-goto-line-ow-backward)) (define-key map (kbd "M-N") (quote helm-gm-next-file)) (define-key map (kbd "M-P") (quote helm-gm-precedent-file)) map)) nil [20438 21195])
            ("helm-moccur-mode-goto-line" function nil nil [21197 21378])
            ("helm-moccur-mode-goto-line-ow" function nil nil [21380 21567])
            ("helm-moccur-mode-goto-line-ow-forward-1" function (:arguments ("arg")) nil [21569 21796])
            ("helm-moccur-mode-goto-line-ow-forward" function nil nil [21798 21908])
            ("helm-moccur-mode-goto-line-ow-backward" function nil nil [21910 22022])
            ("helm-moccur-save-results" function (:arguments ("_candidate")) nil [22024 23937])
            ("helm-moccur-mode-mouse-goto-line" function (:arguments ("event")) nil [23939 24250])
            ("put" code nil nil [24251 24303])
            ("define-derived-mode" code nil nil [24320 24725])
            ("put" code nil nil [24726 24762])
            ("helm-moccur-mode--revert-buffer-function" function (:arguments ("_ignore-auto" "_noconfirm")) nil [24764 26792])
            ("helm-regexp" function (:user-visible-flag t) nil [26842 27397])
            ("helm-occur" function (:user-visible-flag t) nil [27414 28423])
            ("helm-occur-from-isearch" function (:user-visible-flag t) nil [28440 29335])
            ("helm-multi-occur-from-isearch" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [29352 30355])
            ("helm-regexp" package nil nil [30358 30380]))          
      :file "helm-regexp.el"
      :pointmax 30523
      :fsize 30522
      :lastmodtime '(23227 37266 588700 755000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-help.el"
      :file "helm-help.el"
      :fsize 59782
      :lastmodtime '(23227 37266 584700 798000))
    (semanticdb-table "helm-elisp.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [817 834])
            ("helm" include nil nil [835 850])
            ("helm-lib" include nil nil [851 870])
            ("helm-help" include nil nil [871 891])
            ("helm-types" include nil nil [892 913])
            ("helm-utils" include nil nil [914 935])
            ("helm-info" include nil nil [936 956])
            ("helm-eval" include nil nil [957 977])
            ("helm-files" include nil nil [978 999])
            ("declare-function" code nil nil [1001 1054])
            ("declare-function" code nil nil [1055 1108])
            ("declare-function" code nil nil [1109 1158])
            ("helm-elisp" customgroup (:user-visible-flag t) nil [1187 1282])
            ("helm-turn-on-show-completion" variable (:default-value t) nil [1284 1435])
            ("helm-show-completion-use-special-display" variable (:default-value t) nil [1437 1683])
            ("helm-show-completion-min-window-height" variable (:default-value 7) nil [1685 1889])
            ("helm-lisp-quoted-function-list" variable (:default-value (quote (funcall apply mapc cl-mapc mapcar cl-mapcar callf callf2 cl-callf cl-callf2 fset fboundp fmakunbound symbol-function))) nil [1891 2228])
            ("helm-lisp-unquoted-function-list" variable (:default-value (quote (function defadvice))) nil [2230 2465])
            ("helm-apropos-fuzzy-match" variable nil nil [2467 2604])
            ("helm-lisp-fuzzy-completion" variable nil nil [2606 2937])
            ("helm-apropos-function-list" variable (:default-value (quote (helm-def-source--emacs-commands helm-def-source--emacs-functions helm-def-source--eieio-classes helm-def-source--eieio-generic helm-def-source--emacs-variables helm-def-source--emacs-faces))) nil [2939 3498])
            ("helm-apropos-defaut-info-lookup-sources" variable (:default-value (quote (helm-source-info-elisp helm-source-info-cl helm-source-info-eieio))) nil [3500 3854])
            ("helm-elisp-faces" customgroup (:user-visible-flag t) nil [3874 4009])
            ("helm-lisp-show-completion" variable
               (:default-value (quote ((t (:background "DarkSlateGray"))))
                :type "face")
                nil [4011 4178])
            ("helm-lisp-completion-info" variable
               (:default-value (quote ((t (:foreground "red"))))
                :type "face")
                nil [4180 4331])
            ("helm-elisp-help-function" variable (:default-value (quote helm-elisp-show-help)) nil [4333 4676])
            ("helm-locate-library-fuzzy-match" variable (:default-value t) nil [4678 4827])
            ("helm-show-completion-overlay" variable nil nil [4923 4964])
            ("helm-show-completion" function nil nil [5014 5221])
            ("helm-show-completion-init-overlay" function (:arguments ("beg" "end")) nil [5223 5486])
            ("helm-show-completion-display-function" function (:arguments ("buffer" "_args")) nil [5488 6515])
            ("with-helm-show-completion" function (:arguments ("beg" "end" "body")) nil [6517 7865])
            ("helm-lisp-completion--predicate-at-point" function (:arguments ("beg")) nil [7903 9607])
            ("helm-thing-before-point" function (:arguments ("limits" "regexp")) nil [9609 10278])
            ("helm-bounds-of-thing-before-point" function (:arguments ("regexp")) nil [10280 10481])
            ("helm-insert-completion-at-point" function (:arguments ("beg" "end" "str")) nil [10483 11062])
            ("helm-lisp-completion--cache" variable nil nil [11064 11104])
            ("helm-lgst-len" variable nil nil [11105 11131])
            ("helm-lisp-completion-at-point" function (:user-visible-flag t) nil [11147 13539])
            ("helm-lisp-completion-persistent-action" function (:arguments ("candidate" "name")) nil [13541 13835])
            ("helm-lisp-completion-persistent-help" function nil nil [13837 14134])
            ("helm-elisp--show-help-1" function (:arguments ("candidate" "name")) nil [14136 14685])
            ("helm-elisp-show-help" function (:arguments ("candidate" "name")) nil [14687 15089])
            ("helm-elisp-show-doc-modeline" function (:arguments ("candidate" "name")) nil [15091 15453])
            ("helm-lisp-completion-transformer" function (:arguments ("candidates" "_source")) nil [15455 16099])
            ("helm-get-first-line-documentation" function (:arguments ("sym" "name")) nil [16101 17053])
            ("helm-complete-file-name-at-point" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [17127 18285])
            ("helm-lisp-indent" function nil nil [18302 18686])
            ("helm-lisp-completion-or-file-name-at-point" function (:user-visible-flag t) nil [18703 19226])
            ("helm-apropos-history" variable nil nil [19248 19281])
            ("helm-apropos-init" function (:arguments ("test" "default")) nil [19283 19722])
            ("helm-apropos-init-faces" function (:arguments ("default")) nil [19724 20373])
            ("helm-apropos-default-sort-fn" function (:arguments ("candidates" "_source")) nil [20375 20529])
            ("helm-def-source--emacs-variables" function (:arguments ("default")) nil [20531 22089])
            ("helm-def-source--emacs-faces" function (:arguments ("default")) nil [22091 23109])
            ("helm-def-source--emacs-commands" function (:arguments ("default")) nil [23111 23863])
            ("helm-def-source--emacs-functions" function (:arguments ("default")) nil [23865 24876])
            ("helm-def-source--eieio-classes" function (:arguments ("default")) nil [24878 25705])
            ("helm-def-source--eieio-generic" function (:arguments ("default")) nil [25707 26557])
            ("helm-info-lookup-fallback-source" function (:arguments ("candidate")) nil [26559 27532])
            ("helm-info-lookup-symbol-1" function (:arguments ("c")) nil [27534 27855])
            ("helm-info-lookup-symbol" function (:arguments ("candidate")) nil [27857 28113])
            ("helm-apropos" function
               (:user-visible-flag t
                :arguments ("default"))
                nil [28130 28706])
            ("helm-source-advice" variable (:default-value (helm-build-sync-source "Function Advice" :init (lambda nil (require (quote advice))) :candidates (quote helm-advice-candidates) :action (helm-make-actions "Toggle Enable/Disable" (quote helm-advice-toggle)) :persistent-action (quote helm-advice-persistent-action) :nomark t :multiline t :persistent-help "Toggle describe function / C-u C-j: Toggle advice")) nil [28728 29114])
            ("helm-advice-candidates" function nil nil [29116 29826])
            ("helm-advice-persistent-action" function (:arguments ("func-class-advice")) nil [29828 30004])
            ("helm-advice-toggle" function (:arguments ("func-class-advice")) nil [30006 30444])
            ("helm-advice-update-current-display-string" function nil nil [30446 30768])
            ("helm-manage-advice" function (:user-visible-flag t) nil [30785 30949])
            ("helm-locate-library-scan-list" function nil nil [30984 31279])
            ("helm-locate-library" function (:user-visible-flag t) nil [31296 32633])
            ("helm-set-variable" function (:arguments ("var")) nil [32635 33066])
            ("helm-absolute-time-timers-class" type
               (:interfaces ("helm-type-timers")
                :superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "timer-list") nil nil)
                    ("allow-dups" variable (:default-value "t") nil nil)
                    ("candidate-transformer" variable (:default-value "(lambda (candidates) (cl-loop for timer in candidates collect (cons (helm-elisp--format-timer timer) timer)))") nil nil))                  
                :type "class")
                nil [33094 33414])
            ("helm-source-absolute-time-timers" variable (:default-value (helm-make-source "Absolute Time Timers" (quote helm-absolute-time-timers-class))) nil [33416 33534])
            ("helm-idle-time-timers-class" type
               (:interfaces ("helm-type-timers")
                :superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "timer-idle-list") nil nil)
                    ("allow-dups" variable (:default-value "t") nil nil)
                    ("candidate-transformer" variable (:default-value "(lambda (candidates) (cl-loop for timer in candidates collect (cons (helm-elisp--format-timer timer) timer)))") nil nil))                  
                :type "class")
                nil [33536 33857])
            ("helm-source-idle-time-timers" variable (:default-value (helm-make-source "Idle Time Timers" (quote helm-idle-time-timers-class))) nil [33859 33965])
            ("helm-elisp--format-timer" function (:arguments ("timer")) nil [33967 34510])
            ("helm-timers" function (:user-visible-flag t) nil [34527 34736])
            ("helm-btf--usable-p" function nil nil [34774 34987])
            ("if" code nil nil [34989 36404])
            ("helm-source-complex-command-history" variable (:default-value (helm-build-sync-source "Complex Command History" :candidates (lambda nil (cl-loop for i in command-history unless (equal i (quote (helm-complex-command-history))) collect (prin1-to-string i))) :action (helm-make-actions "Eval" (lambda (candidate) (and (boundp (quote helm-sexp--last-sexp)) (setq helm-sexp--last-sexp candidate)) (let ((command (read candidate))) (unless (equal command (car command-history)) (setq command-history (cons command command-history)))) (run-with-timer 0.1 nil (function helm-sexp-eval) candidate)) "Edit and eval" (lambda (candidate) (edit-and-eval-command "Eval: " (read candidate)))) :persistent-action (function helm-sexp-eval) :multiline t)) nil [36406 37485])
            ("helm-complex-command-history" function (:user-visible-flag t) nil [37502 37706])
            ("helm-elisp" package nil nil [37708 37729]))          
      :file "helm-elisp.el"
      :pointmax 37871
      :fsize 37870
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-info.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [810 827])
            ("helm" include nil nil [828 843])
            ("helm-lib" include nil nil [844 863])
            ("helm-utils" include nil nil [864 885])
            ("info" include nil nil [886 901])
            ("declare-function" code nil nil [903 962])
            ("declare-function" code nil nil [963 1020])
            ("declare-function" code nil nil [1021 1108])
            ("Info-history" variable nil nil [1109 1130])
            ("Info-directory-list" variable nil nil [1131 1159])
            ("helm-info" customgroup (:user-visible-flag t) nil [1177 1270])
            ("helm-info-default-sources" variable (:default-value (quote (helm-source-info-elisp helm-source-info-cl helm-source-info-eieio helm-source-info-pages))) nil [1272 1569])
            ("cl-defun" code nil nil [1633 3106])
            ("helm-info-goto" function (:arguments ("node-line")) nil [3108 3212])
            ("helm-info-display-to-real" function (:arguments ("line")) nil [3214 3576])
            ("helm-info-source" type
               (:superclasses "helm-source-in-buffer"
                :members 
                  ( ("info-file" variable (:default-value "nil") nil nil)
                    ("init" variable (:default-value "(function helm-info-init)") nil nil)
                    ("display-to-real" variable (:default-value "(function helm-info-display-to-real)") nil nil)
                    ("get-line" variable (:default-value "(function buffer-substring)") nil nil)
                    ("action" variable (:default-value "(quote ((\"Goto node\" . helm-info-goto)))") nil nil))                  
                :type "class")
                nil [3578 3918])
            ("helm-build-info-source" function (:arguments ("fname" "args")) nil [3920 4073])
            ("helm-build-info-index-command" function (:arguments ("name" "doc" "source" "buffer")) nil [4075 4500])
            ("helm-define-info-index-sources" function (:arguments ("var-value" "commands")) nil [4502 5165])
            ("helm-info-index-set" function (:arguments ("var" "value")) nil [5167 5267])
            ("helm-info-searched" variable (:default-value (make-ring 32)) nil [5424 5510])
            ("helm-get-info-files" function nil nil [5512 6159])
            ("helm-default-info-index-list" variable (:default-value (helm-get-info-files)) nil [6161 6356])
            ("helm-info-search-index" function (:arguments ("candidate")) nil [6358 6698])
            ("helm-def-source--info-files" function nil nil [6700 7092])
            ("helm-info" function
               (:user-visible-flag t
                :arguments ("refresh"))
                nil [7109 8071])
            ("helm-info--pages-cache" variable nil nil [8272 8351])
            ("helm-source-info-pages" variable (:default-value (helm-build-sync-source "Info Pages" :init (function helm-info-pages-init) :candidates (lambda nil helm-info--pages-cache) :action (quote (("Show with Info" lambda (node-str) (info (replace-regexp-in-string "^[^:]+: " "" node-str))))) :requires-pattern 2)) nil [8353 8751])
            ("helm-info-pages-init" function nil nil [8753 9252])
            ("helm-info-at-point" function (:user-visible-flag t) nil [9269 9484])
            ("helm-info" package nil nil [9487 9507]))          
      :file "helm-info.el"
      :pointmax 9648
      :fsize 9647
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-eval.el"
      :file "helm-eval.el"
      :fsize 8333
      :lastmodtime '(23227 37266 584700 798000))
    (semanticdb-table "helm-files.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [815 832])
            ("helm" include nil nil [833 848])
            ("helm-types" include nil nil [849 870])
            ("helm-utils" include nil nil [871 892])
            ("helm-grep" include nil nil [893 913])
            ("helm-help" include nil nil [914 934])
            ("helm-locate" include nil nil [935 957])
            ("helm-tags" include nil nil [958 978])
            ("helm-buffers" include nil nil [979 1002])
            ("image-dired" include nil nil [1128 1150])
            ("tramp" include nil nil [1109 1125])
            ("dired-x" include nil nil [1088 1106])
            ("dired-aux" include nil nil [1065 1085])
            ("ffap" include nil nil [1047 1062])
            ("thingatpt" include nil nil [1024 1044])
            ("declare-function" code nil nil [1153 1214])
            ("declare-function" code nil nil [1215 1318])
            ("declare-function" code nil nil [1319 1393])
            ("declare-function" code nil nil [1394 1486])
            ("declare-function" code nil nil [1487 1563])
            ("declare-function" code nil nil [1564 1618])
            ("declare-function" code nil nil [1619 1708])
            ("declare-function" code nil nil [1709 1756])
            ("declare-function" code nil nil [1757 1797])
            ("declare-function" code nil nil [1798 1843])
            ("declare-function" code nil nil [1844 1885])
            ("declare-function" code nil nil [1886 1939])
            ("declare-function" code nil nil [1940 1991])
            ("declare-function" code nil nil [1992 2057])
            ("declare-function" code nil nil [2058 2104])
            ("declare-function" code nil nil [2105 2156])
            ("declare-function" code nil nil [2157 2199])
            ("recentf-list" variable nil nil [2201 2222])
            ("helm-mm-matching-method" variable nil nil [2223 2255])
            ("dired-async-mode" variable nil nil [2256 2281])
            ("org-directory" variable nil nil [2282 2304])
            ("helm-files" customgroup (:user-visible-flag t) nil [2307 2394])
            ("helm-boring-file-regexp-list" variable (:default-value (mapcar (lambda (f) (let ((rgx (regexp-quote f))) (if (string-match-p "[^/]$" f) (concat rgx "$") (format "%s\\|%s" rgx (concat (substring rgx 0 (1- (length rgx))) "$"))))) completion-ignored-extensions)) nil [2396 3069])
            ("helm-tramp-verbose" variable nil nil [3071 3302])
            ("helm-ff-auto-update-initial-value" variable nil nil [3304 3706])
            ("helm-ff-lynx-style-map" variable (:default-value t) nil [3708 3947])
            ("helm-ff-history-max-length" variable (:default-value 100) nil [3949 4088])
            ("helm-ff-fuzzy-matching" variable (:default-value t) nil [4090 4290])
            ("helm-ff-tramp-not-fancy" variable (:default-value t) nil [4292 4489])
            ("helm-ff-exif-data-program" variable (:default-value "exiftran") nil [4491 4632])
            ("helm-ff-exif-data-program-args" variable (:default-value "-d") nil [4634 4770])
            ("helm-ff-newfile-prompt-p" variable (:default-value t) nil [4772 4931])
            ("helm-ff-avfs-directory" variable (:default-value "~/.avfs") nil [4933 5232])
            ("helm-ff-file-compressed-list" variable (:default-value (quote ("gz" "bz2" "zip" "7z"))) nil [5234 5403])
            ("helm-ff-printer-list" variable nil nil [5405 5806])
            ("helm-ff-transformer-show-only-basename" variable (:default-value t) nil [5808 6074])
            ("helm-ff-signal-error-on-dot-files" variable (:default-value t) nil [6076 6336])
            ("helm-ff-search-library-in-sexp" variable nil nil [6338 6488])
            ("helm-tooltip-hide-delay" variable (:default-value 25) nil [6490 6623])
            ("helm-ff-file-name-history-use-recentf" variable nil nil [6625 6792])
            ("helm-ff-skip-boring-files" variable nil nil [6794 7130])
            ("helm-ff-candidate-number-limit" variable (:default-value 5000) nil [7132 7611])
            ("helm-files-save-history-extra-sources" variable (:default-value (quote ("Find" "Locate" "Recentf" "Files from Current Directory" "File Cache"))) nil [7613 7858])
            ("helm-find-files-before-init-hook" variable nil nil [7860 8005])
            ("helm-find-files-after-init-hook" variable nil nil [8007 8150])
            ("helm-find-files-bookmark-prefix" variable (:default-value "Helm-find-files: ") nil [8152 8308])
            ("helm-ff-guess-ffap-filenames" variable nil nil [8310 8544])
            ("helm-ff-guess-ffap-urls" variable (:default-value t) nil [8546 8780])
            ("helm-ff-no-preselect" variable nil nil [8782 8929])
            ("helm-find-files-ignore-thing-at-point" variable nil nil [8931 9241])
            ("helm-substitute-in-filename-stay-on-remote" variable nil nil [9243 9418])
            ("helm-ff-goto-first-real-dired-exceptions" variable (:default-value (quote (dired-goto-file))) nil [9420 9614])
            ("helm-mounted-network-directories" variable nil nil [9616 9950])
            ("helm-browse-project-default-find-files-fn" variable (:default-value (function helm-browse-project-walk-directory)) nil [9952 10202])
            ("helm-ff-kill-or-find-buffer-fname-fn" variable (:default-value (function helm-ff-kill-or-find-buffer-fname)) nil [10204 11085])
            ("helm-modes-using-escaped-strings" variable (:default-value (quote (eshell-mode shell-mode term-mode))) nil [11087 11273])
            ("helm-files-faces" customgroup (:user-visible-flag t) nil [11292 11427])
            ("helm-ff-prefix" variable
               (:default-value (quote ((t (:background "yellow" :foreground "black"))))
                :type "face")
                nil [11429 11602])
            ("helm-ff-executable" variable
               (:default-value (quote ((t (:foreground "green"))))
                :type "face")
                nil [11604 11749])
            ("helm-ff-directory" variable
               (:default-value (quote ((t (:foreground "DarkRed" :background "LightGray"))))
                :type "face")
                nil [11751 11916])
            ("helm-ff-dotted-directory" variable
               (:default-value (quote ((t (:foreground "black" :background "DimGray"))))
                :type "face")
                nil [11918 12093])
            ("helm-ff-dotted-symlink-directory" variable
               (:default-value (quote ((t (:foreground "DarkOrange" :background "DimGray"))))
                :type "face")
                nil [12095 12293])
            ("helm-ff-symlink" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [12295 12439])
            ("helm-ff-invalid-symlink" variable
               (:default-value (quote ((t (:foreground "black" :background "red"))))
                :type "face")
                nil [12441 12609])
            ("helm-ff-file" variable
               (:default-value (quote ((t (:inherit font-lock-builtin-face))))
                :type "face")
                nil [12611 12756])
            ("helm-ff-dirs" variable
               (:default-value (quote ((t (:inherit font-lock-function-name-face))))
                :type "face")
                nil [12758 12938])
            ("helm-history-deleted" variable
               (:default-value (quote ((t (:inherit helm-ff-invalid-symlink))))
                :type "face")
                nil [12940 13099])
            ("helm-history-remote" variable
               (:default-value (quote ((t (:foreground "Indianred1"))))
                :type "face")
                nil [13101 13250])
            ("helm-find-files-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "RET") (quote helm-ff-RET)) (define-key map (kbd "C-]") (quote helm-ff-run-toggle-basename)) (define-key map (kbd "C-x C-f") (quote helm-ff-run-locate)) (define-key map (kbd "C-x C-d") (quote helm-ff-run-browse-project)) (define-key map (kbd "C-x r m") (quote helm-ff-bookmark-set)) (define-key map (kbd "C-x r b") (quote helm-find-files-toggle-to-bookmark)) (define-key map (kbd "C-x C-q") (quote helm-ff-run-marked-files-in-dired)) (define-key map (kbd "C-s") (quote helm-ff-run-grep)) (define-key map (kbd "M-g s") (quote helm-ff-run-grep)) (define-key map (kbd "M-g p") (quote helm-ff-run-pdfgrep)) (define-key map (kbd "M-g z") (quote helm-ff-run-zgrep)) (define-key map (kbd "M-g a") (quote helm-ff-run-grep-ag)) (define-key map (kbd "M-g g") (quote helm-ff-run-git-grep)) (define-key map (kbd "M-g i") (quote helm-ff-run-gid)) (define-key map (kbd "M-.") (quote helm-ff-run-etags)) (define-key map (kbd "M-R") (quote helm-ff-run-rename-file)) (define-key map (kbd "M-C") (quote helm-ff-run-copy-file)) (define-key map (kbd "M-B") (quote helm-ff-run-byte-compile-file)) (define-key map (kbd "M-L") (quote helm-ff-run-load-file)) (define-key map (kbd "M-S") (quote helm-ff-run-symlink-file)) (define-key map (kbd "M-H") (quote helm-ff-run-hardlink-file)) (define-key map (kbd "M-D") (quote helm-ff-run-delete-file)) (define-key map (kbd "M-K") (quote helm-ff-run-kill-buffer-persistent)) (define-key map (kbd "C-c d") (quote helm-ff-persistent-delete)) (define-key map (kbd "M-e") (quote helm-ff-run-switch-to-eshell)) (define-key map (kbd "C-c i") (quote helm-ff-run-complete-fn-at-point)) (define-key map (kbd "C-c o") (quote helm-ff-run-switch-other-window)) (define-key map (kbd "C-c C-o") (quote helm-ff-run-switch-other-frame)) (define-key map (kbd "C-c C-x") (quote helm-ff-run-open-file-externally)) (define-key map (kbd "C-c X") (quote helm-ff-run-open-file-with-default-tool)) (define-key map (kbd "M-!") (quote helm-ff-run-eshell-command-on-file)) (define-key map (kbd "M-@") (quote helm-ff-run-query-replace-on-marked)) (define-key map (kbd "M-%") (quote helm-ff-run-query-replace)) (define-key map (kbd "C-M-%") (quote helm-ff-run-query-replace-regexp)) (define-key map (kbd "C-c =") (quote helm-ff-run-ediff-file)) (define-key map (kbd "M-=") (quote helm-ff-run-ediff-merge-file)) (define-key map (kbd "M-p") (quote helm-ff-run-switch-to-history)) (define-key map (kbd "C-c h") (quote helm-ff-file-name-history)) (define-key map (kbd "M-i") (quote helm-ff-properties-persistent)) (define-key map (kbd "C-}") (quote helm-narrow-window)) (define-key map (kbd "C-{") (quote helm-enlarge-window)) (define-key map (kbd "C-<backspace>") (quote helm-ff-run-toggle-auto-update)) (define-key map (kbd "C-c <DEL>") (quote helm-ff-run-toggle-auto-update)) (define-key map (kbd "C-c C-a") (quote helm-ff-run-mail-attach-files)) (define-key map (kbd "C-c p") (quote helm-ff-run-print-file)) (define-key map (kbd "C-c /") (quote helm-ff-run-find-sh-command)) (define-key map (kbd "M-l") (quote helm-ff-rotate-left-persistent)) (define-key map (kbd "M-r") (quote helm-ff-rotate-right-persistent)) (define-key map (kbd "C-l") (quote helm-find-files-up-one-level)) (define-key map (kbd "C-r") (quote helm-find-files-down-last-level)) (define-key map (kbd "C-c r") (quote helm-ff-run-find-file-as-root)) (define-key map (kbd "C-x C-v") (quote helm-ff-run-find-alternate-file)) (define-key map (kbd "C-c @") (quote helm-ff-run-insert-org-link)) (helm-define-key-with-subkeys map (kbd "DEL") 127 (quote helm-ff-delete-char-backward) (quote ((C-backspace . helm-ff-run-toggle-auto-update) ([C-c DEL] . helm-ff-run-toggle-auto-update))) nil (quote helm-ff-delete-char-backward--exit-fn)) (when helm-ff-lynx-style-map (define-key map (kbd "<left>") (quote helm-find-files-up-one-level)) (define-key map (kbd "<right>") (quote helm-execute-persistent-action))) (delq nil map))) nil [13313 17792])
            ("helm-read-file-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "<C-return>") (quote helm-cr-empty-string)) (define-key map (kbd "<M-RET>") (quote helm-cr-empty-string)) (define-key map (kbd "C-]") (quote helm-ff-run-toggle-basename)) (define-key map (kbd "C-.") (quote helm-find-files-up-one-level)) (define-key map (kbd "C-l") (quote helm-find-files-up-one-level)) (define-key map (kbd "C-r") (quote helm-find-files-down-last-level)) (define-key map (kbd "C-c h") (quote helm-ff-file-name-history)) (define-key map (kbd "C-<backspace>") (quote helm-ff-run-toggle-auto-update)) (define-key map (kbd "C-c <DEL>") (quote helm-ff-run-toggle-auto-update)) (helm-define-key-with-subkeys map (kbd "DEL") 127 (quote helm-ff-delete-char-backward) (quote ((C-backspace . helm-ff-run-toggle-auto-update) ([C-c DEL] . helm-ff-run-toggle-auto-update))) nil (quote helm-ff-delete-char-backward--exit-fn)) (when helm-ff-lynx-style-map (define-key map (kbd "<left>") (quote helm-find-files-up-one-level)) (define-key map (kbd "<right>") (quote helm-execute-persistent-action)) (define-key map (kbd "<M-left>") (quote helm-previous-source)) (define-key map (kbd "<M-right>") (quote helm-next-source))) (delq nil map))) nil [17794 19231])
            ("helm-find-files-doc-header" variable
               (:user-visible-flag t
                :default-value " (\\<helm-find-files-map>\\[helm-find-files-up-one-level]: Go up one level)")
                nil [19248 19443])
            ("helm-ff-auto-update-flag" variable nil nil [19444 19621])
            ("helm-ff-last-expanded" variable nil nil [19622 19699])
            ("helm-ff-default-directory" variable nil nil [19700 19738])
            ("helm-ff-history" variable nil nil [19739 19767])
            ("helm-ff-cand-to-mark" variable nil nil [19768 19801])
            ("helm-ff-url-regexp" variable (:default-value "\\`\\(news\\(post\\)?:\\|nntp:\\|mailto:\\|file:\\|\\(ftp\\|https?\\|telnet\\|gopher\\|www\\|wais\\):/?/?\\).*") nil [19802 20006])
            ("helm-tramp-file-name-regexp" variable (:default-value "\\`/\\([^[/:]+\\|[^/]+]\\):") nil [20007 20073])
            ("helm-marked-buffer-name" variable (:default-value "*helm marked*") nil [20074 20122])
            ("helm-ff--auto-update-state" variable nil nil [20123 20162])
            ("helm-ff--deleting-char-backward" variable nil nil [20163 20207])
            ("helm-multi-files--toggle-locate" variable nil nil [20208 20252])
            ("helm-ff--move-to-first-real-candidate" variable (:default-value t) nil [20253 20301])
            ("helm-find-files--toggle-bookmark" variable nil nil [20302 20347])
            ("helm-ff--tramp-methods" variable nil nil [20348 20383])
            ("helm-ff--directory-files-hash" variable (:default-value (make-hash-table :test (quote equal))) nil [20384 20453])
            ("helm-find-files-actions" variable (:default-value (helm-make-actions "Find File" (quote helm-find-file-or-marked) "Find file in Dired" (quote helm-point-file-in-dired) "View file" (quote view-file) "Query replace fnames on marked `M-@'" (quote helm-ff-query-replace-on-marked) "Marked files in dired `C-x C-q, C-u wdired'" (quote helm-marked-files-in-dired) "Query replace contents on marked `M-%'" (quote helm-ff-query-replace) "Query replace regexp contents on marked `C-M-%'" (quote helm-ff-query-replace-regexp) "Attach file(s) to mail buffer `C-c C-a'" (quote helm-ff-mail-attach-files) "Serial rename files" (quote helm-ff-serial-rename) "Serial rename by symlinking files" (quote helm-ff-serial-rename-by-symlink) "Serial rename by copying files" (quote helm-ff-serial-rename-by-copying) "Open file with default tool" (quote helm-open-file-with-default-tool) "Find file in hex dump" (quote hexl-find-file) "Browse project `C-x C-d'" (quote helm-ff-browse-project) "Complete at point `C-c i'" (quote helm-insert-file-name-completion-at-point) "Insert as org link `C-c @'" (quote helm-files-insert-as-org-link) "Find shell command `C-c /'" (quote helm-ff-find-sh-command) "Add marked files to file-cache" (quote helm-ff-cache-add-file) "Open file externally `C-c C-x, C-u to choose'" (quote helm-open-file-externally) "Grep File(s) `C-s, C-u Recurse'" (quote helm-find-files-grep) "Grep current directory with AG `M-g a, C-u select type'" (quote helm-find-files-ag) "Git grep `M-g g, C-u from root'" (quote helm-ff-git-grep) "Zgrep File(s) `M-g z, C-u Recurse'" (quote helm-ff-zgrep) "Gid `M-g i'" (quote helm-ff-gid) "Switch to Eshell `M-e'" (quote helm-ff-switch-to-eshell) "Etags `M-., C-u reload tag file'" (quote helm-ff-etags-select) "Eshell command on file(s) `M-!, C-u take all marked as arguments.'" (quote helm-find-files-eshell-command-on-file) "Find file as root `C-c r'" (quote helm-find-file-as-root) "Find alternate file `C-x C-v'" (quote find-alternate-file) "Ediff File `C-c ='" (quote helm-find-files-ediff-files) "Ediff Merge File `M-='" (quote helm-find-files-ediff-merge-files) "Delete File(s) `M-D'" (quote helm-delete-marked-files) "Copy file(s) `M-C, C-u to follow'" (quote helm-find-files-copy) "Rename file(s) `M-R, C-u to follow'" (quote helm-find-files-rename) "Backup files" (quote helm-find-files-backup) "Symlink files(s) `M-S, C-u to follow'" (quote helm-find-files-symlink) "Relsymlink file(s) `C-u to follow'" (quote helm-find-files-relsymlink) "Hardlink file(s) `M-H, C-u to follow'" (quote helm-find-files-hardlink) "Find file other window `C-c o'" (quote helm-find-files-other-window) "Switch to history `M-p'" (quote helm-find-files-switch-to-hist) "Find file other frame `C-c C-o'" (quote find-file-other-frame) "Print File `C-c p, C-u to refresh'" (quote helm-ff-print) "Locate `C-x C-f, C-u to specify locate db'" (quote helm-ff-locate))) nil [20483 23296])
            ("helm-source-find-files" variable nil nil [23298 23410])
            ("helm-source-ffiles" type
               (:superclasses "helm-source-sync"
                :members 
                  ( ("header-name" variable (:default-value "(lambda (name) (concat name (substitute-command-keys helm-find-files-doc-header)))") nil nil)
                    ("init" variable (:default-value "(lambda nil (setq helm-ff-auto-update-flag helm-ff-auto-update-initial-value) (setq helm-ff--auto-update-state helm-ff-auto-update-flag) (helm-set-local-variable (quote bookmark-make-record-function) (function helm-ff-make-bookmark-record)) (require (quote helm-external)))") nil nil)
                    ("candidates" variable (:default-value "(quote helm-find-files-get-candidates)") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(quote (helm-ff-sort-candidates (lambda (candidates _source) (cl-loop for f in candidates for ff = (helm-ff-filter-candidate-one-by-one f) when ff collect ff))))") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-find-files-persistent-action)") nil nil)
                    ("persistent-help" variable (:default-value "Hit1 Expand Candidate, Hit2 or (C-u) Find file") nil nil)
                    ("help-message" variable (:default-value "(quote helm-ff-help-message)") nil nil)
                    ("mode-line" variable (:default-value "(list \"File(s)\" helm-mode-line-string)") nil nil)
                    ("volatile" variable (:default-value "t") nil nil)
                    ("cleanup" variable (:default-value "(quote helm-find-files-cleanup)") nil nil)
                    ("migemo" variable (:default-value "t") nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("keymap" variable (:default-value "helm-find-files-map") nil nil)
                    ("candidate-number-limit" variable (:default-value "(quote helm-ff-candidate-number-limit)") nil nil)
                    ("action-transformer" variable (:default-value "(quote helm-find-files-action-transformer)") nil nil)
                    ("action" variable (:default-value "(quote helm-find-files-actions)") nil nil)
                    ("before-init-hook" variable (:default-value "(quote helm-find-files-before-init-hook)") nil nil)
                    ("after-init-hook" variable (:default-value "(quote helm-find-files-after-init-hook)") nil nil)
                    ("group" variable (:default-value "(quote helm-files)") nil nil))                  
                :type "class")
                nil [23412 25180])
            ("helm-ff-make-bookmark-record" function nil nil [25207 25456])
            ("helm-ff-bookmark-jump" function (:arguments ("bookmark")) nil [25458 26085])
            ("helm-ff-bookmark-set" function (:user-visible-flag t) nil [26087 26416])
            ("put" code nil nil [26417 26457])
            ("helm-dwim-target" variable nil nil [26459 27132])
            ("helm-dwim-target-directory" function nil nil [27134 28480])
            ("helm-ff--count-and-collect-dups" function (:arguments ("files")) nil [28482 29219])
            ("helm-find-files-do-action" function (:arguments ("action")) nil [29221 31159])
            ("helm-find-files-copy" function (:arguments ("_candidate")) nil [31161 31277])
            ("helm-find-files-backup" function (:arguments ("_candidate")) nil [31279 31607])
            ("helm-find-files-rename" function (:arguments ("_candidate")) nil [31609 31731])
            ("helm-find-files-symlink" function (:arguments ("_candidate")) nil [31733 31858])
            ("helm-find-files-relsymlink" function (:arguments ("_candidate")) nil [31860 31994])
            ("helm-find-files-hardlink" function (:arguments ("_candidate")) nil [31996 32124])
            ("helm-find-files-other-window" function (:arguments ("_candidate")) nil [32126 32640])
            ("helm-find-files-byte-compile" function (:arguments ("_candidate")) nil [32642 32927])
            ("helm-find-files-load-files" function (:arguments ("_candidate")) nil [32929 33143])
            ("helm-find-files-ediff-files-1" function (:arguments ("candidate" "merge")) nil [33145 34136])
            ("helm-find-files-ediff-files" function (:arguments ("candidate")) nil [34138 34229])
            ("helm-find-files-ediff-merge-files" function (:arguments ("candidate")) nil [34231 34335])
            ("helm-find-files-grep" function (:arguments ("_candidate")) nil [34337 34538])
            ("helm-ff-git-grep" function (:arguments ("_candidate")) nil [34540 34707])
            ("helm-find-files-ag" function (:arguments ("_candidate")) nil [34709 34831])
            ("helm-ff-zgrep" function (:arguments ("_candidate")) nil [34833 35011])
            ("helm-ff-pdfgrep" function (:arguments ("_candidate")) nil [35013 35616])
            ("helm-ff-etags-select" function (:arguments ("candidate")) nil [35618 36106])
            ("helm-find-files-switch-to-hist" function (:arguments ("_candidate")) nil [36108 36220])
            ("eshell-command-aliases-list" variable nil nil [36222 36262])
            ("helm-eshell-command-on-file-input-history" variable nil nil [36263 36317])
            ("helm-find-files-eshell-command-on-file-1" function (:arguments ("map")) nil [36318 41562])
            ("helm-find-files-eshell-command-on-file" function (:arguments ("_candidate")) nil [41564 41814])
            ("helm-ff-switch-to-eshell" function (:arguments ("_candidate")) nil [41816 42989])
            ("helm-ff-serial-rename-action" function (:arguments ("method")) nil [42991 44820])
            ("helm-ff-member-directory-p" function (:arguments ("file" "directory")) nil [44822 45088])
            ("cl-defun" code nil nil [45090 47613])
            ("helm-ff-serial-rename" function (:arguments ("_candidate")) nil [47615 47884])
            ("helm-ff-serial-rename-by-symlink" function (:arguments ("_candidate")) nil [47886 48167])
            ("helm-ff-serial-rename-by-copying" function (:arguments ("_candidate")) nil [48169 48444])
            ("helm-ff-query-replace-fnames-history-from" variable nil nil [48446 48500])
            ("helm-ff-query-replace-fnames-history-to" variable nil nil [48501 48553])
            ("helm-ff-query-replace-on-filenames" function (:arguments ("candidates")) nil [48554 56875])
            ("helm-ff--prepare-str-with-regexp" function (:arguments ("str" "rep1" "rep2")) nil [56877 58018])
            ("helm-ff-query-replace-on-marked" function (:arguments ("_candidate")) nil [58035 58196])
            ("helm-ff-run-query-replace-on-marked" function nil nil [58240 58392])
            ("put" code nil nil [58393 58448])
            ("helm-ff-query-replace" function (:arguments ("_candidate")) nil [58450 58681])
            ("helm-ff-query-replace-regexp" function (:arguments ("_candidate")) nil [58683 58925])
            ("helm-ff-run-query-replace" function nil nil [58927 59059])
            ("put" code nil nil [59060 59105])
            ("helm-ff-run-query-replace-regexp" function nil nil [59107 59253])
            ("put" code nil nil [59254 59306])
            ("helm-ff-toggle-auto-update" function (:arguments ("_candidate")) nil [59308 59772])
            ("helm-ff-run-toggle-auto-update" function nil nil [59774 59993])
            ("put" code nil nil [59994 60044])
            ("helm-ff-delete-char-backward" function (:user-visible-flag t) nil [60046 60378])
            ("put" code nil nil [60379 60427])
            ("helm-ff-delete-char-backward--exit-fn" function nil nil [60429 60583])
            ("helm-ff-RET-1" function (:arguments ("must-match")) nil [60585 61160])
            ("helm-ff-RET" function (:user-visible-flag t) nil [61162 61520])
            ("helm-ff-RET-must-match" function (:user-visible-flag t) nil [61522 61645])
            ("helm-ff-run-switch-to-history" function (:user-visible-flag t) nil [61647 61901])
            ("put" code nil nil [61902 61951])
            ("helm-ff-run-grep" function (:user-visible-flag t) nil [61953 62126])
            ("put" code nil nil [62127 62163])
            ("helm-ff-run-git-grep" function (:user-visible-flag t) nil [62165 62342])
            ("put" code nil nil [62343 62383])
            ("helm-ff-run-grep-ag" function nil nil [62385 62508])
            ("put" code nil nil [62509 62548])
            ("helm-ff-run-pdfgrep" function (:user-visible-flag t) nil [62550 62724])
            ("put" code nil nil [62725 62764])
            ("helm-ff-run-zgrep" function (:user-visible-flag t) nil [62766 62933])
            ("put" code nil nil [62934 62971])
            ("helm-ff-run-copy-file" function (:user-visible-flag t) nil [62973 63156])
            ("put" code nil nil [63157 63198])
            ("helm-ff-run-rename-file" function (:user-visible-flag t) nil [63200 63389])
            ("put" code nil nil [63390 63433])
            ("helm-ff-run-byte-compile-file" function (:user-visible-flag t) nil [63435 63642])
            ("put" code nil nil [63643 63692])
            ("helm-ff-run-load-file" function (:user-visible-flag t) nil [63694 63883])
            ("put" code nil nil [63884 63925])
            ("helm-ff-run-eshell-command-on-file" function (:user-visible-flag t) nil [63927 64159])
            ("put" code nil nil [64160 64214])
            ("helm-ff-run-ediff-file" function (:user-visible-flag t) nil [64216 64408])
            ("put" code nil nil [64409 64451])
            ("helm-ff-run-ediff-merge-file" function (:user-visible-flag t) nil [64453 64668])
            ("put" code nil nil [64669 64717])
            ("helm-ff-run-symlink-file" function (:user-visible-flag t) nil [64719 64911])
            ("put" code nil nil [64912 64956])
            ("helm-ff-run-hardlink-file" function (:user-visible-flag t) nil [64958 65153])
            ("put" code nil nil [65154 65199])
            ("helm-ff-run-delete-file" function (:user-visible-flag t) nil [65201 65392])
            ("put" code nil nil [65393 65436])
            ("helm-ff-run-complete-fn-at-point" function (:user-visible-flag t) nil [65438 65667])
            ("put" code nil nil [65668 65720])
            ("helm-ff-run-switch-to-eshell" function (:user-visible-flag t) nil [65722 65923])
            ("put" code nil nil [65924 65972])
            ("helm-ff-run-switch-other-window" function (:user-visible-flag t) nil [65974 66245])
            ("put" code nil nil [66246 66297])
            ("helm-ff-run-switch-other-frame" function (:user-visible-flag t) nil [66299 66504])
            ("put" code nil nil [66505 66555])
            ("helm-ff-run-open-file-externally" function (:user-visible-flag t) nil [66557 66775])
            ("put" code nil nil [66776 66828])
            ("helm-ff-run-open-file-with-default-tool" function (:user-visible-flag t) nil [66830 67062])
            ("put" code nil nil [67063 67122])
            ("helm-ff-locate" function (:arguments ("candidate")) nil [67124 67966])
            ("helm-ff-run-locate" function (:user-visible-flag t) nil [67968 68139])
            ("put" code nil nil [68140 68178])
            ("helm-files-insert-as-org-link" function (:arguments ("candidate")) nil [68180 68298])
            ("helm-ff-run-insert-org-link" function nil nil [68300 68442])
            ("put" code nil nil [68443 68490])
            ("helm-ff-run-find-file-as-root" function nil nil [68492 68629])
            ("put" code nil nil [68630 68679])
            ("helm-ff-run-find-alternate-file" function nil nil [68681 68817])
            ("put" code nil nil [68818 68869])
            ("helm-ff-run-mail-attach-files" function (:user-visible-flag t) nil [68871 69083])
            ("put" code nil nil [69084 69133])
            ("helm-ff-run-etags" function (:user-visible-flag t) nil [69135 69318])
            ("put" code nil nil [69319 69356])
            ("lpr-printer-switch" variable nil nil [69358 69385])
            ("helm-ff-print" function (:arguments ("_candidate")) nil [69386 71419])
            ("helm-ff-run-print-file" function (:user-visible-flag t) nil [71421 71599])
            ("put" code nil nil [71600 71642])
            ("helm-ff-checksum" function (:arguments ("file")) nil [71644 72342])
            ("helm-ff-toggle-basename" function (:arguments ("_candidate")) nil [72344 72724])
            ("helm-ff-run-toggle-basename" function nil nil [72726 72873])
            ("put" code nil nil [72874 72921])
            ("helm-reduce-file-name" function (:arguments ("fname" "level")) nil [72923 73230])
            ("helm-iter-reduce-fname" function (:arguments ("fname")) nil [73232 73675])
            ("helm-find-files--level-tree" variable nil nil [73677 73717])
            ("helm-find-files--level-tree-iterator" variable nil nil [73718 73767])
            ("helm-find-files-up-one-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [73768 75628])
            ("put" code nil nil [75629 75677])
            ("helm-find-files-down-last-level" function (:user-visible-flag t) nil [75679 76299])
            ("put" code nil nil [76300 76351])
            ("helm-find-files--reset-level-tree" function nil nil [76353 76487])
            ("add-hook" code nil nil [76489 76553])
            ("add-hook" code nil nil [76554 76622])
            ("add-hook" code nil nil [76623 76703])
            ("helm-ff-retrieve-last-expanded" function nil nil [76705 77367])
            ("helm-ff-move-to-first-real-candidate" function nil nil [77369 78461])
            ("helm-ff-update-when-only-one-matched" function nil nil [78534 83348])
            ("helm-ff-auto-expand-to-home-or-root" function nil nil [83350 85438])
            ("helm-ff--expand-file-name-no-dot" function (:arguments ("name" "directory")) nil [85440 85682])
            ("helm-ff--expand-substitued-pattern" function (:arguments ("pattern")) nil [85684 86033])
            ("helm-substitute-in-filename" function (:arguments ("fname")) nil [86035 87363])
            ("helm-point-file-in-dired" function (:arguments ("file")) nil [87365 87689])
            ("helm-marked-files-in-dired" function (:arguments ("_candidate")) nil [87691 88483])
            ("helm-ff-run-marked-files-in-dired" function (:user-visible-flag t) nil [88485 88686])
            ("put" code nil nil [88687 88740])
            ("helm-ff--create-tramp-name" function (:arguments ("fname")) nil [88742 89495])
            ("helm-ff--tramp-cons-or-vector" function (:arguments ("vector-or-cons")) nil [89497 89682])
            ("helm-ff--get-tramp-methods" function nil nil [89684 89865])
            ("helm-ff--previous-mh-tramp-method" function (:arguments ("str")) nil [89867 90340])
            ("helm-ff--get-host-from-tramp-invalid-fname" function (:arguments ("fname")) nil [90342 90719])
            ("cl-defun" code nil nil [90721 92022])
            ("helm-ff-before-action-hook-fn" function nil nil [92024 92511])
            ("add-hook" code nil nil [92512 92578])
            ("cl-defun" code nil nil [92580 92797])
            ("helm-ff--tramp-postfixed-p" function (:arguments ("str")) nil [92799 93267])
            ("helm-ff-set-pattern" function (:arguments ("pattern")) nil [93269 96038])
            ("helm-find-files-get-candidates" function (:arguments ("require-match")) nil [96040 101546])
            ("helm-ff-directory-files" function (:arguments ("directory" "full")) nil [101548 102940])
            ("helm-ff-handle-backslash" function (:arguments ("fname")) nil [102942 103173])
            ("helm-ff-fuzzy-matching-p" function nil nil [103175 103303])
            ("helm-ff--transform-pattern-for-completion" function (:arguments ("pattern")) nil [103305 105806])
            ("helm-dir-is-dot" function (:arguments ("dir")) nil [105808 105891])
            ("helm-ff-save-history" function nil nil [105893 106369])
            ("add-hook" code nil nil [106370 106421])
            ("helm-files-save-file-name-history" function (:arguments ("force")) nil [106423 107322])
            ("add-hook" code nil nil [107323 107395])
            ("helm-ff-valid-symlink-p" function (:arguments ("file")) nil [107397 107668])
            ("helm-get-default-mode-for-file" function (:arguments ("filename")) nil [107670 107934])
            ("helm-ff-properties" function (:arguments ("candidate")) nil [107936 110074])
            ("helm-ff-properties-persistent" function (:user-visible-flag t) nil [110076 110327])
            ("put" code nil nil [110328 110377])
            ("helm-ff-persistent-delete" function (:user-visible-flag t) nil [110379 110622])
            ("put" code nil nil [110623 110668])
            ("helm-ff-dot-file-p" function (:arguments ("file")) nil [110670 110781])
            ("helm-ff-quick-delete" function (:arguments ("_candidate")) nil [110783 112242])
            ("helm-ff-kill-buffer-fname" function (:arguments ("candidate")) nil [112244 112656])
            ("helm-ff-kill-or-find-buffer-fname" function (:arguments ("candidate")) nil [112658 113620])
            ("helm-ff-run-kill-buffer-persistent" function (:user-visible-flag t) nil [113622 113884])
            ("put" code nil nil [113885 113939])
            ("helm-ff-prefix-filename" function (:arguments ("fname" "file-or-symlinkp" "new-file")) nil [113941 114828])
            ("helm-ff-score-candidate-for-pattern" function (:arguments ("str" "pattern")) nil [114830 114982])
            ("helm-ff-sort-candidates" function (:arguments ("candidates" "_source")) nil [114984 116651])
            ("helm-ff-boring-file-p" function (:arguments ("file")) nil [116653 116930])
            ("helm-ff-filter-candidate-one-by-one" function (:arguments ("file")) nil [116932 120155])
            ("helm-find-files-action-transformer" function (:arguments ("actions" "candidate")) nil [120157 122012])
            ("helm-ff-goto-linum" function (:arguments ("candidate")) nil [122014 122605])
            ("helm-ff-mail-attach-files" function (:arguments ("_candidate")) nil [122607 123769])
            ("image-dired-display-image-buffer" variable nil nil [123771 123812])
            ("helm-ff-rotate-current-image-1" function (:arguments ("file" "num-arg")) nil [123813 124675])
            ("helm-ff-rotate-image-left" function (:arguments ("candidate")) nil [124677 124846])
            ("helm-ff-rotate-image-right" function (:arguments ("candidate")) nil [124848 125015])
            ("helm-ff-rotate-left-persistent" function (:user-visible-flag t) nil [125017 125254])
            ("put" code nil nil [125255 125305])
            ("helm-ff-rotate-right-persistent" function (:user-visible-flag t) nil [125307 125547])
            ("put" code nil nil [125548 125599])
            ("helm-ff-exif-data" function (:arguments ("candidate")) nil [125601 126134])
            ("cl-defun" code nil nil [126136 132472])
            ("helm-find-files-recursive-dirs" function (:arguments ("directory" "input")) nil [132509 133995])
            ("helm-ff-recursive-dirs" function (:arguments ("_candidate")) nil [133997 134275])
            ("helm-ff-file-compressed-p" function (:arguments ("candidate")) nil [134277 134455])
            ("helm-insert-file-name-completion-at-point" function (:arguments ("candidate")) nil [134457 136580])
            ("cl-defun" code nil nil [136582 137375])
            ("helm-find-files-1" function (:arguments ("fname" "preselect")) nil [137377 139197])
            ("helm-ff-setup-update-hook" function nil nil [139199 139446])
            ("helm-find-files-cleanup" function nil nil [139448 139701])
            ("helm-find-files-toggle-to-bookmark" function (:user-visible-flag t) nil [139703 140355])
            ("put" code nil nil [140356 140410])
            ("helm-find-files-initial-input" function (:arguments ("input")) nil [140412 140767])
            ("helm-ffap-guesser" function nil nil [140769 142073])
            ("helm-find-files-input" function (:arguments ("file-at-pt" "thing-at-pt")) nil [142075 143693])
            ("helm-ff-find-url-at-point" function nil nil [143695 144377])
            ("helm-find-library-at-point" function nil nil [144379 145447])
            ("helm-ff--valid-default-directory" function nil nil [145526 145774])
            ("cl-defun" code nil nil [145776 149430])
            ("helm-get-dest-fnames-from-list" function (:arguments ("flist" "dest-cand" "rename-dir-flag")) nil [149432 150247])
            ("helm-ff-maybe-mark-candidates" function nil nil [150249 150996])
            ("helm-file-buffers" function (:arguments ("filename")) nil [151029 151329])
            ("helm-delete-file" function (:arguments ("file" "error-if-dot-file-p" "synchro")) nil [151331 152719])
            ("helm-delete-marked-files" function (:arguments ("_ignore")) nil [152721 153270])
            ("helm-find-file-or-marked" function (:arguments ("candidate")) nil [153272 154917])
            ("helm-ff--mkdir" function (:arguments ("dir" "helm-ff")) nil [154919 155803])
            ("helm-transform-file-load-el" function (:arguments ("actions" "candidate")) nil [155805 156101])
            ("helm-transform-file-browse-url" function (:arguments ("actions" "candidate")) nil [156103 156546])
            ("helm-file-on-mounted-network-p" function (:arguments ("file")) nil [156548 156882])
            ("file-cache-alist" variable nil nil [156926 156951])
            ("helm-ff-cache-add-file" function (:arguments ("_candidate")) nil [156953 157113])
            ("helm-ff-file-cache-remove-file-1" function (:arguments ("file")) nil [157115 157507])
            ("helm-ff-file-cache-remove-file" function (:arguments ("_file")) nil [157509 157694])
            ("helm-source-file-name-history" variable (:default-value (helm-build-sync-source "File Name History" :candidates (quote file-name-history) :persistent-action (function ignore) :filtered-candidate-transformer (function helm-file-name-history-transformer) :action (quote helm-type-file-actions))) nil [157726 157987])
            ("helm-source--ff-file-name-history" variable nil nil [157989 158172])
            ("helm-file-name-history-transformer" function (:arguments ("candidates" "_source")) nil [158174 158541])
            ("helm-ff-file-name-history" function (:user-visible-flag t) nil [158543 160085])
            ("put" code nil nil [160086 160131])
            ("helm--browse-project-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [160310 160376])
            ("helm-buffers-in-project-p" variable nil nil [160377 160411])
            ("helm-browse-project-get-buffers" function (:arguments ("root-directory")) nil [160413 160995])
            ("helm-browse-project-build-buffers-source" function (:arguments ("directory")) nil [160997 161342])
            ("helm-browse-project-walk-directory" function (:arguments ("directory")) nil [161344 161553])
            ("helm-browse-project-ag-find-files" function (:arguments ("directory")) nil [161555 161926])
            ("helm-browse-project-find-files" function (:arguments ("directory" "refresh")) nil [161928 163561])
            ("helm-browse-project-history" variable nil nil [163563 163603])
            ("helm-projects-history" function nil nil [163620 163984])
            ("helm-browse-project" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164001 166254])
            ("helm-browse-project-get--root-dir" function (:arguments ("directory")) nil [166256 166673])
            ("helm-ff-browse-project" function (:arguments ("_candidate")) nil [166675 166896])
            ("helm-ff-run-browse-project" function nil nil [166898 167032])
            ("put" code nil nil [167033 167079])
            ("helm-ff-gid" function (:arguments ("_candidate")) nil [167081 167188])
            ("helm-ff-run-gid" function nil nil [167190 167302])
            ("put" code nil nil [167303 167338])
            ("helm-ff-find-sh-command" function (:arguments ("_candidate")) nil [167383 167536])
            ("helm-ff-run-find-sh-command" function (:user-visible-flag t) nil [167538 167741])
            ("put" code nil nil [167742 167789])
            ("helm-find-files" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [167808 169895])
            ("helm-delete-tramp-connection" function (:user-visible-flag t) nil [169912 171655])
            ("helm-files" package nil nil [171658 171679]))          
      :file "helm-files.el"
      :pointmax 171821
      :fsize 171820
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax '((close-paren 1150 . 1151) (symbol 1004 . 1021) (open-paren 1003 . 1004)))
    (semanticdb-table "helm-bookmark.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [819 836])
            ("bookmark" include nil nil [837 856])
            ("helm" include nil nil [857 872])
            ("helm-lib" include nil nil [873 892])
            ("helm-help" include nil nil [893 913])
            ("helm-types" include nil nil [914 935])
            ("helm-utils" include nil nil [936 957])
            ("helm-info" include nil nil [958 978])
            ("helm-adaptive" include nil nil [979 1003])
            ("helm-net" include nil nil [1004 1023])
            ("declare-function" code nil nil [1025 1082])
            ("declare-function" code nil nil [1083 1168])
            ("helm-bookmark" customgroup (:user-visible-flag t) nil [1171 1259])
            ("helm-bookmark-show-location" variable nil nil [1261 1387])
            ("helm-bookmark-default-filtered-sources" variable (:default-value (append (quote (helm-source-bookmark-org helm-source-bookmark-files&dirs helm-source-bookmark-helm-find-files helm-source-bookmark-info helm-source-bookmark-gnus helm-source-bookmark-man helm-source-bookmark-images helm-source-bookmark-w3m)) (list (quote helm-source-bookmark-uncategorized) (quote helm-source-bookmark-set)))) nil [1389 1971])
            ("helm-bookmark-info" variable
               (:default-value (quote ((t (:foreground "green"))))
                :type "face")
                nil [1975 2119])
            ("helm-bookmark-w3m" variable
               (:default-value (quote ((t (:foreground "yellow"))))
                :type "face")
                nil [2121 2265])
            ("helm-bookmark-gnus" variable
               (:default-value (quote ((t (:foreground "magenta"))))
                :type "face")
                nil [2267 2388])
            ("helm-bookmark-man" variable
               (:default-value (quote ((t (:foreground "Orange4"))))
                :type "face")
                nil [2390 2515])
            ("helm-bookmark-file" variable
               (:default-value (quote ((t (:foreground "Deepskyblue2"))))
                :type "face")
                nil [2517 2643])
            ("helm-bookmark-file-not-found" variable
               (:default-value (quote ((t (:foreground "Slategray4"))))
                :type "face")
                nil [2645 2779])
            ("helm-bookmark-directory" variable
               (:default-value (quote ((t (:inherit helm-ff-directory))))
                :type "face")
                nil [2781 2912])
            ("helm-bookmark-addressbook" variable
               (:default-value (quote ((t (:foreground "tomato"))))
                :type "face")
                nil [2914 3048])
            ("helm-bookmark-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "C-c o") (quote helm-bookmark-run-jump-other-window)) (define-key map (kbd "C-d") (quote helm-bookmark-run-delete)) (define-key map (kbd "C-]") (quote helm-bookmark-toggle-filename)) (define-key map (kbd "M-e") (quote helm-bookmark-run-edit)) map)) nil [3052 3465])
            ("helm-source-basic-bookmarks" type
               (:interfaces ("helm-type-bookmark")
                :superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (bookmark-all-names)))") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(quote helm-bookmark-transformer)") nil nil))                  
                :type "class")
                nil [3467 3847])
            ("helm-source-bookmarks" variable (:default-value (helm-make-source "Bookmarks" (quote helm-source-basic-bookmarks))) nil [3849 3978])
            ("helm-bookmark-transformer" function (:arguments ("candidates" "_source")) nil [3980 4585])
            ("helm-bookmark-toggle-filename-1" function (:arguments ("_candidate")) nil [4587 5282])
            ("helm-bookmark-toggle-filename" function (:user-visible-flag t) nil [5284 5560])
            ("put" code nil nil [5561 5610])
            ("helm-bookmark-jump" function (:arguments ("candidate")) nil [5612 5793])
            ("helm-bookmark-jump-other-window" function (:arguments ("candidate")) nil [5795 5913])
            ("helm-source-bookmark-set" variable (:default-value (helm-build-dummy-source "Set Bookmark" :filtered-candidate-transformer (lambda (_candidates _source) (list (or (and (not (string= helm-pattern "")) helm-pattern) "Enter a bookmark name to record"))) :action (quote (("Set bookmark" lambda (candidate) (if (string= helm-pattern "") (message "No bookmark name given for record") (bookmark-set candidate))))))) nil [5937 6528])
            ("helm-bookmark--non-file-filename" variable
               (:constant-flag t
                :default-value "   - no file -")
                nil [6550 6672])
            ("helm-bookmark-gnus-bookmark-p" function (:arguments ("bookmark")) nil [6674 7020])
            ("helm-bookmark-w3m-bookmark-p" function (:arguments ("bookmark")) nil [7022 7364])
            ("helm-bookmark-woman-bookmark-p" function (:arguments ("bookmark")) nil [7366 7709])
            ("helm-bookmark-man-bookmark-p" function (:arguments ("bookmark")) nil [7711 8044])
            ("helm-bookmark-woman-man-bookmark-p" function (:arguments ("bookmark")) nil [8046 8303])
            ("helm-bookmark-info-bookmark-p" function (:arguments ("bookmark")) nil [8305 8514])
            ("helm-bookmark-image-bookmark-p" function (:arguments ("bookmark")) nil [8516 8735])
            ("helm-bookmark-file-p" function (:arguments ("bookmark")) nil [8737 9162])
            ("helm-bookmark-org-file-p" function (:arguments ("bookmark")) nil [9164 9359])
            ("helm-bookmark-helm-find-files-p" function (:arguments ("bookmark")) nil [9361 9593])
            ("helm-bookmark-addressbook-p" function (:arguments ("bookmark")) nil [9595 9953])
            ("helm-bookmark-uncategorized-bookmark-p" function (:arguments ("bookmark")) nil [9955 10651])
            ("helm-bookmark-filter-setup-alist" function (:arguments ("fn")) nil [10653 10929])
            ("w3m-async-exec" variable nil nil [10957 10980])
            ("helm-bookmark-jump-w3m" function (:arguments ("bookmark")) nil [10981 11631])
            ("defalias" code nil nil [11862 11924])
            ("defalias" code nil nil [12040 12090])
            ("defalias" code nil nil [12091 12137])
            ("defalias" code nil nil [12138 12189])
            ("defalias" code nil nil [12190 12246])
            ("defalias" code nil nil [12247 12306])
            ("defalias" code nil nil [12307 12361])
            ("defalias" code nil nil [12362 12415])
            ("defalias" code nil nil [12416 12465])
            ("helm-source-filtered-bookmarks" type
               (:interfaces ("helm-type-bookmark")
                :superclasses "helm-source-in-buffer"
                :members 
                  ( ("filtered-candidate-transformer" variable (:default-value "(quote (helm-adaptive-sort helm-highlight-bookmark))") nil nil))                  
                :type "class")
                nil [12506 12703])
            ("helm-bookmark-w3m-setup-alist" function nil nil [12727 12885])
            ("helm-source-bookmark-w3m" variable (:default-value (helm-make-source "Bookmark W3m" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-w3m-setup-alist))))) nil [12887 13158])
            ("helm-bookmark-images-setup-alist" function nil nil [13174 13340])
            ("helm-source-bookmark-images" variable (:default-value (helm-make-source "Bookmark Images" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-images-setup-alist))))) nil [13342 13622])
            ("helm-bookmark-man-setup-alist" function nil nil [13641 13805])
            ("helm-source-bookmark-man" variable (:default-value (helm-make-source "Bookmark Woman&Man" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-man-setup-alist))))) nil [13807 14084])
            ("helm-bookmark-org-setup-alist" function nil nil [14103 14262])
            ("helm-source-bookmark-org" variable (:default-value (helm-make-source " Bookmarked Org files" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-org-setup-alist))))) nil [14264 14544])
            ("helm-bookmark-gnus-setup-alist" function nil nil [14558 14719])
            ("helm-source-bookmark-gnus" variable (:default-value (helm-make-source "Bookmark Gnus" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-gnus-setup-alist))))) nil [14721 14995])
            ("helm-bookmark-info-setup-alist" function nil nil [15009 15170])
            ("helm-source-bookmark-info" variable (:default-value (helm-make-source "Bookmark Info" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-info-setup-alist))))) nil [15172 15446])
            ("helm-bookmark-local-files-setup-alist" function nil nil [15477 15644])
            ("helm-source-bookmark-files&dirs" variable (:default-value (helm-make-source "Bookmark Files&Directories" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-local-files-setup-alist))))) nil [15646 15946])
            ("helm-bookmark-helm-find-files-setup-alist" function nil nil [15981 16168])
            ("helm-bookmark-browse-project" function (:arguments ("candidate")) nil [16170 16365])
            ("helm-bookmark-run-browse-project" function (:user-visible-flag t) nil [16367 16567])
            ("put" code nil nil [16568 16620])
            ("helm-bookmark-find-files-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-bookmark-map) (define-key map (kbd "C-c o") (quote ignore)) (define-key map (kbd "C-x C-d") (quote helm-bookmark-run-browse-project)) map)) nil [16622 16866])
            ("helm-bookmark-override-inheritor" type
               (:superclasses "helm-source"
                :type "class")
                nil [16868 16928])
            ("helm--setup-source" function
               (:parent "helm-bookmark-override-inheritor"
                :arguments ("source"))
                nil [16930 17400])
            ("helm-bookmark-find-files-class" type
               (:interfaces ("helm-bookmark-override-inheritor")
                :superclasses "helm-source-filtered-bookmarks"
                :type "class")
                nil [17402 17556])
            ("helm-source-bookmark-helm-find-files" variable (:default-value (helm-make-source "Bookmark helm-find-files sessions" (quote helm-bookmark-find-files-class) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-helm-find-files-setup-alist))) :persistent-action (lambda (_candidate) (ignore)) :persistent-help "Do nothing")) nil [17558 17974])
            ("helm-bookmark-uncategorized-setup-alist" function nil nil [18007 18195])
            ("helm-source-bookmark-uncategorized" variable (:default-value (helm-make-source "Bookmark uncategorized" (quote helm-source-filtered-bookmarks) :init (lambda nil (bookmark-maybe-load-default-file) (helm-init-candidates-in-buffer (quote global) (helm-bookmark-uncategorized-setup-alist))))) nil [18197 18498])
            ("helm-highlight-bookmark" function (:arguments ("bookmarks" "_source")) nil [18521 23957])
            ("helm-bookmark-edit-bookmark" function (:arguments ("bookmark-name")) nil [23999 24493])
            ("helm-bookmark-edit-bookmark-1" function (:arguments ("bookmark-name" "handler")) nil [24495 25864])
            ("helm-bookmark-maybe-save-bookmark" function nil nil [25866 26103])
            ("helm-bookmark-rename" function
               (:user-visible-flag t
                :arguments ("old" "new" "batch"))
                nil [26105 27371])
            ("helm-bookmark-run-edit" function (:user-visible-flag t) nil [27373 27561])
            ("put" code nil nil [27562 27604])
            ("helm-bookmark-run-jump-other-window" function (:user-visible-flag t) nil [27608 27796])
            ("put" code nil nil [27797 27852])
            ("helm-bookmark-run-delete" function (:user-visible-flag t) nil [27854 28073])
            ("put" code nil nil [28074 28118])
            ("helm-bookmark-get-bookmark-from-name" function (:arguments ("bmk")) nil [28120 28377])
            ("helm-delete-marked-bookmarks" function (:arguments ("_ignore")) nil [28379 28609])
            ("helm-bookmarks" function (:user-visible-flag t) nil [28627 28881])
            ("helm-filtered-bookmarks" function (:user-visible-flag t) nil [28898 29373])
            ("helm-bookmark" package nil nil [29375 29399]))          
      :file "helm-bookmark.el"
      :pointmax 29544
      :fsize 29543
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-adaptive.el"
      :file "helm-adaptive.el"
      :fsize 12560
      :lastmodtime '(23227 37266 584700 798000))
    (semanticdb-table "helm-net.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [813 830])
            ("helm" include nil nil [831 846])
            ("helm-help" include nil nil [847 867])
            ("url" include nil nil [868 882])
            ("xml" include nil nil [883 897])
            ("browse-url" include nil nil [898 919])
            ("helm-net" customgroup (:user-visible-flag t) nil [923 1014])
            ("helm-google-suggest-default-browser-function" variable nil nil [1016 1274])
            ("helm-home-url" variable (:default-value "https://www.google.com") nil [1276 1397])
            ("helm-surfraw-default-browser-function" variable nil nil [1399 1600])
            ("helm-google-suggest-url" variable (:default-value "https://encrypted.google.com/complete/search?output=toolbar&q=%s") nil [1602 1837])
            ("helm-google-suggest-search-url" variable (:default-value "https://encrypted.google.com/search?ie=utf-8&oe=utf-8&q=%s") nil [1839 2062])
            ("helm-net-prefer-curl" variable nil nil [2064 2243])
            ("defvaralias" code nil nil [2245 2312])
            ("make-obsolete-variable" code nil nil [2313 2399])
            ("helm-surfraw-duckduckgo-url" variable (:default-value "https://duckduckgo.com/lite/?q=%s&kp=1") nil [2401 2705])
            ("helm-wikipedia-suggest-url" variable (:default-value "https://en.wikipedia.org/w/api.php?action=opensearch&search=%s") nil [2707 2946])
            ("helm-search-suggest-action-wikipedia-url" variable (:default-value "https://en.wikipedia.org/wiki/Special:Search?search=%s") nil [2948 3172])
            ("helm-wikipedia-summary-url" variable (:default-value "https://en.wikipedia.org/w/api.php?action=parse&format=json&prop=text&section=0&page=%s") nil [3174 3441])
            ("helm-search-suggest-action-youtube-url" variable (:default-value "https://www.youtube.com/results?aq=f&search_query=%s") nil [3443 3661])
            ("helm-search-suggest-action-imdb-url" variable (:default-value "http://www.imdb.com/find?s=all&q=%s") nil [3663 3858])
            ("helm-search-suggest-action-google-maps-url" variable (:default-value "https://maps.google.com/maps?f=q&source=s_q&q=%s") nil [3860 4082])
            ("helm-search-suggest-action-google-news-url" variable (:default-value "https://www.google.com/search?safe=off&prmd=nvlifd&source=lnms&tbs=nws:1&q=%s") nil [4084 4335])
            ("helm-google-suggest-actions" variable (:default-value (quote (("Google Search" . helm-google-suggest-action) ("Wikipedia" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-wikipedia-url candidate)) ("Youtube" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-youtube-url candidate)) ("IMDb" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-imdb-url candidate)) ("Google Maps" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-google-maps-url candidate)) ("Google News" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-google-news-url candidate))))) nil [4337 5560])
            ("helm-browse-url-firefox-new-window" variable (:default-value "-new-tab") nil [5562 5858])
            ("helm-search-suggest-perform-additional-action" function (:arguments ("url" "query")) nil [5927 6099])
            ("helm-net--url-retrieve-sync" function (:arguments ("request" "parser")) nil [6101 6369])
            ("helm-google-suggest-parser" function nil nil [6402 6714])
            ("helm-google-suggest-fetch" function (:arguments ("input")) nil [6716 6986])
            ("helm-google-suggest-set-candidates" function (:arguments ("request-prefix")) nil [6988 7702])
            ("helm-ggs-set-number-result" function (:arguments ("num")) nil [7704 8204])
            ("helm-google-suggest-action" function (:arguments ("candidate")) nil [8206 8532])
            ("helm-google-suggest-default-function" variable (:default-value (quote helm-google-suggest-set-candidates)) nil [8534 8669])
            ("helm-source-google-suggest" variable (:default-value (helm-build-sync-source "Google Suggest" :candidates (lambda nil (funcall helm-google-suggest-default-function)) :action (quote helm-google-suggest-actions) :volatile t :keymap helm-map :requires-pattern 3)) nil [8671 8945])
            ("helm-google-suggest-emacs-lisp" function nil nil [8947 9096])
            ("declare-function" code nil nil [9130 9186])
            ("helm-wikipedia-suggest-fetch" function nil nil [9187 9495])
            ("helm-wikipedia--parse-buffer" function nil nil [9497 10046])
            ("helm-wikipedia--summary-cache" variable (:default-value (make-hash-table :test (quote equal))) nil [10048 10117])
            ("helm-wikipedia-show-summary" function
               (:user-visible-flag t
                :arguments ("input"))
                nil [10118 10520])
            ("helm-wikipedia-persistent-action" function (:arguments ("candidate")) nil [10522 11111])
            ("helm-wikipedia--get-summary" function (:arguments ("input")) nil [11113 11864])
            ("helm-wikipedia--fetch-summary" function (:arguments ("input")) nil [11866 12099])
            ("helm-wikipedia--parse-summary" function nil nil [12101 13517])
            ("helm-wikipedia-map" variable (:default-value (let ((map (copy-keymap helm-map))) (define-key map (kbd "<C-return>") (quote helm-wikipedia-show-summary-action)) map)) nil [13520 13711])
            ("helm-source-wikipedia-suggest" variable (:default-value (helm-build-sync-source "Wikipedia Suggest" :candidates (function helm-wikipedia-suggest-fetch) :action (quote (("Wikipedia" lambda (candidate) (helm-search-suggest-perform-additional-action helm-search-suggest-action-wikipedia-url candidate)) ("Show summary in new buffer (C-RET)" . helm-wikipedia-show-summary))) :persistent-action (function helm-wikipedia-persistent-action) :persistent-help "show summary" :volatile t :keymap helm-wikipedia-map :requires-pattern 3)) nil [13713 14339])
            ("helm-wikipedia-show-summary-action" function (:user-visible-flag t) nil [14341 14573])
            ("helm-browse-url-chromium-program" variable (:default-value "chromium-browser") nil [14766 14826])
            ("helm-browse-url-uzbl-program" variable (:default-value "uzbl-browser") nil [14827 14879])
            ("helm-browse-url-conkeror-program" variable (:default-value "conkeror") nil [14880 14932])
            ("helm-browse-url-opera-program" variable (:default-value "opera") nil [14933 14979])
            ("helm-browse-url-default-browser-alist" variable
               (:user-visible-flag t
                :default-value (\` (((\, (or (and (boundp (quote w3m-command)) w3m-command) "/usr/bin/w3m")) . w3m-browse-url) ((\, browse-url-firefox-program) . browse-url-firefox) ((\, helm-browse-url-chromium-program) . helm-browse-url-chromium) ((\, helm-browse-url-conkeror-program) . helm-browse-url-conkeror) ((\, helm-browse-url-opera-program) . helm-browse-url-opera) ((\, helm-browse-url-uzbl-program) . helm-browse-url-uzbl) ((\, browse-url-kde-program) . browse-url-kde) ((\, browse-url-gnome-moz-program) . browse-url-gnome-moz) ((\, browse-url-mozilla-program) . browse-url-mozilla) ((\, browse-url-galeon-program) . browse-url-galeon) ((\, browse-url-netscape-program) . browse-url-netscape) ((\, browse-url-mosaic-program) . browse-url-mosaic) ((\, browse-url-xterm-program) . browse-url-text-xterm) ("emacs" . eww-browse-url))))
                nil [14980 15920])
            ("cl-defun" code nil nil [15922 16354])
            ("helm-browse-url-firefox" function
               (:user-visible-flag t
                :arguments ("url" "_ignore"))
                nil [16356 17028])
            ("helm-browse-url-opera" function
               (:user-visible-flag t
                :arguments ("url" "_ignore"))
                nil [17030 17636])
            ("helm-browse-url-chromium" function
               (:user-visible-flag t
                :arguments ("url" "_ignore"))
                nil [17638 17827])
            ("helm-browse-url-uzbl" function
               (:user-visible-flag t
                :arguments ("url" "_ignore"))
                nil [17829 18003])
            ("helm-browse-url-conkeror" function
               (:user-visible-flag t
                :arguments ("url" "_ignore"))
                nil [18005 18186])
            ("helm-browse-url-default-browser" function (:arguments ("url" "args")) nil [18188 18594])
            ("helm-browse-url" function (:arguments ("url" "args")) nil [18596 18781])
            ("helm-surfraw-engines-history" variable nil nil [18886 18927])
            ("helm-surfraw-input-history" variable nil nil [18928 18967])
            ("helm-surfraw--elvi-cache" variable nil nil [18968 19005])
            ("helm-build-elvi-list" function nil nil [19007 19330])
            ("helm-surfraw" function
               (:user-visible-flag t
                :arguments ("pattern" "engine"))
                nil [19347 20850])
            ("helm-google-suggest" function (:user-visible-flag t) nil [20867 21043])
            ("helm-wikipedia-suggest" function (:user-visible-flag t) nil [21060 21263])
            ("helm-net" package nil nil [21266 21285]))          
      :file "helm-net.el"
      :pointmax 21425
      :fsize 21424
      :lastmodtime '(23227 37266 588700 755000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-man.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [798 815])
            ("helm" include nil nil [816 831])
            ("helm-help" include nil nil [832 852])
            ("woman-topic-all-completions" variable nil nil [854 890])
            ("woman-manpath" variable nil nil [891 913])
            ("woman-path" variable nil nil [914 933])
            ("woman-expanded-directory-path" variable nil nil [934 972])
            ("declare-function" code nil nil [973 1045])
            ("declare-function" code nil nil [1046 1115])
            ("declare-function" code nil nil [1116 1177])
            ("declare-function" code nil nil [1178 1260])
            ("declare-function" code nil nil [1261 1325])
            ("declare-function" code nil nil [1326 1389])
            ("helm-man" customgroup (:user-visible-flag t) nil [1391 1470])
            ("helm-man-or-woman-function" variable (:default-value (quote Man-getpage-in-background)) nil [1472 1755])
            ("helm-man-format-switches" variable (:default-value (cl-case system-type ((darwin macos) "%s") (t "-l %s"))) nil [1757 2068])
            ("helm-man--pages" variable nil nil [2082 2207])
            ("helm-man-default-action" function (:arguments ("candidate")) nil [2209 3219])
            ("helm-man--init" function nil nil [3221 3659])
            ("helm-source-man-pages" variable (:default-value (helm-build-in-buffer-source "Manual Pages" :init (function helm-man--init) :persistent-action (function ignore) :filtered-candidate-transformer (lambda (candidates _source) (sort candidates (function helm-generic-sort-fn))) :action (quote (("Display Man page" . helm-man-default-action))) :group (quote helm-man))) nil [3661 4000])
            ("helm-man-woman" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4017 4277])
            ("helm-man" package nil nil [4279 4298]))          
      :file "helm-man.el"
      :pointmax 4438
      :fsize 4437
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-find.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("helm-files" include nil nil [815 836])
            ("helm-external" include nil nil [837 861])
            ("helm-findutils-skip-boring-files" variable (:default-value t) nil [863 997])
            ("helm-findutils-search-full-path" variable nil nil [999 1213])
            ("helm-source-findutils" variable (:default-value (helm-build-async-source "Find" :header-name (lambda (name) (concat name " in [" (helm-default-directory) "]")) :candidates-process (quote helm-find-shell-command-fn) :filtered-candidate-transformer (quote helm-findutils-transformer) :action-transformer (quote helm-transform-file-load-el) :persistent-action (quote helm-ff-kill-or-find-buffer-fname) :action (quote helm-type-file-actions) :keymap helm-generic-files-map :candidate-number-limit 9999 :requires-pattern 3)) nil [1215 1738])
            ("helm-findutils-transformer" function (:arguments ("candidates" "_source")) nil [1740 2743])
            ("helm-find--build-cmd-line" function nil nil [2745 4304])
            ("helm-find-shell-command-fn" function nil nil [4306 5666])
            ("helm-find-1" function (:arguments ("dir")) nil [5668 5936])
            ("helm-find" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [5988 6901])
            ("helm-find" package nil nil [6903 6923]))          
      :file "helm-find.el"
      :pointmax 7064
      :fsize 7063
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-external.el"
      :file "helm-external.el"
      :fsize 9283
      :lastmodtime '(23227 37266 584700 798000))
    (semanticdb-table "helm-for-files.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("helm-files" include nil nil [815 836])
            ("helm-external" include nil nil [837 861])
            ("helm-bookmark" include nil nil [862 886])
            ("helm-multi-files-toggle-locate-binding" variable (:default-value "C-c p") nil [888 1058])
            ("helm-for-files-preferred-list" variable (:default-value (quote (helm-source-buffers-list helm-source-recentf helm-source-bookmarks helm-source-file-cache helm-source-files-in-current-dir helm-source-locate))) nil [1060 1510])
            ("file-cache-alist" variable nil nil [1533 1558])
            ("helm-file-cache" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-in-buffer"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (require (quote filecache)))") nil nil))                  
                :type "class")
                nil [1560 1679])
            ("helm-file-cache-get-candidates" function nil nil [1681 1915])
            ("helm-source-file-cache" variable nil nil [1917 1952])
            ("helm-file-cache-fuzzy-match" variable nil nil [1954 2369])
            ("cl-defun" code nil nil [2371 2746])
            ("helm-transform-file-cache" function (:arguments ("actions" "_candidate")) nil [2748 3060])
            ("helm-recentf--basename-flag" variable nil nil [3086 3126])
            ("helm-recentf-pattern-transformer" function (:arguments ("pattern")) nil [3128 3640])
            ("helm-turn-on-recentf" variable (:default-value t) nil [3642 3769])
            ("helm-recentf-source" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-sync"
                :members 
                  ( ("init" variable (:default-value "(lambda nil (require (quote recentf)) (when helm-turn-on-recentf (recentf-mode 1)))") nil nil)
                    ("candidates" variable (:default-value "(lambda nil recentf-list)") nil nil)
                    ("pattern-transformer" variable (:default-value "(quote helm-recentf-pattern-transformer)") nil nil)
                    ("match-part" variable (:default-value "(lambda (candidate) (if (or helm-ff-transformer-show-only-basename helm-recentf--basename-flag) (helm-basename candidate) candidate))") nil nil)
                    ("migemo" variable (:default-value "t") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-ff-kill-or-find-buffer-fname)") nil nil))                  
                :type "class")
                nil [3771 4439])
            ("helm--setup-source" function
               (:parent "helm-recentf-source"
                :arguments ("source"))
                nil [4441 4848])
            ("helm-source-recentf" variable nil nil [4850 5000])
            ("helm-recentf-fuzzy-match" variable nil nil [5002 5444])
            ("helm-highlight-files" function (:arguments ("files" "_source")) nil [5479 7683])
            ("helm-files-in-current-dir-source" type
               (:interfaces ("helm-type-file")
                :superclasses "helm-source-sync"
                :members 
                  ( ("candidates" variable (:default-value "(lambda nil (with-helm-current-buffer (let ((dir (helm-current-directory))) (when (file-accessible-directory-p dir) (directory-files dir t)))))") nil nil)
                    ("pattern-transformer" variable (:default-value "(quote helm-recentf-pattern-transformer)") nil nil)
                    ("match-part" variable (:default-value "(lambda (candidate) (if (or helm-ff-transformer-show-only-basename helm-recentf--basename-flag) (helm-basename candidate) candidate))") nil nil)
                    ("fuzzy-match" variable (:default-value "t") nil nil)
                    ("migemo" variable (:default-value "t") nil nil))                  
                :type "class")
                nil [7685 8427])
            ("helm-source-files-in-current-dir" variable (:default-value (helm-make-source "Files from Current Directory" (quote helm-files-in-current-dir-source))) nil [8429 8562])
            ("helm-for-files" function (:user-visible-flag t) nil [8579 9064])
            ("helm-multi-files-toggle-to-locate" function nil nil [9066 9749])
            ("put" code nil nil [9750 9803])
            ("helm-multi-files" function (:user-visible-flag t) nil [9820 11699])
            ("helm-recentf" function (:user-visible-flag t) nil [11716 11914])
            ("helm-for-files" package nil nil [11916 11941]))          
      :file "helm-for-files.el"
      :pointmax 12087
      :fsize 12086
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-ring.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [836 853])
            ("helm" include nil nil [854 869])
            ("helm-utils" include nil nil [870 891])
            ("helm-help" include nil nil [892 912])
            ("helm-elisp" include nil nil [913 934])
            ("declare-function" code nil nil [936 1022])
            ("helm-ring" customgroup (:user-visible-flag t) nil [1026 1119])
            ("helm-kill-ring-threshold" variable (:default-value 3) nil [1121 1271])
            ("helm-kill-ring-max-offset" variable (:default-value 400) nil [1273 1767])
            ("helm-register-max-offset" variable (:default-value 160) nil [1769 1906])
            ("helm-kill-ring-actions" variable (:default-value (quote (("Yank" . helm-kill-ring-action-yank) ("Delete" . helm-kill-ring-action-delete) ("Append" . helm-kill-ring-append)))) nil [1908 2187])
            ("helm-kill-ring-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-y") (quote helm-next-line)) (define-key map (kbd "M-u") (quote helm-previous-line)) (define-key map (kbd "M-D") (quote helm-kill-ring-delete)) (define-key map (kbd "C-M-w") (quote helm-kill-ring-run-append)) (define-key map (kbd "C-]") (quote helm-kill-ring-toggle-truncated)) (define-key map (kbd "C-c C-k") (quote helm-kill-ring-kill-selection)) map)) nil [2211 2730])
            ("helm-source-kill-ring" variable (:default-value (helm-build-sync-source "Kill Ring" :init (lambda nil (helm-attrset (quote last-command) last-command) (helm-attrset (quote multiline) helm-kill-ring-max-offset)) :candidates (function helm-kill-ring-candidates) :filtered-candidate-transformer (function helm-kill-ring-transformer) :action (quote helm-kill-ring-actions) :persistent-action (quote ignore) :help-message (quote helm-kill-ring-help-message) :persistent-help "DoNothing" :keymap helm-kill-ring-map :migemo t :multiline (quote helm-kill-ring-max-offset) :group (quote helm-ring))) nil [2732 3362])
            ("helm-kill-ring-candidates" function nil nil [3364 3617])
            ("helm-kill-ring-transformer" function (:arguments ("candidates" "_source")) nil [3619 3887])
            ("helm-kill-ring--truncated-flag" variable nil nil [3889 3932])
            ("helm-kill-ring-toggle-truncated" function (:user-visible-flag t) nil [3933 4506])
            ("put" code nil nil [4507 4558])
            ("helm-kill-ring-kill-selection" function (:user-visible-flag t) nil [4560 4768])
            ("put" code nil nil [4769 4818])
            ("helm-kill-ring--preselect-fn" function (:arguments ("candidate")) nil [4820 5322])
            ("helm-kill-ring-action-yank" function (:arguments ("str")) nil [5324 8125])
            ("define-obsolete-function-alias" code nil nil [8126 8217])
            ("helm-kill-ring-action-delete" function (:arguments ("_candidate")) nil [8219 8433])
            ("helm-kill-ring-delete" function (:user-visible-flag t) nil [8435 8662])
            ("helm-kill-ring-append" function (:arguments ("_candidate")) nil [8664 8962])
            ("helm-kill-ring-run-append" function (:user-visible-flag t) nil [8964 9137])
            ("helm-mark-ring-line-string-at-pos" function (:arguments ("pos")) nil [9304 9655])
            ("helm-mark-ring-get-candidates" function nil nil [9657 10315])
            ("helm-mark-ring-default-action" function (:arguments ("candidate")) nil [10317 10695])
            ("helm-source-mark-ring" variable (:default-value (helm-build-sync-source "mark-ring" :candidates (function helm-mark-ring-get-candidates) :action (quote (("Goto line" . helm-mark-ring-default-action))) :persistent-help "Show this line" :group (quote helm-ring))) nil [10697 10936])
            ("helm-source-global-mark-ring" variable (:default-value (helm-build-sync-source "global-mark-ring" :candidates (function helm-global-mark-ring-get-candidates) :action (quote (("Goto line" . helm-mark-ring-default-action))) :persistent-help "Show this line" :group (quote helm-ring))) nil [10959 11218])
            ("helm-global-mark-ring-format-buffer" function (:arguments ("marker")) nil [11220 11781])
            ("helm-global-mark-ring-get-candidates" function nil nil [11783 12296])
            ("helm-source-register" variable (:default-value (helm-build-sync-source "Registers" :candidates (function helm-register-candidates) :action-transformer (function helm-register-action-transformer) :persistent-help "" :multiline t :action (quote (("Delete Register(s)" lambda (_candidate) (cl-loop for candidate in (helm-marked-candidates) for register = (car candidate) do (setq register-alist (delq (assoc register register-alist) register-alist)))))) :group (quote helm-ring))) nil [12340 12987])
            ("helm-register-candidates" function nil nil [12989 15847])
            ("helm-register-action-transformer" function (:arguments ("actions" "register-and-functions")) nil [15849 17291])
            ("helm-mark-ring" function (:user-visible-flag t) nil [17308 17500])
            ("helm-global-mark-ring" function (:user-visible-flag t) nil [17517 17737])
            ("helm-all-mark-rings" function (:user-visible-flag t) nil [17754 18043])
            ("helm-register" function (:user-visible-flag t) nil [18060 18246])
            ("helm-show-kill-ring" function (:user-visible-flag t) nil [18263 18680])
            ("helm-execute-kmacro" function (:user-visible-flag t) nil [18697 20087])
            ("helm-ring" package nil nil [20089 20109]))          
      :file "helm-ring.el"
      :pointmax 20250
      :fsize 20249
      :lastmodtime '(23227 37266 588700 755000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-sys.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [816 833])
            ("helm" include nil nil [834 849])
            ("helm-help" include nil nil [850 870])
            ("helm-utils" include nil nil [871 892])
            ("helm-sys" customgroup (:user-visible-flag t) nil [896 967])
            ("helm-top-columns" variable
               (:default-value (quote ((t :inherit helm-header)))
                :type "face")
                nil [969 1091])
            ("helm-top-command" variable (:default-value (cl-case system-type (darwin "env COLUMNS=%s ps -axo pid,user,pri,nice,ucomm,tty,start_time,vsz,%%cpu,%%mem,etime,command") (t "env COLUMNS=%s top -b -n 1"))) nil [1095 2242])
            ("helm-top-sort-colums-alist" variable (:default-value (quote ((com . 11) (mem . 9) (cpu . 8) (user . 1)))) nil [2244 2807])
            ("helm-top-poll-delay" variable (:default-value 1.5) nil [2809 3027])
            ("helm-top-poll-delay-post-command" variable (:default-value 1.0) nil [3029 3235])
            ("helm-top-poll-preselection" variable (:default-value (quote linum)) nil [3237 3641])
            ("helm-top-sort-fn" variable nil nil [3668 3697])
            ("helm-top-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "M-P") (quote helm-top-run-sort-by-cpu)) (define-key map (kbd "M-C") (quote helm-top-run-sort-by-com)) (define-key map (kbd "M-M") (quote helm-top-run-sort-by-mem)) (define-key map (kbd "M-U") (quote helm-top-run-sort-by-user)) map)) nil [3698 4046])
            ("helm-top-after-init-hook" variable nil nil [4048 4114])
            ("helm-top--poll-timer" variable nil nil [4116 4149])
            ("helm-top-poll" function (:arguments ("no-update" "delay")) nil [4151 5274])
            ("helm-top--poll-delay" function nil nil [5276 5339])
            ("helm-top-poll-no-update" function nil nil [5341 5477])
            ("helm-top-initialize-poll-hooks" function nil nil [5479 6014])
            ("define-minor-mode" code nil nil [6031 6494])
            ("helm-source-top" variable (:default-value (helm-build-in-buffer-source "Top" :header-name (lambda (name) (concat name (if helm-top-poll-mode " (auto updating)" " (Press C-c C-u to refresh)"))) :init (function helm-top-init) :after-init-hook (quote helm-top-after-init-hook) :cleanup (lambda nil (when helm-top--poll-timer (cancel-timer helm-top--poll-timer)) (remove-hook (quote post-command-hook) (quote helm-top-poll-no-update)) (remove-hook (quote focus-in-hook) (quote helm-top-poll-no-update))) :display-to-real (function helm-top-display-to-real) :persistent-action (function helm-top-sh-persistent-action) :persistent-help "SIGTERM" :help-message (quote helm-top-help-message) :mode-line (quote helm-top-mode-line) :follow (quote never) :keymap helm-top-map :filtered-candidate-transformer (function helm-top-sort-transformer) :action-transformer (function helm-top-action-transformer) :group (quote helm-sys))) nil [6496 7498])
            ("helm-top--line" variable nil nil [7500 7527])
            ("helm-top-transformer" function (:arguments ("candidates" "_source")) nil [7528 8046])
            ("helm-top--skip-top-line" function nil nil [8048 8376])
            ("helm-top-action-transformer" function (:arguments ("actions" "_candidate")) nil [8378 9944])
            ("helm-top--marked-pids" function nil nil [9946 10047])
            ("helm-top-sh" function (:arguments ("sig" "pids")) nil [10049 10335])
            ("helm-top-sh-persistent-action" function (:arguments ("pid")) nil [10337 10473])
            ("helm-top-init" function nil nil [10475 10802])
            ("helm-top-display-to-real" function (:arguments ("line")) nil [10804 10902])
            ("helm-top-set-mode-line" function (:arguments ("str")) nil [10925 11190])
            ("helm-top-sort-transformer" function (:arguments ("candidates" "source")) nil [11192 11649])
            ("helm-top-sort-by-com" function (:arguments ("s1" "s2")) nil [11651 11919])
            ("helm-top-sort-by-mem" function (:arguments ("s1" "s2")) nil [11921 12221])
            ("helm-top-sort-by-cpu" function (:arguments ("s1" "s2")) nil [12223 12523])
            ("helm-top-sort-by-user" function (:arguments ("s1" "s2")) nil [12525 12799])
            ("helm-top--preselect-fn" function nil nil [12801 13097])
            ("helm-top-run-sort-by-com" function nil nil [13099 13272])
            ("helm-top-run-sort-by-cpu" function nil nil [13274 13574])
            ("helm-top-run-sort-by-mem" function nil nil [13576 13749])
            ("helm-top-run-sort-by-user" function nil nil [13751 13927])
            ("helm-xrandr-info" function nil nil [14007 14530])
            ("helm-xrandr-screen" function nil nil [14532 14624])
            ("helm-xrandr-output" function nil nil [14626 14718])
            ("helm-source-xrandr-change-resolution" variable (:default-value (helm-build-sync-source "Change Resolution" :candidates (lambda nil (with-temp-buffer (call-process "xrandr" nil (current-buffer) nil "--screen" (helm-xrandr-screen) "-q") (goto-char 1) (cl-loop while (re-search-forward "   \\([0-9]+x[0-9]+\\)" nil t) for mode = (match-string 1) unless (member mode modes) collect mode into modes finally return modes))) :action (helm-make-actions "Change Resolution" (lambda (mode) (call-process "xrandr" nil nil nil "--screen" (helm-xrandr-screen) "--output" (helm-xrandr-output) "--mode" mode))))) nil [14720 15601])
            ("helm-source-emacs-process" variable (:default-value (helm-build-sync-source "Emacs Process" :init (lambda nil (list-processes--refresh)) :candidates (lambda nil (mapcar (function process-name) (process-list))) :persistent-action (lambda (elm) (delete-process (get-process elm)) (helm-delete-current-selection)) :persistent-help "Kill Process" :action (helm-make-actions "Kill Process" (lambda (_elm) (cl-loop for p in (helm-marked-candidates) do (delete-process (get-process p))))))) nil [15629 16261])
            ("helm-top" function (:user-visible-flag t) nil [16280 16829])
            ("helm-list-emacs-process" function (:user-visible-flag t) nil [16846 17006])
            ("helm-xrandr-set" function (:user-visible-flag t) nil [17023 17188])
            ("helm-sys" package nil nil [17190 17209]))          
      :file "helm-sys.el"
      :pointmax 17349
      :fsize 17348
      :lastmodtime '(23227 37266 588700 755000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-org.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [827 844])
            ("helm" include nil nil [845 860])
            ("helm-utils" include nil nil [861 882])
            ("org" include nil nil [883 897])
            ("org-macs" include nil nil [968 987])
            ("declare-function" code nil nil [990 1045])
            ("helm-org" customgroup (:user-visible-flag t) nil [1047 1121])
            ("helm-org-headings-fontify" variable nil nil [1123 1348])
            ("helm-org-format-outline-path" variable nil nil [1350 1462])
            ("helm-org-show-filename" variable nil nil [1464 1671])
            ("helm-org-headings-min-depth" variable (:default-value 1) nil [1673 1799])
            ("helm-org-headings-max-depth" variable (:default-value 8) nil [1801 1929])
            ("helm-org-headings-actions" variable (:default-value (quote (("Go to heading" . helm-org-goto-marker) ("Open in indirect buffer `C-c i'" . helm-org--open-heading-in-indirect-buffer) ("Refile heading(s) (multiple-marked-to-selected, or current-to-selected) `C-c w`" . helm-org--refile-heading-to) ("Insert link to this heading `C-c l`" . helm-org-insert-link-to-heading-at-marker)))) nil [1931 2448])
            ("helm-org-truncate-lines" variable (:default-value t) nil [2450 2566])
            ("helm-org-ignore-autosaves" variable nil nil [2568 2719])
            ("org-capture-templates" variable nil nil [2755 2785])
            ("helm-source-org-capture-templates" function nil nil [2786 3149])
            ("helm-org-goto-marker" function (:arguments ("marker")) nil [3175 3373])
            ("helm-org--open-heading-in-indirect-buffer" function (:arguments ("marker")) nil [3375 3770])
            ("helm-org-run-open-heading-in-indirect-buffer" function (:user-visible-flag t) nil [3772 3997])
            ("put" code nil nil [3998 4062])
            ("helm-org-headings-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "C-c i") (quote helm-org-run-open-heading-in-indirect-buffer)) (define-key map (kbd "C-c w") (quote helm-org-run-refile-heading-to)) (define-key map (kbd "C-c l") (quote helm-org-run-insert-link-to-heading-at-marker)) map)) nil [4064 4459])
            ("helm-org-headings-class" type
               (:superclasses "helm-source-sync"
                :members 
                  ( ("parents" variable (:default-value "nil") nil nil)
                    ("match" variable (:default-value "(lambda (candidate) (string-match helm-pattern (helm-aif (get-text-property 0 (quote helm-real-display) candidate) it candidate)))") nil nil)
                    ("help-message" variable (:default-value "(quote helm-org-headings-help-message)") nil nil)
                    ("action" variable (:default-value "(quote helm-org-headings-actions)") nil nil)
                    ("keymap" variable (:default-value "(quote helm-org-headings-map)") nil nil)
                    ("group" variable (:default-value "(quote helm-org)") nil nil))                  
                :type "class")
                nil [4461 4998])
            ("helm--setup-source" function
               (:parent "helm-org-headings-class"
                :arguments ("source"))
                nil [5000 5330])
            ("helm-source-org-headings-for-files" function (:arguments ("filenames" "parents")) nil [5332 5577])
            ("helm-org-startup-visibility" function (:arguments ("candidates" "_source")) nil [5579 7967])
            ("helm-org-get-candidates" function (:arguments ("filenames" "parents")) nil [7969 8334])
            ("helm-org--get-candidates-in-file" function (:arguments ("filename" "fontify" "nofname" "parents")) nil [8336 11542])
            ("helm-org-insert-link-to-heading-at-marker" function (:arguments ("marker")) nil [11544 11968])
            ("helm-org-run-insert-link-to-heading-at-marker" function nil nil [11970 12147])
            ("helm-org--refile-heading-to" function (:arguments ("marker")) nil [12149 13059])
            ("helm-org-in-buffer-preselect" function nil nil [13061 13334])
            ("helm-org-run-refile-heading-to" function nil nil [13336 13479])
            ("put" code nil nil [13480 13530])
            ("helm-org-agenda-files-headings" function (:user-visible-flag t) nil [13548 14416])
            ("helm-org-in-buffer-headings" function (:user-visible-flag t) nil [14433 14851])
            ("helm-org-parent-headings" function (:user-visible-flag t) nil [14868 15388])
            ("helm-org-capture-templates" function (:user-visible-flag t) nil [15405 15687])
            ("crm-separator" variable nil nil [15851 15873])
            ("helm-org-completing-read-tags" function (:arguments ("prompt" "collection" "pred" "req" "initial" "hist" "def" "inherit-input-method" "_name" "_buffer")) nil [15890 17166])
            ("helm-org" package nil nil [17168 17187]))          
      :file "helm-org.el"
      :pointmax 17327
      :fsize 17326
      :lastmodtime '(23227 37266 588700 755000)
      :unmatched-syntax '((close-paren 987 . 988) (symbol 948 . 965) (open-paren 947 . 948)))
    (semanticdb-table "helm-font.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [811 828])
            ("helm" include nil nil [829 844])
            ("helm-help" include nil nil [845 865])
            ("helm-font" customgroup (:user-visible-flag t) nil [867 957])
            ("helm-ucs-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map (kbd "<C-backspace>") (quote helm-ucs-persistent-delete)) (define-key map (kbd "<C-left>") (quote helm-ucs-persistent-backward)) (define-key map (kbd "<C-right>") (quote helm-ucs-persistent-forward)) (define-key map (kbd "<C-return>") (quote helm-ucs-persistent-insert)) (define-key map (kbd "C-c SPC") (quote helm-ucs-persistent-insert-space)) map)) nil [959 1453])
            ("helm-ucs-char" variable
               (:default-value (quote ((((class color) (background dark)) (:foreground "Gold"))))
                :type "face")
                nil [1455 1602])
            ("helm-xfonts-cache" variable nil nil [1630 1660])
            ("helm-previous-font" variable nil nil [1661 1692])
            ("helm-source-xfonts" variable (:default-value (helm-build-sync-source "X Fonts" :init (lambda nil (unless helm-xfonts-cache (setq helm-xfonts-cache (x-list-fonts "*"))) (setq helm-previous-font (cdr (assq (quote font) (frame-parameters))))) :candidates (quote helm-xfonts-cache) :action (quote (("Copy font to kill ring" lambda (elm) (kill-new elm)) ("Set font" lambda (elm) (kill-new elm) (set-frame-font elm (quote keep-size)) (message "Font copied to kill ring")))) :cleanup (lambda nil (set-frame-font helm-previous-font (quote keep-size))) :persistent-action (lambda (new-font) (set-frame-font new-font (quote keep-size)) (kill-new new-font)) :persistent-help "Preview font and copy to kill-ring")) nil [1693 2744])
            ("helm-ucs--max-len" variable nil nil [2778 2808])
            ("helm-ucs--names" variable nil nil [2809 2837])
            ("helm-ucs-history" variable nil nil [2838 2867])
            ("helm-calculate-ucs-alist-max-len" function (:arguments ("names")) nil [2869 3183])
            ("helm-calculate-ucs-hash-table-max-len" function (:arguments ("names")) nil [3185 3557])
            ("helm-calculate-ucs-max-len" function nil nil [3559 3836])
            ("helm-ucs-collect-symbols-alist" function (:arguments ("names")) nil [3838 4910])
            ("helm-ucs-collect-symbols-hash-table" function (:arguments ("names")) nil [4912 5803])
            ("helm-ucs-collect-symbols" function (:arguments ("ucs-struct")) nil [5805 6125])
            ("helm-ucs-init" function nil nil [6127 6433])
            ("helm-ucs-match" function (:arguments ("candidate" "n")) nil [6459 6734])
            ("helm-ucs-insert" function (:arguments ("candidate" "n")) nil [6736 6880])
            ("helm-ucs-insert-char" function (:arguments ("candidate")) nil [6882 7002])
            ("helm-ucs-insert-code" function (:arguments ("candidate")) nil [7004 7124])
            ("helm-ucs-insert-name" function (:arguments ("candidate")) nil [7126 7246])
            ("helm-ucs-persistent-insert" function (:user-visible-flag t) nil [7248 7474])
            ("put" code nil nil [7475 7521])
            ("helm-ucs-kill-char" function (:arguments ("_candidate")) nil [7539 7759])
            ("helm-ucs-kill-code" function (:arguments ("candidate")) nil [7761 7841])
            ("helm-ucs-kill-name" function (:arguments ("candidate")) nil [7843 7923])
            ("helm-ucs-forward-char" function (:arguments ("_candidate")) nil [7971 8063])
            ("helm-ucs-backward-char" function (:arguments ("_candidate")) nil [8065 8159])
            ("helm-ucs-delete-backward" function (:arguments ("_candidate")) nil [8161 8256])
            ("helm-ucs-insert-space" function (:arguments ("_candidate")) nil [8258 8346])
            ("helm-ucs-persistent-forward" function nil nil [8348 8535])
            ("put" code nil nil [8536 8583])
            ("helm-ucs-persistent-backward" function nil nil [8585 8768])
            ("put" code nil nil [8769 8817])
            ("helm-ucs-persistent-delete" function nil nil [8819 9006])
            ("put" code nil nil [9007 9053])
            ("helm-ucs-persistent-insert-space" function nil nil [9055 9257])
            ("helm-source-ucs" variable (:default-value (helm-build-in-buffer-source "Ucs names" :data (function helm-ucs-init) :get-line (function buffer-substring) :help-message (quote helm-ucs-help-message) :match-part (lambda (candidate) (cadr (split-string candidate ":"))) :filtered-candidate-transformer (lambda (candidates _source) (sort candidates (function helm-generic-sort-fn))) :action (quote (("Insert character" . helm-ucs-insert-char) ("Insert character name" . helm-ucs-insert-name) ("Insert character code in hex" . helm-ucs-insert-code) ("Kill marked characters" . helm-ucs-kill-char) ("Kill name" . helm-ucs-kill-name) ("Kill code" . helm-ucs-kill-code))) :keymap helm-ucs-map)) nil [9259 10041])
            ("helm-select-xfont" function (:user-visible-flag t) nil [10058 10220])
            ("helm-ucs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10237 10685])
            ("helm-font" package nil nil [10687 10707]))          
      :file "helm-font.el"
      :pointmax 10848
      :fsize 10904
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-misc.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [808 825])
            ("helm" include nil nil [826 841])
            ("helm-help" include nil nil [842 862])
            ("helm-types" include nil nil [863 884])
            ("declare-function" code nil nil [886 941])
            ("display-time-world-list" variable nil nil [942 974])
            ("declare-function" code nil nil [975 1024])
            ("declare-function" code nil nil [1025 1076])
            ("declare-function" code nil nil [1077 1131])
            ("helm-misc" customgroup (:user-visible-flag t) nil [1135 1223])
            ("helm-time-zone-home-location" variable (:default-value "Paris") nil [1225 1340])
            ("helm-timezone-actions" variable (:default-value (quote (("Set timezone env (TZ)" lambda (candidate) (setenv "TZ" candidate))))) nil [1342 1592])
            ("helm-time-zone-current" variable
               (:default-value (quote ((t (:foreground "green"))))
                :type "face")
                nil [1594 1740])
            ("helm-time-zone-home" variable
               (:default-value (quote ((t (:foreground "red"))))
                :type "face")
                nil [1742 1880])
            ("LaTeX-math-menu" variable nil nil [1906 1930])
            ("helm-latex-math-candidates" function nil nil [1931 2198])
            ("helm-source-latex-math" variable (:default-value (helm-build-sync-source "Latex Math Menu" :init (lambda nil (with-helm-current-buffer (LaTeX-math-mode 1))) :candidate-number-limit 9999 :candidates (quote helm-latex-math-candidates) :action (lambda (candidate) (call-interactively candidate)))) nil [2200 2526])
            ("helm-jabber-online-contacts" function nil nil [2562 2877])
            ("helm-source-jabber-contacts" variable (:default-value (helm-build-sync-source "Jabber Contacts" :init (lambda nil (require (quote jabber))) :candidates (lambda nil (mapcar (quote car) (helm-jabber-online-contacts))) :action (lambda (x) (jabber-chat-with (jabber-read-account) (symbol-name (cdr (assoc x (helm-jabber-online-contacts)))))))) nil [2879 3258])
            ("helm-time-zone-transformer" function (:arguments ("candidates" "_source")) nil [3278 3764])
            ("helm-source-time-world" variable (:default-value (helm-build-in-buffer-source "Time World List" :init (lambda nil (require (quote time))) :data (lambda nil (with-temp-buffer (display-time-world-display display-time-world-list) (buffer-string))) :action (quote helm-timezone-actions) :filtered-candidate-transformer (quote helm-time-zone-transformer))) nil [3766 4134])
            ("helm-call-interactively" function (:arguments ("cmd-or-name")) nil [4152 4755])
            ("helm-minibuffer-history-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map helm-map) (define-key map [remap helm-minibuffer-history] (quote undefined)) map)) nil [4786 4968])
            ("helm-minibuffer-history-must-match" variable (:default-value t) nil [4970 5242])
            ("helm-comint-input-ring-action" function (:arguments ("candidate")) nil [5268 5473])
            ("helm-source-comint-input-ring" variable (:default-value (helm-build-sync-source "Comint history" :candidates (lambda nil (with-helm-current-buffer (ring-elements comint-input-ring))) :action (quote helm-comint-input-ring-action))) nil [5475 5796])
            ("helm-source-ratpoison-commands" variable (:default-value (helm-build-in-buffer-source "Ratpoison Commands" :init (quote helm-ratpoison-commands-init) :action (helm-make-actions "Execute the command" (quote helm-ratpoison-commands-execute)) :display-to-real (quote helm-ratpoison-commands-display-to-real) :candidate-number-limit 999999)) nil [5828 6157])
            ("helm-ratpoison-commands-init" function nil nil [6159 6786])
            ("helm-ratpoison-commands-display-to-real" function (:arguments ("display")) nil [6788 6922])
            ("helm-ratpoison-commands-execute" function (:arguments ("candidate")) nil [6924 7032])
            ("helm-source-stumpwm-commands" variable (:default-value (helm-build-in-buffer-source "Stumpwm Commands" :init (quote helm-stumpwm-commands-init) :action (helm-make-actions "Execute the command" (quote helm-stumpwm-commands-execute)) :candidate-number-limit 999999)) nil [7060 7319])
            ("helm-stumpwm-commands-init" function nil nil [7321 7696])
            ("helm-stumpwm-commands-execute" function (:arguments ("candidate")) nil [7698 7798])
            ("helm-world-time" function (:user-visible-flag t) nil [7815 8032])
            ("helm-insert-latex-math" function (:user-visible-flag t) nil [8049 8217])
            ("helm-ratpoison-commands" function (:user-visible-flag t) nil [8234 8443])
            ("helm-stumpwm-commands" function (:user-visible-flag t) nil [8460 8651])
            ("helm-minibuffer-history" function (:user-visible-flag t) nil [8668 10476])
            ("helm-comint-input-ring" function (:user-visible-flag t) nil [10493 10891])
            ("helm-misc" package nil nil [10894 10914]))          
      :file "helm-misc.el"
      :pointmax 11055
      :fsize 11054
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-id-utils.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("helm-grep" include nil nil [815 835])
            ("helm-help" include nil nil [836 856])
            ("helm-id-utils" customgroup (:user-visible-flag t) nil [858 959])
            ("helm-gid-program" variable (:default-value "gid") nil [961 1317])
            ("helm-gid-db-file-name" variable (:default-value "ID") nil [1319 1468])
            ("helm-gid-candidates-process" function nil nil [1470 3099])
            ("helm-gid-filtered-candidate-transformer" function (:arguments ("candidates" "_source")) nil [3101 3338])
            ("helm-gid-source" type
               (:superclasses "helm-source-async"
                :members 
                  ( ("header-name" variable (:default-value "(lambda (name) (concat name \" [\" (helm-attr (quote db-dir)) \"]\"))") nil nil)
                    ("db-dir" variable
                       (:documentation " Location of ID file."
                        :default-value "nil")
                        nil nil)
                    ("candidates-process" variable (:default-value "(function helm-gid-candidates-process)") nil nil)
                    ("filtered-candidate-transformer" variable (:default-value "(function helm-gid-filtered-candidate-transformer)") nil nil)
                    ("candidate-number-limit" variable (:default-value "99999") nil nil)
                    ("action" variable (:default-value "(helm-make-actions \"Find File\" (quote helm-grep-action) \"Find file other frame\" (quote helm-grep-other-frame) \"Save results in grep buffer\" (quote helm-grep-save-results) \"Find file other window\" (quote helm-grep-other-window))") nil nil)
                    ("persistent-action" variable (:default-value "(quote helm-grep-persistent-action)") nil nil)
                    ("history" variable (:default-value "(quote helm-grep-history)") nil nil)
                    ("nohighlight" variable (:default-value "t") nil nil)
                    ("help-message" variable (:default-value "(quote helm-grep-help-message)") nil nil)
                    ("requires-pattern" variable (:default-value "2") nil nil))                  
                :type "class")
                nil [3340 4346])
            ("helm-gid" function (:user-visible-flag t) nil [4363 5154])
            ("helm-id-utils" package nil nil [5156 5180]))          
      :file "helm-id-utils.el"
      :pointmax 5322
      :fsize 5321
      :lastmodtime '(23227 37266 584700 798000)
      :unmatched-syntax nil)
    (semanticdb-table "helm-locate.el"
      :file "helm-locate.el"
      :fsize 20002
      :lastmodtime '(23227 37266 584700 798000))
    (semanticdb-table "helm-tags.el"
      :file "helm-tags.el"
      :fsize 13762
      :lastmodtime '(23227 37266 588700 755000)))
  :file "!home!c0urage!dotfiles!.emacs.d!elpa!helm-2.8.5!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
