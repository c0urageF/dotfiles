;; Object international/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "international/"
  :tables
  (list
    (semanticdb-table "mule.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("mule-version" variable
               (:constant-flag t
                :default-value "6.0 (HANACHIRUSATO)")
                nil [1315 1440])
            ("mule-version-date" variable
               (:constant-flag t
                :default-value "2003.9.1")
                nil [1442 1555])
            ("private-char-area-1-min" variable (:default-value 983040) nil [1637 1677])
            ("private-char-area-1-max" variable (:default-value 1048574) nil [1678 1718])
            ("private-char-area-2-min" variable (:default-value 1048576) nil [1719 1760])
            ("private-char-area-2-max" variable (:default-value 1114110) nil [1761 1802])
            ("emacs-mule-charset-table" variable (:default-value (make-vector 256 nil)) nil [1868 1923])
            ("aset" code nil nil [1924 1964])
            ("convert-define-charset-argument" function (:arguments ("emacs-mule-id" "info-vector")) nil [2225 3603])
            ("define-charset" function (:arguments ("name" "docstring" "props")) nil [3605 10439])
            ("load-with-code-conversion" function (:arguments ("fullname" "file" "noerror" "nomessage")) nil [10442 12941])
            ("charset-info" function (:arguments ("charset")) nil [12943 14477])
            ("charset-id" function (:arguments ("_charset")) nil [14648 14782])
            ("charset-bytes" function (:arguments ("_charset")) nil [14784 14924])
            ("get-charset-property" function (:arguments ("charset" "propname")) nil [14926 15156])
            ("put-charset-property" function (:arguments ("charset" "propname" "value")) nil [15158 15476])
            ("charset-description" function (:arguments ("charset")) nil [15478 15606])
            ("charset-dimension" function (:arguments ("charset")) nil [15608 15725])
            ("charset-chars" function (:arguments ("charset" "dimension")) nil [15727 16095])
            ("charset-iso-final-char" function (:arguments ("charset")) nil [16097 16297])
            ("charset-short-name" function (:arguments ("charset")) nil [16299 16422])
            ("charset-long-name" function (:arguments ("charset")) nil [16424 16544])
            ("charset-list" function nil nil [16546 16673])
            ("define-obsolete-function-alias" code nil nil [16691 16756])
            ("generic-char-p" function (:arguments ("_char")) nil [16758 16897])
            ("make-char-internal" function (:arguments ("charset-id" "code1" "code2")) nil [16899 17132])
            ("ascii-case-table" variable (:default-value (let ((tbl (copy-sequence (standard-case-table))) (up (char-table-extra-slot (standard-case-table) 0))) (if up (set-char-table-extra-slot tbl 0 (copy-sequence up))) (set-char-table-extra-slot tbl 1 nil) (set-char-table-extra-slot tbl 2 nil) tbl)) nil [17341 17747])
            ("coding-system-iso-2022-flags" variable
               (:constant-flag t
                :default-value (quote (long-form ascii-at-eol ascii-at-cntl 7-bit locking-shift single-shift designation revision direction init-at-bol designate-at-bol safe latin-extra composition euc-tw-shift use-roman use-oldjis 8-bit-level-4)))
                nil [17869 20839])
            ("define-coding-system" function (:arguments ("name" "docstring" "props")) nil [20841 32483])
            ("coding-system-doc-string" function (:arguments ("coding-system")) nil [32485 32649])
            ("coding-system-mnemonic" function (:arguments ("coding-system")) nil [32651 32940])
            ("coding-system-type" function (:arguments ("coding-system")) nil [32942 33224])
            ("coding-system-charset-list" function (:arguments ("coding-system")) nil [33226 33536])
            ("coding-system-category" function (:arguments ("coding-system")) nil [33538 33691])
            ("coding-system-get" function (:arguments ("coding-system" "prop")) nil [33693 34309])
            ("coding-system-eol-type-mnemonic" function (:arguments ("coding-system")) nil [34311 34718])
            ("coding-system-lessp" function (:arguments ("x" "y")) nil [34720 35103])
            ("coding-system-equal" function (:arguments ("coding-system-1" "coding-system-2")) nil [35105 35693])
            ("add-to-coding-system-list" function (:arguments ("coding-system")) nil [35695 36307])
            ("coding-system-list" function (:arguments ("base-only")) nil [36309 36957])
            ("char-coding-system-table" variable (:constant-flag t) nil [36959 37074])
            ("make-obsolete-variable" code nil nil [37075 37136])
            ("transform-make-coding-system-args" function (:arguments ("name" "type" "doc-string" "props")) nil [37138 40113])
            ("make-coding-system" function (:arguments ("coding-system" "type" "mnemonic" "doc-string" "flags" "properties" "eol-type")) nil [40115 43465])
            ("merge-coding-systems" function (:arguments ("first" "second")) nil [43467 44146])
            ("autoload-coding-system" function (:arguments ("symbol" "form")) nil [44148 44675])
            ("buffer-file-coding-system-explicit" variable nil nil [45399 45622])
            ("make-variable-buffer-local" code nil nil [45623 45687])
            ("put" code nil nil [45688 45748])
            ("read-buffer-file-coding-system" function nil nil [45750 48574])
            ("set-buffer-file-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "force" "nomodify"))
                nil [48576 50706])
            ("revert-buffer-with-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "force"))
                nil [50708 51635])
            ("set-file-name-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [51637 52227])
            ("default-terminal-coding-system" variable nil nil [52229 52442])
            ("set-terminal-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "terminal"))
                nil [52444 53532])
            ("default-keyboard-coding-system" variable nil nil [53534 53746])
            ("set-keyboard-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system" "terminal"))
                nil [53748 56169])
            ("keyboard-coding-system" variable nil nil [56171 57057])
            ("set-buffer-process-coding-system" function
               (:user-visible-flag t
                :arguments ("decoding" "encoding"))
                nil [57059 57777])
            ("defalias" code nil nil [57779 57847])
            ("set-selection-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [57849 58226])
            ("last-next-selection-coding-system" variable nil nil [58314 58360])
            ("set-next-selection-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [58362 59072])
            ("set-coding-priority" function (:arguments ("arg")) nil [59074 59416])
            ("ctext-non-standard-encodings-alist" variable (:default-value (mapcar (quote purecopy) (quote (("big5-0" big5 2 big5) ("ISO8859-14" iso-8859-14 1 latin-iso8859-14) ("ISO8859-15" iso-8859-15 1 latin-iso8859-15) ("gbk-0" gbk 2 chinese-gbk) ("koi8-r" koi8-r 1 koi8-r) ("microsoft-cp1251" windows-1251 1 windows-1251))))) nil [59436 60761])
            ("ctext-non-standard-encodings" variable nil nil [60763 60991])
            ("ctext-non-standard-encodings-regexp" variable (:default-value (purecopy (string-to-multibyte (concat "\\(%/[0-4][\200-\377][\200-\377]\\([^]+\\)\\)" "\\|" "\\(%G[^]*%@\\)")))) nil [60993 61247])
            ("ctext-post-read-conversion" function (:arguments ("len")) nil [61488 63132])
            ("ctext-standard-encodings" variable (:default-value (quote (ascii latin-jisx0201 katakana-jisx0201 latin-iso8859-1 latin-iso8859-2 latin-iso8859-3 latin-iso8859-4 greek-iso8859-7 arabic-iso8859-6 hebrew-iso8859-8 cyrillic-iso8859-5 latin-iso8859-9 chinese-gb2312 japanese-jisx0208 korean-ksc5601))) nil [63134 63864])
            ("ctext-non-standard-encodings-table" function nil nil [64442 65162])
            ("ctext-pre-write-conversion" function (:arguments ("from" "to")) nil [65164 67749])
            ("auto-coding-alist" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (cdr arg))) (quote (("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . no-conversion-multibyte) ("\\.\\(exe\\|EXE\\)\\'" . no-conversion) ("\\.\\(sx[dmicw]\\|odt\\|tar\\|t[bg]z\\)\\'" . no-conversion) ("\\.\\(gz\\|Z\\|bz\\|bz2\\|xz\\|gpg\\)\\'" . no-conversion) ("\\.\\(jpe?g\\|png\\|gif\\|tiff?\\|p[bpgn]m\\)\\'" . no-conversion) ("\\.pdf\\'" . no-conversion) ("/#[^/]+#\\'" . utf-8-emacs-unix))))) nil [67845 69059])
            ("auto-coding-regexp-alist" variable (:default-value (mapcar (lambda (arg) (cons (purecopy (car arg)) (cdr arg))) (quote (("\\`BABYL OPTIONS:[ 	]*-\\*-[ 	]*rmail[ 	]*-\\*-" . no-conversion) ("\\`\376\377" . utf-16be-with-signature) ("\\`\377\376" . utf-16le-with-signature) ("\\`\357\273\277" . utf-8-with-signature) ("\\`;ELC   " . emacs-mule))))) nil [69061 69895])
            ("auto-coding-regexp-alist-lookup" function (:arguments ("from" "to")) nil [69897 70508])
            ("auto-coding-functions" variable (:default-value (quote (sgml-xml-auto-coding-function sgml-html-meta-auto-coding-function))) nil [70577 71358])
            ("set-auto-coding-for-load" variable nil nil [71360 71551])
            ("auto-coding-alist-lookup" function (:arguments ("filename")) nil [71553 71973])
            ("put" code nil nil [71975 72029])
            ("put" code nil nil [72030 72096])
            ("find-auto-coding" function (:arguments ("filename" "size")) nil [72098 78430])
            ("set-auto-coding" function (:arguments ("filename" "size")) nil [78432 78862])
            ("setq" code nil nil [78864 78912])
            ("after-insert-file-set-coding" function (:arguments ("inserted" "visit")) nil [78914 79781])
            ("find-new-buffer-file-coding-system" function (:arguments ("coding")) nil [79971 82006])
            ("modify-coding-system-alist" function (:arguments ("target-type" "regexp" "coding-system")) nil [82008 84294])
            ("decode-coding-inserted-region" function (:arguments ("from" "to" "filename" "visit" "beg" "end" "replace")) nil [84296 86293])
            ("recode-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "new-coding" "coding"))
                nil [86295 87104])
            ("make-translation-table" function (:arguments ("args")) nil [87106 88593])
            ("make-translation-table-from-vector" function (:arguments ("vec")) nil [88595 89210])
            ("make-translation-table-from-alist" function (:arguments ("alist")) nil [89212 90574])
            ("define-translation-table" function (:arguments ("symbol" "args")) nil [90576 91971])
            ("translate-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "table"))
                nil [91973 93009])
            ("with-category-table" function (:arguments ("table" "body")) nil [93011 93650])
            ("define-translation-hash-table" function (:arguments ("symbol" "table")) nil [93652 94606])
            ("put" code nil nil [94640 94691])
            ("setq" code nil nil [94692 94755])
            ("put" code nil nil [94756 94816])
            ("setq" code nil nil [94817 94904])
            ("sgml-xml-auto-coding-function" function (:arguments ("size")) nil [94943 96425])
            ("sgml-html-meta-auto-coding-function" function (:arguments ("size")) nil [96427 97626])
            ("xml-find-file-coding-system" function (:arguments ("args")) nil [97628 98958])
            ("mule" package nil nil [98964 98979]))          
      :file "mule.el.gz"
      :pointmax 99003
      :fsize 26760
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "mule-cmds.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1252 1269])
            ("dos-codepage" variable nil nil [1272 1293])
            ("widget-value" function (:prototype-flag t) nil [1294 1329])
            ("mac-system-coding-system" variable nil nil [1331 1364])
            ("mule-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "f" (quote set-buffer-file-coding-system)) (define-key map "r" (quote revert-buffer-with-coding-system)) (define-key map "F" (quote set-file-name-coding-system)) (define-key map "t" (quote set-terminal-coding-system)) (define-key map "k" (quote set-keyboard-coding-system)) (define-key map "p" (quote set-buffer-process-coding-system)) (define-key map "x" (quote set-selection-coding-system)) (define-key map "X" (quote set-next-selection-coding-system)) (define-key map "" (quote set-input-method)) (define-key map "c" (quote universal-coding-system-argument)) (define-key map "l" (quote set-language-environment)) map)) nil [1408 2143])
            ("define-key" code nil nil [2195 2236])
            ("describe-language-environment-map" variable (:default-value (let ((map (make-sparse-keymap "Describe Language Environment"))) (bindings--define-key map [Default] (quote (menu-item "Default" describe-specified-language-support))) map)) nil [2238 2463])
            ("setup-language-environment-map" variable (:default-value (let ((map (make-sparse-keymap "Set Language Environment"))) (bindings--define-key map [Default] (quote (menu-item "Default" setup-specified-language-environment))) map)) nil [2465 2683])
            ("set-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap "Set Coding System"))) (bindings--define-key map [set-buffer-process-coding-system] (quote (menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote start-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer"))) (bindings--define-key map [set-next-selection-coding-system] (quote (menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation"))) (bindings--define-key map [set-selection-coding-system] (quote (menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard"))) (bindings--define-key map [separator-3] menu-bar-separator) (bindings--define-key map [set-terminal-coding-system] (quote (menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output"))) (bindings--define-key map [set-keyboard-coding-system] (quote (menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input"))) (bindings--define-key map [separator-2] menu-bar-separator) (bindings--define-key map [set-file-name-coding-system] (quote (menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names"))) (bindings--define-key map [revert-buffer-with-coding-system] (quote (menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system"))) (bindings--define-key map [set-buffer-file-coding-system] (quote (menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved"))) (bindings--define-key map [separator-1] menu-bar-separator) (bindings--define-key map [universal-coding-system-argument] (quote (menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command"))) map)) nil [2685 5005])
            ("mule-menu-keymap" variable (:default-value (let ((map (make-sparse-keymap "Mule (Multilingual Environment)"))) (bindings--define-key map [mule-diag] (quote (menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings"))) (bindings--define-key map [list-character-sets] (quote (menu-item "List Character Sets" list-character-sets :help "Show table of available character sets"))) (bindings--define-key map [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system))) (bindings--define-key map [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :help "Keyboard layout for a specific input method"))) (bindings--define-key map [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map) :help "Show multilingual settings for a specific language"))) (bindings--define-key map [separator-coding-system] menu-bar-separator) (bindings--define-key map [view-hello-file] (quote (menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets"))) (bindings--define-key map [set-various-coding-system] (\` (menu-item "Set Coding Systems" (\, set-coding-system-map) :enable (default-value (quote enable-multibyte-characters))))) (bindings--define-key map [separator-input-method] menu-bar-separator) (bindings--define-key map [describe-input-method] (quote (menu-item "Describe Input Method" describe-input-method))) (bindings--define-key map [set-input-method] (quote (menu-item "Select Input Method..." set-input-method))) (bindings--define-key map [toggle-input-method] (quote (menu-item "Toggle Input Method" toggle-input-method))) (bindings--define-key map [separator-mule] menu-bar-separator) (bindings--define-key map [set-language-environment] (\` (menu-item "Set Language Environment" (\, setup-language-environment-map)))) map)) nil [5007 7198])
            ("define-key" code nil nil [7581 7633])
            ("help-xref-mule-regexp-template" variable
               (:constant-flag t
                :default-value (purecopy (concat "\\(\\<\\(" "\\(coding system\\)\\|" "\\(input method\\)\\|" "\\(character set\\)\\|" "\\(charset\\)" "\\)\\s-+\\)?" "`\\(\\sw\\(\\sw\\|\\s_\\)+\\)'")))
                nil [7876 8176])
            ("coding-system-change-eol-conversion" function (:arguments ("coding-system" "eol-type")) nil [8178 9417])
            ("coding-system-change-text-conversion" function (:arguments ("coding-system" "coding")) nil [9419 9969])
            ("canonicalize-coding-system-name" function (:arguments ("name")) nil [10119 10892])
            ("coding-system-from-name" function (:arguments ("name")) nil [10894 11631])
            ("toggle-enable-multibyte-characters" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11633 12436])
            ("view-hello-file" function (:user-visible-flag t) nil [12438 12711])
            ("universal-coding-system-argument" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [12713 14645])
            ("set-default-coding-systems" function (:arguments ("coding-system")) nil [14647 16507])
            ("prefer-coding-system" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [16509 18405])
            ("sort-coding-systems-predicate" variable nil nil [18407 18659])
            ("sort-coding-systems" function (:arguments ("codings")) nil [18661 21346])
            ("find-coding-systems-region" function (:arguments ("from" "to")) nil [21348 22034])
            ("find-coding-systems-string" function (:arguments ("string")) nil [22036 22359])
            ("find-coding-systems-for-charsets" function (:arguments ("charsets")) nil [22361 23611])
            ("find-multibyte-characters" function (:arguments ("from" "to" "maxcount" "excludes")) nil [23613 25364])
            ("search-unencodable-char" function
               (:user-visible-flag t
                :arguments ("coding-system"))
                nil [25366 26116])
            ("last-coding-system-specified" variable nil nil [26118 26511])
            ("select-safe-coding-system-accept-default-p" variable nil nil [26513 26801])
            ("sanitize-coding-system-list" function (:arguments ("codings")) nil [26803 27971])
            ("select-safe-coding-system-interactively" function (:arguments ("from" "to" "codings" "unsafe" "rejected" "default")) nil [27973 33142])
            ("select-safe-coding-system" function (:arguments ("from" "to" "default-coding-system" "accept-default-p" "file")) nil [33144 42815])
            ("setq" code nil nil [42817 42885])
            ("select-message-coding-system" function nil nil [42887 43981])
            ("language-info-alist" variable nil nil [44013 46328])
            ("get-language-info" function (:arguments ("lang-env" "key")) nil [46330 46770])
            ("set-language-info" function (:arguments ("lang-env" "key" "info")) nil [46772 47920])
            ("set-language-info-internal" function (:arguments ("lang-env" "key" "info")) nil [47922 48770])
            ("set-language-info-alist" function (:arguments ("lang-env" "alist" "parents")) nil [48772 51236])
            ("read-language-name" function (:arguments ("key" "prompt" "default")) nil [51238 51833])
            ("leim" customgroup (:user-visible-flag t) nil [51868 51946])
            ("leim-list-file-name" variable
               (:constant-flag t
                :default-value "leim-list.el")
                nil [51948 52197])
            ("leim-list-header" variable
               (:constant-flag t
                :default-value (format ";;; %s -- list of LEIM (Library of Emacs Input Method) -*-coding: utf-8;-*-
;;
;; This file is automatically generated.
;;
;; This file contains a list of LEIM (Library of Emacs Input Method)
;; methods in the same directory as this file.  Loading this file
;; registers all the input methods in Emacs.
;;
;; Each entry has the form:
;;   (register-input-method
;;    INPUT-METHOD LANGUAGE-NAME ACTIVATE-FUNC
;;    TITLE DESCRIPTION
;;    ARG ...)
;; See the function `register-input-method' for the meanings of the arguments.
;;
;; If this directory is included in `load-path', Emacs automatically
;; loads this file at startup time.

" leim-list-file-name))
                nil [52199 52944])
            ("leim-list-entry-regexp" variable
               (:constant-flag t
                :default-value "^(register-input-method")
                nil [52946 53105])
            ("update-leim-list-functions" variable (:default-value (quote (quail-update-leim-list-file))) nil [53107 53290])
            ("update-leim-list-file" function (:arguments ("dirs")) nil [53292 53456])
            ("current-input-method" variable nil nil [53458 53596])
            ("make-variable-buffer-local" code nil nil [53597 53647])
            ("put" code nil nil [53648 53694])
            ("current-input-method-title" variable nil nil [53696 53800])
            ("make-variable-buffer-local" code nil nil [53801 53857])
            ("put" code nil nil [53858 53910])
            ("define-widget" code nil nil [53912 54206])
            ("default-input-method" variable nil nil [54208 54597])
            ("put" code nil nil [54599 54646])
            ("input-method-history" variable nil nil [54648 54836])
            ("make-variable-buffer-local" code nil nil [54837 54887])
            ("put" code nil nil [54888 54934])
            ("define-obsolete-variable-alias" code nil nil [54936 55063])
            ("deactivate-current-input-method-function" variable nil nil [55064 55430])
            ("make-variable-buffer-local" code nil nil [55431 55501])
            ("put" code nil nil [55502 55568])
            ("describe-current-input-method-function" variable nil nil [55570 55725])
            ("make-variable-buffer-local" code nil nil [55726 55794])
            ("put" code nil nil [55795 55859])
            ("input-method-alist" variable nil nil [55861 56117])
            ("put" code nil nil [56133 56182])
            ("register-input-method" function (:arguments ("input-method" "lang-env" "args")) nil [56184 57906])
            ("read-input-method-name" function (:arguments ("prompt" "default" "inhibit-null")) nil [57908 59080])
            ("activate-input-method" function (:arguments ("input-method")) nil [59082 60347])
            ("deactivate-input-method" function nil nil [60349 61079])
            ("define-obsolete-function-alias" code nil nil [61081 61174])
            ("set-input-method" function
               (:user-visible-flag t
                :arguments ("input-method" "interactive"))
                nil [61176 62245])
            ("toggle-input-method-active" variable nil nil [62247 62328])
            ("toggle-input-method" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [62330 64054])
            ("help-buffer" function (:prototype-flag t) nil [64056 64091])
            ("describe-input-method" function
               (:user-visible-flag t
                :arguments ("input-method"))
                nil [64093 65203])
            ("describe-current-input-method" function nil nil [65205 65687])
            ("read-multilingual-string" function (:arguments ("prompt" "initial-input" "input-method")) nil [65689 66613])
            ("input-method-verbose-flag" variable (:default-value (quote default)) nil [66722 67651])
            ("input-method-highlight-flag" variable (:default-value t) nil [67653 68060])
            ("input-method-activate-hook" variable nil nil [68062 68275])
            ("define-obsolete-variable-alias" code nil nil [68277 68380])
            ("input-method-deactivate-hook" variable nil nil [68382 68625])
            ("input-method-after-insert-chunk-hook" variable nil nil [68627 68782])
            ("input-method-exit-on-first-char" variable nil nil [68784 69161])
            ("input-method-use-echo-area" variable nil nil [69163 69536])
            ("input-method-exit-on-invalid-key" variable nil nil [69538 69934])
            ("set-language-environment-hook" variable nil nil [69938 70299])
            ("exit-language-environment-hook" variable nil nil [70301 70665])
            ("put" code nil nil [70667 70729])
            ("setup-specified-language-environment" function (:user-visible-flag t) nil [70731 71209])
            ("current-language-environment" variable (:default-value "English") nil [71211 72101])
            ("reset-language-environment" function (:user-visible-flag t) nil [72103 74897])
            ("reset-language-environment" code nil nil [74899 74927])
            ("set-display-table-and-terminal-coding-system" function (:arguments ("language-name" "coding-system" "display")) nil [74929 75712])
            ("set-language-environment" function
               (:user-visible-flag t
                :arguments ("language-name"))
                nil [75714 77963])
            ("define-widget" code nil nil [77965 78444])
            ("language-info-custom-alist" variable nil nil [78446 80249])
            ("declare-function" code nil nil [80251 80315])
            ("declare-function" code nil nil [80316 80381])
            ("standard-display-european-internal" function nil nil [80383 81746])
            ("set-language-environment-coding-systems" function (:arguments ("language-name")) nil [81748 83230])
            ("set-language-environment-input-method" function (:arguments ("language-name")) nil [83232 83648])
            ("set-language-environment-nonascii-translation" function (:arguments ("language-name")) nil [83650 84405])
            ("set-language-environment-charset" function (:arguments ("language-name")) nil [84407 84980])
            ("set-language-environment-unibyte" function (:arguments ("language-name")) nil [84982 85176])
            ("princ-list" function (:arguments ("args")) nil [85178 85364])
            ("put" code nil nil [85366 85427])
            ("describe-specified-language-support" function (:user-visible-flag t) nil [85716 86183])
            ("describe-language-environment" function
               (:user-visible-flag t
                :arguments ("language-name"))
                nil [86185 89520])
            ("locale-translation-file-name" variable nil nil [89537 89654])
            ("locale-language-names" variable
               (:constant-flag t
                :default-value (purecopy (quote (("aa_DJ" . "Latin-1") ("aa" . "UTF-8") ("af" . "Latin-1") ("am" "Ethiopic" utf-8) ("an" . "Latin-9") ("ar" . "Arabic") ("az" . "UTF-8") ("be" "Belarusian" cp1251) ("bg" "Bulgarian" cp1251) ("bn" . "UTF-8") ("bo" . "Tibetan") ("br" . "Latin-1") ("bs" . "Latin-2") ("byn" . "UTF-8") ("ca" . "Latin-1") ("cs" "Czech" iso-8859-2) ("cy" "Welsh" iso-8859-14) ("da" . "Latin-1") ("de" "German" iso-8859-1) ("el" "Greek" iso-8859-7) ("en_IN" "English" utf-8) ("en" "English" iso-8859-1) ("eo" . "Esperanto") ("es" "Spanish" iso-8859-1) ("et" . "Latin-1") ("eu" . "Latin-1") ("fa" . "UTF-8") ("fi" . "Latin-1") ("fj" . "Latin-1") ("fo" . "Latin-1") ("fr" "French" iso-8859-1) ("fy" . "Latin-1") ("ga" . "Latin-1") ("gd" . "Latin-9") ("gez" "Ethiopic" utf-8) ("gl" . "Latin-1") ("gu" . "UTF-8") ("gv" . "Latin-1") ("he" "Hebrew" iso-8859-8) ("hi" "Devanagari" utf-8) ("hr" "Croatian" iso-8859-2) ("hu" . "Latin-2") ("id" . "Latin-1") ("is" . "Latin-1") ("it" "Italian" iso-8859-1) ("iw" "Hebrew" iso-8859-8) ("ja" "Japanese" euc-jp) ("ka" "Georgian" georgian-ps) ("kl" . "Latin-1") ("kn" "Kannada" utf-8) ("ko" "Korean" euc-kr) ("kw" . "Latin-1") ("la" . "Latin-1") ("lb" . "Latin-1") ("lg" . "Laint-6") ("lo" "Lao" utf-8) ("lt" "Lithuanian" iso-8859-13) ("lv" . "Latvian") ("mi" . "Latin-7") ("mk" "Cyrillic-ISO" iso-8859-5) ("ml" "Malayalam" utf-8) ("mn" . "UTF-8") ("mr" "Devanagari" utf-8) ("ms" . "Latin-1") ("mt" . "Latin-3") ("nb" . "Latin-1") ("ne" "Devanagari" utf-8) ("nl" "Dutch" iso-8859-1) ("no" . "Latin-1") ("oc" . "Latin-1") ("om_ET" . "UTF-8") ("om" . "Latin-1") ("pa" . "UTF-8") ("pl" . "Latin-2") ("pt" . "Latin-1") ("rm" . "Latin-1") ("ro" "Romanian" iso-8859-2) ("ru_RU" "Russian" iso-8859-5) ("ru_UA" "Russian" koi8-u) ("sa" . "Devanagari") ("se" . "UTF-8") ("sh" . "Latin-2") ("sid" . "UTF-8") ("sk" "Slovak" iso-8859-2) ("sl" "Slovenian" iso-8859-2) ("so_ET" "UTF-8") ("so" "Latin-1") ("sq" . "Latin-1") ("sr" . "Latin-2") ("st" . "Latin-1") ("sv" "Swedish" iso-8859-1) ("sw" . "Latin-1") ("ta" "Tamil" utf-8) ("te" . "UTF-8") ("tg" "Tajik" koi8-t) ("th" "Thai" tis-620) ("ti" "Ethiopic" utf-8) ("tig_ER" . "UTF-8") ("tl" . "Latin-1") ("tr" "Turkish" iso-8859-9) ("tt" . "UTF-8") ("uk" "Ukrainian" koi8-u) ("ur" . "UTF-8") ("uz_UZ@cyrillic" . "UTF-8") ("uz" . "Latin-1") ("vi" "Vietnamese" utf-8) ("wa" . "Latin-1") ("xh" . "Latin-1") ("yi" . "Windows-1255") ("zh_HK" . "Chinese-Big5") ("zh_TW" . "Chinese-Big5") ("zh_CN.GB2312" "Chinese-GB") ("zh_CN.GBK" "Chinese-GBK") ("zh_CN.GB18030" "Chinese-GB18030") ("zh_CN.UTF-8" . "Chinese-GBK") ("zh_CN" . "Chinese-GB") ("zh" . "Chinese-GB") ("zu" . "Latin-1") ("c$" . "ASCII") ("posix$" . "ASCII") ("ipa$" . "IPA") ("cz" . "Czech") ("ee" . "Latin-4") ("iw" . "Hebrew") ("sp" . "Cyrillic-ISO") ("su" . "Latin-1") ("jp" . "Japanese") ("chs" . "Chinese-GBK") ("cht" . "Chinese-BIG5") ("gbz" . "UTF-8") ("div" . "UTF-8") ("wee" . "Latin-2") ("wen" . "Latin-2")))))
                nil [89846 97425])
            ("locale-charset-language-names" variable
               (:constant-flag t
                :default-value (purecopy (quote ((".*8859[-_]?1\\>" . "Latin-1") (".*8859[-_]?2\\>" . "Latin-2") (".*8859[-_]?3\\>" . "Latin-3") (".*8859[-_]?4\\>" . "Latin-4") (".*8859[-_]?9\\>" . "Latin-5") (".*8859[-_]?14\\>" . "Latin-8") (".*8859[-_]?15\\>" . "Latin-9") (".*utf\\(?:-?8\\)?\\>" . "UTF-8") (".*@euro\\>" . "Latin-9")))))
                nil [97427 98227])
            ("locale-preferred-coding-systems" variable
               (:constant-flag t
                :default-value (purecopy (quote ((".*8859[-_]?1\\>" . iso-8859-1) (".*8859[-_]?2\\>" . iso-8859-2) (".*8859[-_]?3\\>" . iso-8859-3) (".*8859[-_]?4\\>" . iso-8859-4) (".*8859[-_]?9\\>" . iso-8859-9) (".*8859[-_]?14\\>" . iso-8859-14) (".*8859[-_]?15\\>" . iso-8859-15) (".*utf\\(?:-?8\\)?" . utf-8) (".*@euro" . iso-8859-15) ("koi8-?r" . koi8-r) ("koi8-?u" . koi8-u) ("tcvn" . tcvn) ("big5[-_]?hkscs" . big5-hkscs) ("big5" . big5) ("euc-?tw" . euc-tw) ("euc-?cn" . euc-cn) ("gb2312" . gb2312) ("gbk" . gbk) ("gb18030" . gb18030) ("ja.*[._]euc" . japanese-iso-8bit) ("ja.*[._]jis7" . iso-2022-jp) ("ja.*[._]pck" . japanese-shift-jis) ("ja.*[._]sjis" . japanese-shift-jis) ("jpn" . japanese-shift-jis)))))
                nil [98229 99505])
            ("locale-name-match" function (:arguments ("key" "alist")) nil [99507 99941])
            ("locale-charset-match-p" function (:arguments ("charset1" "charset2")) nil [99943 100394])
            ("locale-charset-alist" variable nil nil [100396 100532])
            ("locale-charset-to-coding-system" function (:arguments ("charset")) nil [100534 101322])
            ("locale-translate" function (:arguments ("locale")) nil [101491 102002])
            ("set-locale-environment" function
               (:user-visible-flag t
                :arguments ("locale-name" "frame"))
                nil [102004 110204])
            ("put" code nil nil [110231 110288])
            ("define-char-code-property" function (:arguments ("name" "table" "docstring")) nil [110290 112053])
            ("char-code-property-table" variable (:default-value (make-char-table (quote char-code-property-table))) nil [112055 112361])
            ("get-char-code-property" function (:arguments ("char" "propname")) nil [112363 112771])
            ("put-char-code-property" function (:arguments ("char" "propname" "value")) nil [112773 113357])
            ("char-code-property-description" function (:arguments ("prop" "value")) nil [113359 113713])
            ("iso-2022-control-alist" variable
               (:constant-flag t
                :default-value (quote ((27 . "ESC") (14 . "SO") (15 . "SI") (142 . "SS2") (143 . "SS3") (155 . "CSI"))))
                nil [113830 113982])
            ("encoded-string-description" function (:arguments ("str" "coding-system")) nil [113984 114472])
            ("encode-coding-char" function (:arguments ("char" "coding-system" "charset")) nil [114474 115939])
            ("define-minor-mode" code nil nil [116039 116158])
            ("make-obsolete" code nil nil [116226 116293])
            ("define-minor-mode" code nil nil [116295 116414])
            ("make-obsolete" code nil nil [116482 116549])
            ("nonascii-insert-offset" variable nil nil [116551 116584])
            ("make-obsolete-variable" code nil nil [116585 116657])
            ("nonascii-translation-table" variable nil nil [116658 116697])
            ("make-obsolete-variable" code nil nil [116698 116774])
            ("ucs-names" variable nil nil [116776 116849])
            ("ucs-names" function nil nil [116851 118405])
            ("read-char-by-name" function (:arguments ("prompt")) nil [118407 119684])
            ("define-obsolete-function-alias" code nil nil [119686 119750])
            ("define-key" code nil nil [119751 119792]))          
      :file "mule-cmds.el.gz"
      :pointmax 119821
      :fsize 33247
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 1269 . 1270) (symbol 1234 . 1251) (open-paren 1233 . 1234)))
    (semanticdb-table "fontset.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1272 4294])
            ("font-encoding-charset-alist" variable nil nil [4296 4332])
            ("setq" code nil nil [4334 5043])
            ("setq" code nil nil [5045 7072])
            ("otf-script-alist" variable nil nil [7074 7099])
            ("setq" code nil nil [7233 9293])
            ("declare-function" code nil nil [10205 10263])
            ("declare-function" code nil nil [10264 10359])
            ("build-default-fontset-data" function nil nil [10847 12831])
            ("setup-default-fontset" function nil nil [12835 22626])
            ("create-default-fontset" function nil nil [22628 22927])
            ("set-font-encoding" function (:arguments ("pattern" "charset")) nil [28279 28556])
            ("x-pixel-size-width-font-regexp" variable nil nil [28558 28597])
            ("vertical-centering-font-regexp" variable nil nil [28598 28637])
            ("setq" code nil nil [28695 28813])
            ("setq" code nil nil [28858 28987])
            ("put" code nil nil [28988 29084])
            ("setq" code nil nil [29146 29221])
            ("x-font-name-charset-alist" variable nil nil [29223 29338])
            ("xlfd-regexp-family-subnum" variable (:constant-flag t) nil [29447 29485])
            ("xlfd-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [29508 29546])
            ("xlfd-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [29562 29599])
            ("xlfd-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [29609 29647])
            ("xlfd-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [29665 29704])
            ("xlfd-regexp-pixelsize-subnum" variable
               (:constant-flag t
                :default-value 5)
                nil [29723 29764])
            ("xlfd-regexp-pointsize-subnum" variable
               (:constant-flag t
                :default-value 6)
                nil [29778 29819])
            ("xlfd-regexp-resx-subnum" variable
               (:constant-flag t
                :default-value 7)
                nil [29833 29869])
            ("xlfd-regexp-resy-subnum" variable
               (:constant-flag t
                :default-value 8)
                nil [29886 29922])
            ("xlfd-regexp-spacing-subnum" variable
               (:constant-flag t
                :default-value 8)
                nil [29939 29978])
            ("xlfd-regexp-avgwidth-subnum" variable
               (:constant-flag t
                :default-value 10)
                nil [29990 30031])
            ("xlfd-regexp-registry-subnum" variable
               (:constant-flag t
                :default-value 11)
                nil [30048 30089])
            ("xlfd-tight-regexp" variable
               (:constant-flag t
                :default-value "^-\\([^-]*-[^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*-[^-]*\\)$")
                nil [30309 30506])
            ("xlfd-style-regexp" variable
               (:constant-flag t
                :default-value "^-\\([^-]*-[^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-\\([^-]*\\)-.*-\\([^-]*-[^-]*\\)$")
                nil [30753 30879])
            ("xlfd-regexp-numeric-subnums" variable
               (:constant-flag t
                :default-value (list xlfd-regexp-pixelsize-subnum xlfd-regexp-pointsize-subnum xlfd-regexp-resx-subnum xlfd-regexp-resy-subnum xlfd-regexp-avgwidth-subnum))
                nil [30940 31145])
            ("x-decompose-font-name" function (:arguments ("pattern")) nil [31147 31816])
            ("x-compose-font-name" function (:arguments ("fields" "_reduce")) nil [31818 32160])
            ("x-must-resolve-font-name" function (:arguments ("xlfd-fields")) nil [32163 32957])
            ("x-complement-fontset-spec" function (:arguments ("default-spec" "fontlist")) nil [32960 33630])
            ("fontset-name-p" function (:arguments ("fontset")) nil [33632 33975])
            ("declare-function" code nil nil [33977 34023])
            ("generate-fontset-menu" function nil nil [34025 34434])
            ("declare-function" code nil nil [34436 34508])
            ("fontset-plain-name" function (:arguments ("fontset")) nil [34510 36028])
            ("charset-script-alist" variable (:default-value (quote ((ascii . latin) (latin-iso8859-1 . latin) (latin-iso8859-2 . latin) (latin-iso8859-3 . latin) (latin-iso8859-4 . latin) (latin-iso8859-9 . latin) (latin-iso8859-10 . latin) (latin-iso8859-13 . latin) (latin-iso8859-14 . latin) (latin-iso8859-15 . latin) (latin-iso8859-16 . latin) (latin-jisx0201 . latin) (thai-tis620 . thai) (cyrillic-iso8859-5 . cyrillic) (arabic-iso8859-6 . arabic) (greek-iso8859-7 . latin) (hebrew-iso8859-8 . latin) (katakana-jisx0201 . kana) (chinese-gb2312 . han) (chinese-gbk . han) (gb18030-2-byte . han) (gb18030-4-byte-bmp . han) (gb18030-4-byte-ext-1 . han) (gb18030-4-byte-ext-2 . han) (gb18030-4-byte-smp . han) (chinese-big5-1 . han) (chinese-big5-2 . han) (chinese-cns11643-1 . han) (chinese-cns11643-2 . han) (chinese-cns11643-3 . han) (chinese-cns11643-4 . han) (chinese-cns11643-5 . han) (chinese-cns11643-6 . han) (chinese-cns11643-7 . han) (japanese-jisx0208 . han) (japanese-jisx0208-1978 . han) (japanese-jisx0212 . han) (japanese-jisx0213-1 . han) (japanese-jisx0213-2 . han) (korean-ksc5601 . hangul) (chinese-sisheng . bopomofo) (vietnamese-viscii-lower . latin) (vietnamese-viscii-upper . latin) (arabic-digit . arabic) (arabic-1-column . arabic) (arabic-2-column . arabic) (indian-is13194 . devanagari) (indian-glyph . devanagari) (indian-1-column . devanagari) (indian-2-column . devanagari) (tibetan-1-column . tibetan)))) nil [36030 37801])
            ("create-fontset-from-fontset-spec" function (:arguments ("fontset-spec" "_style-variant" "_noerror")) nil [37803 39883])
            ("create-fontset-from-ascii-font" function (:arguments ("font" "resolved-font" "fontset-name")) nil [39885 41079])
            ("standard-fontset-spec" variable (:default-value (purecopy "-*-fixed-medium-r-normal-*-16-*-*-*-*-*-fontset-standard")) nil [41308 41653])
            ("declare-function" code nil nil [41859 41953])
            ("create-fontset-from-x-resource" function nil nil [41955 42367])
            ("fontset" package nil nil [42372 42390]))          
      :file "fontset.el.gz"
      :pointmax 42417
      :fsize 12104
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 12832 . 12833) (symbol 10362 . 10379) (open-paren 10361 . 10362)))
    (semanticdb-table "mule-util.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("string-to-list" function (:arguments ("string")) nil [1340 1439])
            ("string-to-vector" function (:arguments ("string")) nil [1456 1556])
            ("store-substring" function (:arguments ("string" "idx" "obj")) nil [1573 1879])
            ("truncate-string-to-width" function (:arguments ("str" "end-column" "start-column" "padding" "ellipsis")) nil [1896 4605])
            ("nested-alist-p" function (:arguments ("obj")) nil [4716 5173])
            ("set-nested-alist" function (:arguments ("keyseq" "entry" "alist" "len" "branches")) nil [5190 6159])
            ("lookup-nested-alist" function (:arguments ("keyseq" "alist" "len" "start" "nil-for-too-long")) nil [6176 7356])
            ("coding-system-post-read-conversion" function (:arguments ("coding-system")) nil [7412 7601])
            ("coding-system-pre-write-conversion" function (:arguments ("coding-system")) nil [7618 7807])
            ("coding-system-translation-table-for-decode" function (:arguments ("coding-system")) nil [7824 8029])
            ("coding-system-translation-table-for-encode" function (:arguments ("coding-system")) nil [8046 8251])
            ("with-coding-priority" function (:arguments ("coding-systems" "body")) nil [8268 8855])
            ("put" code nil nil [8922 8969])
            ("detect-coding-with-priority" function (:arguments ("from" "to" "priority-list")) nil [8986 9376])
            ("detect-coding-with-language-environment" function (:arguments ("from" "to" "lang-env")) nil [9393 9815])
            ("declare-function" code nil nil [9817 9890])
            ("char-displayable-p" function (:arguments ("char")) nil [9907 11556])
            ("mule-util" package nil nil [11559 11579]))          
      :file "mule-util.el.gz"
      :pointmax 11654
      :fsize 3976
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!24.5!lisp!international!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
