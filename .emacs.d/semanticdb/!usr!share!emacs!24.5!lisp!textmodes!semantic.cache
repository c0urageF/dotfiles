;; Object textmodes/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "textmodes/"
  :tables
  (list
    (semanticdb-table "fill.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("fill" customgroup (:user-visible-flag t) nil [1014 1125])
            ("fill-individual-varying-indent" variable nil nil [1127 1538])
            ("colon-double-space" variable nil nil [1540 1667])
            ("put" code nil nil [1668 1724])
            ("fill-paragraph-function" variable nil nil [1726 2136])
            ("fill-paragraph-handle-comment" variable (:default-value t) nil [2138 2253])
            ("enable-kinsoku" variable (:default-value t) nil [2255 2568])
            ("set-fill-prefix" function (:user-visible-flag t) nil [2570 3157])
            ("adaptive-fill-mode" variable (:default-value t) nil [3159 3292])
            ("adaptive-fill-regexp" variable (:default-value (purecopy "[ 	]*\\([-–!|#%;>*·•‣⁃◦]+[ 	]*\\)*")) nil [3294 4014])
            ("adaptive-fill-first-line-regexp" variable (:default-value (purecopy "\\`[ 	]*\\'")) nil [4016 4559])
            ("adaptive-fill-function" variable nil nil [4561 4790])
            ("fill-indent-according-to-mode" variable nil nil [4792 4946])
            ("current-fill-column" function nil nil [4948 5984])
            ("canonically-space-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [5986 8237])
            ("fill-common-string-prefix" function (:arguments ("s1" "s2")) nil [8239 8516])
            ("fill-match-adaptive-prefix" function nil nil [8518 8904])
            ("fill-context-prefix" function (:arguments ("from" "to" "first-line-regexp")) nil [8906 12223])
            ("fill-single-word-nobreak-p" function nil nil [12225 12752])
            ("fill-french-nobreak-p" function nil nil [12754 13451])
            ("fill-single-char-nobreak-p" function nil nil [13453 13864])
            ("fill-nobreak-predicate" variable nil nil [13866 14247])
            ("fill-nobreak-invisible" variable nil nil [14249 14394])
            ("fill-nobreak-p" function nil nil [14396 15794])
            ("fill-find-break-point-function-table" variable (:default-value (make-char-table nil)) nil [15796 15928])
            ("fill-nospace-between-words-table" variable (:default-value (make-char-table nil)) nil [15930 16058])
            ("progn" code nil nil [16060 16743])
            ("fill-find-break-point" function (:arguments ("limit")) nil [16745 17432])
            ("fill-delete-prefix" function (:arguments ("from" "to" "prefix")) nil [17434 18355])
            ("add-to-list" code nil nil [18625 18689])
            ("fill-delete-newlines" function (:arguments ("from" "to" "justify" "nosqueeze" "squeeze-after")) nil [18691 21004])
            ("fill-move-to-break-point" function (:arguments ("linebeg")) nil [21006 23371])
            ("fill-text-properties-at" function (:arguments ("pos")) nil [23442 23688])
            ("fill-newline" function nil nil [23690 25006])
            ("fill-indent-to-left-margin" function nil nil [25008 25233])
            ("fill-region-as-paragraph" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify" "nosqueeze" "squeeze-after"))
                nil [25235 30406])
            ("skip-line-prefix" function (:arguments ("prefix")) nil [30408 30735])
            ("fill-minibuffer-function" function (:arguments ("arg")) nil [30737 30941])
            ("fill-forward-paragraph-function" variable (:default-value (quote forward-paragraph)) nil [30943 31233])
            ("fill-forward-paragraph" function (:arguments ("arg")) nil [31235 31319])
            ("fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify" "region"))
                nil [31321 35111])
            ("declare-function" code nil nil [35113 35193])
            ("declare-function" code nil nil [35194 35267])
            ("fill-comment-paragraph" function (:arguments ("justify")) nil [35270 40697])
            ("fill-region" function
               (:user-visible-flag t
                :arguments ("from" "to" "justify" "nosqueeze" "to-eop"))
                nil [40699 42875])
            ("default-justification" variable (:default-value (quote left)) nil [42879 43310])
            ("make-variable-buffer-local" code nil nil [43311 43362])
            ("current-justification" function nil nil [43364 43913])
            ("set-justification" function
               (:user-visible-flag t
                :arguments ("begin" "end" "style" "whole-par"))
                nil [43915 45690])
            ("set-justification-none" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [45692 46000])
            ("set-justification-left" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [46002 46445])
            ("set-justification-right" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [46447 46818])
            ("set-justification-full" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [46820 47193])
            ("set-justification-center" function
               (:user-visible-flag t
                :arguments ("b" "e"))
                nil [47195 47491])
            ("justify-current-line" function
               (:user-visible-flag t
                :arguments ("how" "eop" "nosqueeze"))
                nil [48306 53116])
            ("unjustify-current-line" function nil nil [53118 54152])
            ("unjustify-region" function (:arguments ("begin" "end")) nil [54154 54749])
            ("fill-nonuniform-paragraphs" function
               (:user-visible-flag t
                :arguments ("min" "max" "justifyp" "citation-regexp"))
                nil [54753 55774])
            ("fill-individual-paragraphs" function
               (:user-visible-flag t
                :arguments ("min" "max" "justify" "citation-regexp"))
                nil [55776 59844])
            ("fill-individual-paragraphs-prefix" function (:arguments ("citation-regexp")) nil [59846 61235])
            ("fill-individual-paragraphs-citation" function (:arguments ("string" "citation-regexp")) nil [61237 61419]))          
      :file "fill.el.gz"
      :pointmax 61443
      :fsize 17324
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "paragraphs.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("paragraphs" customgroup (:user-visible-flag t) nil [1006 1085])
            ("put" code nil nil [1087 1130])
            ("define-minor-mode" code nil nil [1131 3125])
            ("paragraph-start" variable (:default-value "\\|[ 	]*$") nil [3127 3927])
            ("put" code nil nil [3928 3980])
            ("paragraph-separate" variable (:default-value "[ 	]*$") nil [4315 4785])
            ("put" code nil nil [4786 4841])
            ("sentence-end-double-space" variable (:default-value t) nil [4843 5273])
            ("put" code nil nil [5274 5337])
            ("sentence-end-without-period" variable nil nil [5339 5757])
            ("put" code nil nil [5758 5823])
            ("sentence-end-without-space" variable (:default-value "。．？！") nil [5825 6183])
            ("put" code nil nil [6184 6247])
            ("sentence-end" variable nil nil [6249 6681])
            ("put" code nil nil [6682 6740])
            ("sentence-end-base" variable (:default-value "[.?!][]\"'”)}]*") nil [6742 6924])
            ("put" code nil nil [6925 6979])
            ("sentence-end" function nil nil [6981 7998])
            ("page-delimiter" variable (:default-value "^") nil [8000 8130])
            ("put" code nil nil [8131 8182])
            ("paragraph-ignore-fill-prefix" variable nil nil [8184 8417])
            ("put" code nil nil [8418 8484])
            ("forward-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8486 13709])
            ("backward-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [13711 14275])
            ("mark-paragraph" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [14277 15304])
            ("kill-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15306 15569])
            ("backward-kill-paragraph" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15571 15839])
            ("transpose-paragraphs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [15841 16312])
            ("start-of-paragraph-text" function nil nil [16314 16836])
            ("end-of-paragraph-text" function nil nil [16838 17097])
            ("forward-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [17099 18515])
            ("repunctuate-sentences" function (:user-visible-flag t) nil [18517 18766])
            ("backward-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18769 18997])
            ("kill-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [18999 19235])
            ("backward-kill-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19237 19491])
            ("mark-end-of-sentence" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19493 19870])
            ("transpose-sentences" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19872 20335]))          
      :file "paragraphs.el.gz"
      :pointmax 20411
      :fsize 6074
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax nil))
  :file "!usr!share!emacs!24.5!lisp!textmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
