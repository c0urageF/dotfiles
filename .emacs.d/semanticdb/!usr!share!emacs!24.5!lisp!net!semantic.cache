;; Object net/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "net/"
  :tables
  (list
    (semanticdb-table "secrets.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [5842 5859])
            ("dbus-debug" variable nil nil [5862 5881])
            ("dbus" include nil nil [5883 5898])
            ("tree-widget-set-theme" function (:prototype-flag t) nil [5900 5947])
            ("widget-create-child-and-convert" function (:prototype-flag t) nil [5948 6002])
            ("widget-default-value-set" function (:prototype-flag t) nil [6003 6050])
            ("widget-field-end" function (:prototype-flag t) nil [6051 6090])
            ("widget-member" function (:prototype-flag t) nil [6091 6127])
            ("tree-widget-after-toggle-functions" variable nil nil [6128 6171])
            ("secrets-enabled" variable nil nil [6173 6264])
            ("secrets-debug" variable (:default-value t) nil [6266 6315])
            ("secrets-service" variable
               (:constant-flag t
                :default-value "org.freedesktop.secrets")
                nil [6317 6420])
            ("secrets-path" variable
               (:constant-flag t
                :default-value "/org/freedesktop/secrets")
                nil [6422 6535])
            ("secrets-empty-path" variable
               (:constant-flag t
                :default-value "/")
                nil [6537 6626])
            ("secrets-empty-path" function (:arguments ("path")) nil [6628 6806])
            ("secrets-interface-service" variable
               (:constant-flag t
                :default-value "org.freedesktop.Secret.Service")
                nil [6808 6936])
            ("secrets-interface-collection" variable
               (:constant-flag t
                :default-value "org.freedesktop.Secret.Collection")
                nil [9044 9165])
            ("secrets-session-collection-path" variable
               (:constant-flag t
                :default-value "/org/freedesktop/secrets/collection/session")
                nil [10393 10539])
            ("secrets-interface-prompt" variable
               (:constant-flag t
                :default-value "org.freedesktop.Secret.Prompt")
                nil [10541 10681])
            ("secrets-interface-item" variable
               (:constant-flag t
                :default-value "org.freedesktop.Secret.Item")
                nil [11014 11123])
            ("secrets-interface-item-type-generic" variable
               (:constant-flag t
                :default-value "org.freedesktop.Secret.Generic")
                nil [12028 12147])
            ("secrets-struct-secret-content-type" variable
               (:constant-flag t
                :default-value (ignore-errors (let ((content-type "text/plain") (path (cadr (dbus-call-method :session secrets-service secrets-path secrets-interface-service "OpenSession" "plain" (quote (:variant ""))))) result) (setq result (dbus-call-method :session secrets-service secrets-session-collection-path secrets-interface-collection "CreateItem" (\` (:array (:dict-entry (\, (concat secrets-interface-item ".Label")) (:variant "dummy")) (:dict-entry (\, (concat secrets-interface-item ".Type")) (:variant (\, secrets-interface-item-type-generic))))) (\` (:struct :object-path (\, path) (:array :signature "y") (\, (dbus-string-to-byte-array " ")) :string (\, content-type))) nil)) (dbus-call-method :session secrets-service (car result) secrets-interface-item "Delete") (\` ((\, content-type))))))
                nil [12352 13552])
            ("secrets-interface-session" variable
               (:constant-flag t
                :default-value "org.freedesktop.Secret.Session")
                nil [13554 13696])
            ("secrets-session-path" variable (:default-value secrets-empty-path) nil [13819 13989])
            ("secrets-close-session" function nil nil [13991 14254])
            ("secrets-open-session" function (:arguments ("reopen")) nil [14256 14914])
            ("secrets-prompt-signal" variable nil nil [14930 15036])
            ("secrets-prompt" function (:arguments ("prompt")) nil [15038 15847])
            ("secrets-prompt-handler" function (:arguments ("args")) nil [15849 16258])
            ("secrets-collection-paths" variable nil nil [16278 16371])
            ("secrets-collection-handler" function (:arguments ("args")) nil [16373 16796])
            ("secrets-get-collections" function nil nil [16798 17070])
            ("secrets-get-collection-properties" function (:arguments ("collection-path")) nil [17072 17360])
            ("secrets-get-collection-property" function (:arguments ("collection-path" "property")) nil [17362 17693])
            ("secrets-list-collections" function nil nil [17695 17989])
            ("secrets-collection-path" function (:arguments ("collection")) nil [17991 18865])
            ("secrets-create-collection" function (:arguments ("collection" "alias")) nil [18867 19677])
            ("secrets-get-alias" function (:arguments ("alias")) nil [19679 19988])
            ("secrets-set-alias" function (:arguments ("collection" "alias")) nil [19990 20423])
            ("secrets-delete-alias" function (:arguments ("alias")) nil [20425 20651])
            ("secrets-unlock-collection" function (:arguments ("collection")) nil [20653 21107])
            ("secrets-delete-collection" function (:arguments ("collection")) nil [21109 21442])
            ("secrets-get-items" function (:arguments ("collection-path")) nil [21456 21757])
            ("secrets-get-item-properties" function (:arguments ("item-path")) nil [21759 22005])
            ("secrets-get-item-property" function (:arguments ("item-path" "property")) nil [22007 22296])
            ("secrets-list-items" function (:arguments ("collection")) nil [22298 22640])
            ("secrets-search-items" function (:arguments ("collection" "attributes")) nil [22642 24111])
            ("secrets-create-item" function (:arguments ("collection" "item" "password" "attributes")) nil [24113 26211])
            ("secrets-item-path" function (:arguments ("collection" "item")) nil [26213 26618])
            ("secrets-get-secret" function (:arguments ("collection" "item")) nil [26620 27042])
            ("secrets-get-attributes" function (:arguments ("collection" "item")) nil [27044 27599])
            ("secrets-get-attribute" function (:arguments ("collection" "item" "attribute")) nil [27601 27873])
            ("secrets-delete-item" function (:arguments ("collection" "item")) nil [27875 28171])
            ("define-derived-mode" code nil nil [28193 28906])
            ("put" code nil nil [28959 28990])
            ("with-temp-buffer" code nil nil [29117 29150])
            ("secrets-show-secrets" function (:user-visible-flag t) nil [29334 29977])
            ("secrets-show-collections" function nil nil [29979 30394])
            ("secrets-expand-collection" function (:arguments ("widget")) nil [30396 30733])
            ("secrets-expand-item" function (:arguments ("widget")) nil [30735 32071])
            ("secrets-tree-widget-after-toggle-function" function (:arguments ("widget" "ignore")) nil [32073 32508])
            ("secrets-tree-widget-show-password" function (:arguments ("widget" "ignore")) nil [32510 32788])
            ("when" code nil nil [32811 33797])
            ("secrets" package nil nil [33799 33817]))          
      :file "secrets.el.gz"
      :pointmax 34153
      :fsize 8627
      :lastmodtime '(21885 55889 0 0)
      :unmatched-syntax '((close-paren 5859 . 5860) (symbol 5824 . 5841) (open-paren 5823 . 5824))))
  :file "!usr!share!emacs!24.5!lisp!net!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
